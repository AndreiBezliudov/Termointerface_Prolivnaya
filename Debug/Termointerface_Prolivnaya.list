
Termointerface_Prolivnaya.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008768  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  080088f8  080088f8  000098f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cc8  08008cc8  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008cc8  08008cc8  00009cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cd0  08008cd0  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cd0  08008cd0  00009cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008cd4  08008cd4  00009cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008cd8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  200001d8  08008eb0  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  08008eb0  0000a564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b18  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f6  00000000  00000000  0001ed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  00021e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ebb  00000000  00000000  00023120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b85  00000000  00000000  00023fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f65  00000000  00000000  00047b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2f62  00000000  00000000  0005fac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132a27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006048  00000000  00000000  00132a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00138ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080088e0 	.word	0x080088e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080088e0 	.word	0x080088e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4e:	4b33      	ldr	r3, [pc, #204]	@ (800101c <MX_GPIO_Init+0xe4>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	4a32      	ldr	r2, [pc, #200]	@ (800101c <MX_GPIO_Init+0xe4>)
 8000f54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5a:	4b30      	ldr	r3, [pc, #192]	@ (800101c <MX_GPIO_Init+0xe4>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b2d      	ldr	r3, [pc, #180]	@ (800101c <MX_GPIO_Init+0xe4>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	4a2c      	ldr	r2, [pc, #176]	@ (800101c <MX_GPIO_Init+0xe4>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f72:	4b2a      	ldr	r3, [pc, #168]	@ (800101c <MX_GPIO_Init+0xe4>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b27      	ldr	r3, [pc, #156]	@ (800101c <MX_GPIO_Init+0xe4>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	4a26      	ldr	r2, [pc, #152]	@ (800101c <MX_GPIO_Init+0xe4>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8a:	4b24      	ldr	r3, [pc, #144]	@ (800101c <MX_GPIO_Init+0xe4>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b21      	ldr	r3, [pc, #132]	@ (800101c <MX_GPIO_Init+0xe4>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	4a20      	ldr	r2, [pc, #128]	@ (800101c <MX_GPIO_Init+0xe4>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <MX_GPIO_Init+0xe4>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_MAX31865_GPIO_Port, CS_MAX31865_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb8:	f001 f8ac 	bl	8002114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Select_Sensor_Pin;
 8000fbc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Select_Sensor_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4813      	ldr	r0, [pc, #76]	@ (8001020 <MX_GPIO_Init+0xe8>)
 8000fd2:	f000 ff0d 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_MAX31865_Pin;
 8000fd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_MAX31865_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff2:	f000 fefd 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RDY_MAX31865_Pin;
 8000ff6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RDY_MAX31865_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100e:	f000 feef 	bl	8001df0 <HAL_GPIO_Init>

}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	@ 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000
 8001020:	48000400 	.word	0x48000400

08001024 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM6) //check if the interrupt comes from TIM1
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a09      	ldr	r2, [pc, #36]	@ (8001058 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d10b      	bne.n	800104e <HAL_TIM_PeriodElapsedCallback+0x2a>
        				  /*
        					  i_partTemp = temperature;
        					  if(temperature > 0){ f_partTemp = (temperature - i_partTemp) * 100;}
        					  else { f_partTemp = abs( (temperature + abs(i_partTemp) ) * 100 ) ; }
        				 */
            RS485_SendIDandTEMP(num_pack, temperature);
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a09      	ldr	r2, [pc, #36]	@ (8001060 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800103c:	edd2 7a00 	vldr	s15, [r2]
 8001040:	eeb0 0a67 	vmov.f32	s0, s15
 8001044:	4618      	mov	r0, r3
 8001046:	f000 fc4b 	bl	80018e0 <RS485_SendIDandTEMP>

            //проверка входа PC7
            checkJS1();
 800104a:	f004 fbd9 	bl	8005800 <checkJS1>
        }
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40001000 	.word	0x40001000
 800105c:	20000000 	.word	0x20000000
 8001060:	20000208 	.word	0x20000208
 8001064:	00000000 	.word	0x00000000

08001068 <Temp>:

long double Temp(uint16_t z)
	{
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]
		float t; // температура в градусах Цельсия
		float Rt; // сопротивление датчика

		Rt = (z * Rref / 32768) - 0.20f; //z - ADC CODE from MAX31865. 32768 = 2^15
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	f240 72c9 	movw	r2, #1993	@ 0x7c9
 8001078:	fb02 f303 	mul.w	r3, r2, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	da02      	bge.n	8001086 <Temp+0x1e>
 8001080:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001084:	337f      	adds	r3, #127	@ 0x7f
 8001086:	13db      	asrs	r3, r3, #15
 8001088:	ee07 3a90 	vmov	s15, r3
 800108c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001090:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001140 <Temp+0xd8>
 8001094:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001098:	edc7 7a03 	vstr	s15, [r7, #12]
		t = (0.00004046 * Rt*Rt) + (0.471135 * Rt) - 245.68098748;
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f7ff fa53 	bl	8000548 <__aeabi_f2d>
 80010a2:	a321      	add	r3, pc, #132	@ (adr r3, 8001128 <Temp+0xc0>)
 80010a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a8:	f7ff faa6 	bl	80005f8 <__aeabi_dmul>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4614      	mov	r4, r2
 80010b2:	461d      	mov	r5, r3
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f7ff fa47 	bl	8000548 <__aeabi_f2d>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4620      	mov	r0, r4
 80010c0:	4629      	mov	r1, r5
 80010c2:	f7ff fa99 	bl	80005f8 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4614      	mov	r4, r2
 80010cc:	461d      	mov	r5, r3
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff fa3a 	bl	8000548 <__aeabi_f2d>
 80010d4:	a316      	add	r3, pc, #88	@ (adr r3, 8001130 <Temp+0xc8>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f7ff fa8d 	bl	80005f8 <__aeabi_dmul>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4620      	mov	r0, r4
 80010e4:	4629      	mov	r1, r5
 80010e6:	f7ff f8d1 	bl	800028c <__adddf3>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	a311      	add	r3, pc, #68	@ (adr r3, 8001138 <Temp+0xd0>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	f7ff f8c6 	bl	8000288 <__aeabi_dsub>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fd50 	bl	8000ba8 <__aeabi_d2f>
 8001108:	4603      	mov	r3, r0
 800110a:	60bb      	str	r3, [r7, #8]
		return t;
 800110c:	68b8      	ldr	r0, [r7, #8]
 800110e:	f7ff fa1b 	bl	8000548 <__aeabi_f2d>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	ec43 2b17 	vmov	d7, r2, r3
	}
 800111a:	eeb0 0a47 	vmov.f32	s0, s14
 800111e:	eef0 0a67 	vmov.f32	s1, s15
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bdb0      	pop	{r4, r5, r7, pc}
 8001128:	03adb484 	.word	0x03adb484
 800112c:	3f053673 	.word	0x3f053673
 8001130:	6a400fbb 	.word	0x6a400fbb
 8001134:	3fde2713 	.word	0x3fde2713
 8001138:	a64172bc 	.word	0xa64172bc
 800113c:	406eb5ca 	.word	0x406eb5ca
 8001140:	3e4ccccd 	.word	0x3e4ccccd

08001144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114a:	f000 fc28 	bl	800199e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114e:	f000 f845 	bl	80011dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001152:	f7ff fef1 	bl	8000f38 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001156:	f000 fab7 	bl	80016c8 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 800115a:	f000 f88d 	bl	8001278 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 800115e:	f000 fae3 	bl	8001728 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8001162:	f000 fa55 	bl	8001610 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8001166:	4818      	ldr	r0, [pc, #96]	@ (80011c8 <main+0x84>)
 8001168:	f002 ff86 	bl	8004078 <HAL_TIM_Base_Start_IT>

  Max31865_init(&pt500,&hspi3,CS_MAX31865_GPIO_Port,CS_MAX31865_Pin,2,50);
 800116c:	2332      	movs	r3, #50	@ 0x32
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	2302      	movs	r3, #2
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001178:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800117c:	4913      	ldr	r1, [pc, #76]	@ (80011cc <main+0x88>)
 800117e:	4814      	ldr	r0, [pc, #80]	@ (80011d0 <main+0x8c>)
 8001180:	f004 fd17 	bl	8005bb2 <Max31865_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if ( JS1_isSet() ) {
 8001184:	f004 fb86 	bl	8005894 <JS1_isSet>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <main+0x50>
		  // Работа с датчиком ЛТ-300. Запрос температуры датчика ЛТ-300
		  LT300_TemperatureRequest();
 800118e:	f000 fbcf 	bl	8001930 <LT300_TemperatureRequest>
 8001192:	e014      	b.n	80011be <main+0x7a>
		  // принять и распарсить ответ: https://termexlab.ru/#!/ru/product/lt-300-t-termometr-laboratornyij-elektronnyij-250360/?open-tab=overview,specifications,shipping_set,files,additional_information,questions
		  // значение температуры записать в переменную temperature
	  } else {
		  // Работа с ИМС MAX31865. чтение сопротивления и преобразование в температуру датчика PT-500
		  ADC_CODE = Max31865_readRTD(&pt500);
 8001194:	480e      	ldr	r0, [pc, #56]	@ (80011d0 <main+0x8c>)
 8001196:	f004 fcdd 	bl	8005b54 <Max31865_readRTD>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <main+0x90>)
 80011a0:	801a      	strh	r2, [r3, #0]
		  temperature = Temp(ADC_CODE);
 80011a2:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <main+0x90>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff5e 	bl	8001068 <Temp>
 80011ac:	ec53 2b10 	vmov	r2, r3, d0
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fcf8 	bl	8000ba8 <__aeabi_d2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a07      	ldr	r2, [pc, #28]	@ (80011d8 <main+0x94>)
 80011bc:	6013      	str	r3, [r2, #0]

	  // посылка по USART1 значения температуры и другой информации осуществляется в колбэке таймера 6



	  HAL_Delay(10); // между отправкам 249.6мс
 80011be:	200a      	movs	r0, #10
 80011c0:	f000 fc62 	bl	8001a88 <HAL_Delay>
	  if ( JS1_isSet() ) {
 80011c4:	e7de      	b.n	8001184 <main+0x40>
 80011c6:	bf00      	nop
 80011c8:	20000274 	.word	0x20000274
 80011cc:	2000020c 	.word	0x2000020c
 80011d0:	200001f4 	.word	0x200001f4
 80011d4:	20000204 	.word	0x20000204
 80011d8:	20000208 	.word	0x20000208

080011dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b096      	sub	sp, #88	@ 0x58
 80011e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2244      	movs	r2, #68	@ 0x44
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f005 faaf 	bl	800674e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f0:	463b      	mov	r3, r7
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001202:	f000 ffad 	bl	8002160 <HAL_PWREx_ControlVoltageScaling>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800120c:	f000 f82d 	bl	800126a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001210:	2310      	movs	r3, #16
 8001212:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001214:	2301      	movs	r3, #1
 8001216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 800121c:	2390      	movs	r3, #144	@ 0x90
 800121e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001220:	2300      	movs	r3, #0
 8001222:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4618      	mov	r0, r3
 800122a:	f000 ffef 	bl	800220c <HAL_RCC_OscConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001234:	f000 f819 	bl	800126a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001238:	230f      	movs	r3, #15
 800123a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800124c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	2101      	movs	r1, #1
 8001252:	4618      	mov	r0, r3
 8001254:	f001 fbee 	bl	8002a34 <HAL_RCC_ClockConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800125e:	f000 f804 	bl	800126a <Error_Handler>
  }
}
 8001262:	bf00      	nop
 8001264:	3758      	adds	r7, #88	@ 0x58
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126e:	b672      	cpsid	i
}
 8001270:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001272:	bf00      	nop
 8001274:	e7fd      	b.n	8001272 <Error_Handler+0x8>
	...

08001278 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800127c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <MX_SPI3_Init+0x74>)
 800127e:	4a1c      	ldr	r2, [pc, #112]	@ (80012f0 <MX_SPI3_Init+0x78>)
 8001280:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001282:	4b1a      	ldr	r3, [pc, #104]	@ (80012ec <MX_SPI3_Init+0x74>)
 8001284:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001288:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800128a:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <MX_SPI3_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001290:	4b16      	ldr	r3, [pc, #88]	@ (80012ec <MX_SPI3_Init+0x74>)
 8001292:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001296:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001298:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <MX_SPI3_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800129e:	4b13      	ldr	r3, [pc, #76]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012a4:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012aa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012ae:	2228      	movs	r2, #40	@ 0x28
 80012b0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80012c4:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012c6:	2207      	movs	r2, #7
 80012c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	@ (80012ec <MX_SPI3_Init+0x74>)
 80012d8:	f002 f8da 	bl	8003490 <HAL_SPI_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012e2:	f7ff ffc2 	bl	800126a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000020c 	.word	0x2000020c
 80012f0:	40003c00 	.word	0x40003c00

080012f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	@ 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a17      	ldr	r2, [pc, #92]	@ (8001370 <HAL_SPI_MspInit+0x7c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d128      	bne.n	8001368 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001316:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <HAL_SPI_MspInit+0x80>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131a:	4a16      	ldr	r2, [pc, #88]	@ (8001374 <HAL_SPI_MspInit+0x80>)
 800131c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001320:	6593      	str	r3, [r2, #88]	@ 0x58
 8001322:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <HAL_SPI_MspInit+0x80>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001326:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <HAL_SPI_MspInit+0x80>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	4a10      	ldr	r2, [pc, #64]	@ (8001374 <HAL_SPI_MspInit+0x80>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <HAL_SPI_MspInit+0x80>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001346:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001358:	2306      	movs	r3, #6
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4805      	ldr	r0, [pc, #20]	@ (8001378 <HAL_SPI_MspInit+0x84>)
 8001364:	f000 fd44 	bl	8001df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	@ 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40003c00 	.word	0x40003c00
 8001374:	40021000 	.word	0x40021000
 8001378:	48000800 	.word	0x48000800

0800137c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <HAL_MspInit+0x44>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001386:	4a0e      	ldr	r2, [pc, #56]	@ (80013c0 <HAL_MspInit+0x44>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6613      	str	r3, [r2, #96]	@ 0x60
 800138e:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <HAL_MspInit+0x44>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <HAL_MspInit+0x44>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139e:	4a08      	ldr	r2, [pc, #32]	@ (80013c0 <HAL_MspInit+0x44>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_MspInit+0x44>)
 80013a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <NMI_Handler+0x4>

080013cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <MemManage_Handler+0x4>

080013dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141a:	f000 fb15 	bl	8001a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <USART1_IRQHandler+0x10>)
 800142a:	f003 f949 	bl	80046c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000300 	.word	0x20000300

08001438 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <USART3_IRQHandler+0x10>)
 800143e:	f003 f93f 	bl	80046c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000388 	.word	0x20000388

0800144c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <TIM6_DAC_IRQHandler+0x10>)
 8001452:	f002 fe65 	bl	8004120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000274 	.word	0x20000274

08001460 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return 1;
 8001464:	2301      	movs	r3, #1
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <_kill>:

int _kill(int pid, int sig)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800147a:	f005 f9bb 	bl	80067f4 <__errno>
 800147e:	4603      	mov	r3, r0
 8001480:	2216      	movs	r2, #22
 8001482:	601a      	str	r2, [r3, #0]
  return -1;
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <_exit>:

void _exit (int status)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001498:	f04f 31ff 	mov.w	r1, #4294967295
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ffe7 	bl	8001470 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014a2:	bf00      	nop
 80014a4:	e7fd      	b.n	80014a2 <_exit+0x12>

080014a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e00a      	b.n	80014ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014b8:	f3af 8000 	nop.w
 80014bc:	4601      	mov	r1, r0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	60ba      	str	r2, [r7, #8]
 80014c4:	b2ca      	uxtb	r2, r1
 80014c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3301      	adds	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dbf0      	blt.n	80014b8 <_read+0x12>
  }

  return len;
 80014d6:	687b      	ldr	r3, [r7, #4]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	e009      	b.n	8001506 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	60ba      	str	r2, [r7, #8]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	3301      	adds	r3, #1
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	429a      	cmp	r2, r3
 800150c:	dbf1      	blt.n	80014f2 <_write+0x12>
  }
  return len;
 800150e:	687b      	ldr	r3, [r7, #4]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <_close>:

int _close(int file)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001540:	605a      	str	r2, [r3, #4]
  return 0;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <_isatty>:

int _isatty(int file)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001558:	2301      	movs	r3, #1
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001566:	b480      	push	{r7}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001588:	4a14      	ldr	r2, [pc, #80]	@ (80015dc <_sbrk+0x5c>)
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <_sbrk+0x60>)
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001594:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <_sbrk+0x64>)
 800159e:	4a12      	ldr	r2, [pc, #72]	@ (80015e8 <_sbrk+0x68>)
 80015a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d207      	bcs.n	80015c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b0:	f005 f920 	bl	80067f4 <__errno>
 80015b4:	4603      	mov	r3, r0
 80015b6:	220c      	movs	r2, #12
 80015b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
 80015be:	e009      	b.n	80015d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c0:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <_sbrk+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c6:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	4a05      	ldr	r2, [pc, #20]	@ (80015e4 <_sbrk+0x64>)
 80015d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d2:	68fb      	ldr	r3, [r7, #12]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20010000 	.word	0x20010000
 80015e0:	00000400 	.word	0x00000400
 80015e4:	20000270 	.word	0x20000270
 80015e8:	20000568 	.word	0x20000568

080015ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <SystemInit+0x20>)
 80015f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015f6:	4a05      	ldr	r2, [pc, #20]	@ (800160c <SystemInit+0x20>)
 80015f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001620:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <MX_TIM6_Init+0x64>)
 8001622:	4a15      	ldr	r2, [pc, #84]	@ (8001678 <MX_TIM6_Init+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 239;
 8001626:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <MX_TIM6_Init+0x64>)
 8001628:	22ef      	movs	r2, #239	@ 0xef
 800162a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <MX_TIM6_Init+0x64>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 25000;
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <MX_TIM6_Init+0x64>)
 8001634:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001638:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <MX_TIM6_Init+0x64>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001640:	480c      	ldr	r0, [pc, #48]	@ (8001674 <MX_TIM6_Init+0x64>)
 8001642:	f002 fcc1 	bl	8003fc8 <HAL_TIM_Base_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800164c:	f7ff fe0d 	bl	800126a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	4619      	mov	r1, r3
 800165c:	4805      	ldr	r0, [pc, #20]	@ (8001674 <MX_TIM6_Init+0x64>)
 800165e:	f002 feff 	bl	8004460 <HAL_TIMEx_MasterConfigSynchronization>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001668:	f7ff fdff 	bl	800126a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000274 	.word	0x20000274
 8001678:	40001000 	.word	0x40001000

0800167c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0d      	ldr	r2, [pc, #52]	@ (80016c0 <HAL_TIM_Base_MspInit+0x44>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d113      	bne.n	80016b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800168e:	4b0d      	ldr	r3, [pc, #52]	@ (80016c4 <HAL_TIM_Base_MspInit+0x48>)
 8001690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001692:	4a0c      	ldr	r2, [pc, #48]	@ (80016c4 <HAL_TIM_Base_MspInit+0x48>)
 8001694:	f043 0310 	orr.w	r3, r3, #16
 8001698:	6593      	str	r3, [r2, #88]	@ 0x58
 800169a:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <HAL_TIM_Base_MspInit+0x48>)
 800169c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	2036      	movs	r0, #54	@ 0x36
 80016ac:	f000 faeb 	bl	8001c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016b0:	2036      	movs	r0, #54	@ 0x36
 80016b2:	f000 fb04 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40001000 	.word	0x40001000
 80016c4:	40021000 	.word	0x40021000

080016c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016cc:	4b14      	ldr	r3, [pc, #80]	@ (8001720 <MX_USART1_UART_Init+0x58>)
 80016ce:	4a15      	ldr	r2, [pc, #84]	@ (8001724 <MX_USART1_UART_Init+0x5c>)
 80016d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016d2:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <MX_USART1_UART_Init+0x58>)
 80016d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <MX_USART1_UART_Init+0x58>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001720 <MX_USART1_UART_Init+0x58>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <MX_USART1_UART_Init+0x58>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <MX_USART1_UART_Init+0x58>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <MX_USART1_UART_Init+0x58>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <MX_USART1_UART_Init+0x58>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <MX_USART1_UART_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <MX_USART1_UART_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	@ (8001720 <MX_USART1_UART_Init+0x58>)
 800170c:	f002 ff2c 	bl	8004568 <HAL_UART_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001716:	f7ff fda8 	bl	800126a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000300 	.word	0x20000300
 8001724:	40013800 	.word	0x40013800

08001728 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800172c:	4b14      	ldr	r3, [pc, #80]	@ (8001780 <MX_USART3_UART_Init+0x58>)
 800172e:	4a15      	ldr	r2, [pc, #84]	@ (8001784 <MX_USART3_UART_Init+0x5c>)
 8001730:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 4800;
 8001732:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <MX_USART3_UART_Init+0x58>)
 8001734:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 8001738:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800173a:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <MX_USART3_UART_Init+0x58>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001740:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <MX_USART3_UART_Init+0x58>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001746:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <MX_USART3_UART_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <MX_USART3_UART_Init+0x58>)
 800174e:	220c      	movs	r2, #12
 8001750:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001752:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <MX_USART3_UART_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001758:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <MX_USART3_UART_Init+0x58>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800175e:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <MX_USART3_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <MX_USART3_UART_Init+0x58>)
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	@ (8001780 <MX_USART3_UART_Init+0x58>)
 800176c:	f002 fefc 	bl	8004568 <HAL_UART_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001776:	f7ff fd78 	bl	800126a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000388 	.word	0x20000388
 8001784:	40004800 	.word	0x40004800

08001788 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b0a2      	sub	sp, #136	@ 0x88
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a0:	f107 0318 	add.w	r3, r7, #24
 80017a4:	225c      	movs	r2, #92	@ 0x5c
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f004 ffd0 	bl	800674e <memset>
  if(uartHandle->Instance==USART1)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a46      	ldr	r2, [pc, #280]	@ (80018cc <HAL_UART_MspInit+0x144>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d140      	bne.n	800183a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017bc:	2300      	movs	r3, #0
 80017be:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c0:	f107 0318 	add.w	r3, r7, #24
 80017c4:	4618      	mov	r0, r3
 80017c6:	f001 fb59 	bl	8002e7c <HAL_RCCEx_PeriphCLKConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017d0:	f7ff fd4b 	bl	800126a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017d4:	4b3e      	ldr	r3, [pc, #248]	@ (80018d0 <HAL_UART_MspInit+0x148>)
 80017d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d8:	4a3d      	ldr	r2, [pc, #244]	@ (80018d0 <HAL_UART_MspInit+0x148>)
 80017da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017de:	6613      	str	r3, [r2, #96]	@ 0x60
 80017e0:	4b3b      	ldr	r3, [pc, #236]	@ (80018d0 <HAL_UART_MspInit+0x148>)
 80017e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	4b38      	ldr	r3, [pc, #224]	@ (80018d0 <HAL_UART_MspInit+0x148>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f0:	4a37      	ldr	r2, [pc, #220]	@ (80018d0 <HAL_UART_MspInit+0x148>)
 80017f2:	f043 0302 	orr.w	r3, r3, #2
 80017f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f8:	4b35      	ldr	r3, [pc, #212]	@ (80018d0 <HAL_UART_MspInit+0x148>)
 80017fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001804:	23c0      	movs	r3, #192	@ 0xc0
 8001806:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001816:	2307      	movs	r3, #7
 8001818:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001820:	4619      	mov	r1, r3
 8001822:	482c      	ldr	r0, [pc, #176]	@ (80018d4 <HAL_UART_MspInit+0x14c>)
 8001824:	f000 fae4 	bl	8001df0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2100      	movs	r1, #0
 800182c:	2025      	movs	r0, #37	@ 0x25
 800182e:	f000 fa2a 	bl	8001c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001832:	2025      	movs	r0, #37	@ 0x25
 8001834:	f000 fa43 	bl	8001cbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001838:	e044      	b.n	80018c4 <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART3)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a26      	ldr	r2, [pc, #152]	@ (80018d8 <HAL_UART_MspInit+0x150>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d13f      	bne.n	80018c4 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001844:	2304      	movs	r3, #4
 8001846:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001848:	2300      	movs	r3, #0
 800184a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800184c:	f107 0318 	add.w	r3, r7, #24
 8001850:	4618      	mov	r0, r3
 8001852:	f001 fb13 	bl	8002e7c <HAL_RCCEx_PeriphCLKConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800185c:	f7ff fd05 	bl	800126a <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001860:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <HAL_UART_MspInit+0x148>)
 8001862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001864:	4a1a      	ldr	r2, [pc, #104]	@ (80018d0 <HAL_UART_MspInit+0x148>)
 8001866:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800186a:	6593      	str	r3, [r2, #88]	@ 0x58
 800186c:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <HAL_UART_MspInit+0x148>)
 800186e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001870:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001878:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <HAL_UART_MspInit+0x148>)
 800187a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187c:	4a14      	ldr	r2, [pc, #80]	@ (80018d0 <HAL_UART_MspInit+0x148>)
 800187e:	f043 0304 	orr.w	r3, r3, #4
 8001882:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_UART_MspInit+0x148>)
 8001886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001890:	2330      	movs	r3, #48	@ 0x30
 8001892:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189c:	2303      	movs	r3, #3
 800189e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018a2:	2307      	movs	r3, #7
 80018a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80018ac:	4619      	mov	r1, r3
 80018ae:	480b      	ldr	r0, [pc, #44]	@ (80018dc <HAL_UART_MspInit+0x154>)
 80018b0:	f000 fa9e 	bl	8001df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2100      	movs	r1, #0
 80018b8:	2027      	movs	r0, #39	@ 0x27
 80018ba:	f000 f9e4 	bl	8001c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018be:	2027      	movs	r0, #39	@ 0x27
 80018c0:	f000 f9fd 	bl	8001cbe <HAL_NVIC_EnableIRQ>
}
 80018c4:	bf00      	nop
 80018c6:	3788      	adds	r7, #136	@ 0x88
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40013800 	.word	0x40013800
 80018d0:	40021000 	.word	0x40021000
 80018d4:	48000400 	.word	0x48000400
 80018d8:	40004800 	.word	0x40004800
 80018dc:	48000800 	.word	0x48000800

080018e0 <RS485_SendIDandTEMP>:

/* USER CODE BEGIN 1 */

// CODE USART1 Begin

void RS485_SendIDandTEMP(int id_device, float temp_common){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	ed87 0a00 	vstr	s0, [r7]
	snprintf(trans_str, 40, "%6d, %6.2f\n\r", id_device, temp_common);
 80018ec:	6838      	ldr	r0, [r7, #0]
 80018ee:	f7fe fe2b 	bl	8000548 <__aeabi_f2d>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	e9cd 2300 	strd	r2, r3, [sp]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a09      	ldr	r2, [pc, #36]	@ (8001924 <RS485_SendIDandTEMP+0x44>)
 80018fe:	2128      	movs	r1, #40	@ 0x28
 8001900:	4809      	ldr	r0, [pc, #36]	@ (8001928 <RS485_SendIDandTEMP+0x48>)
 8001902:	f004 fead 	bl	8006660 <sniprintf>
	HAL_UART_Transmit_IT(&huart1, (uint8_t*)trans_str, strlen(trans_str));
 8001906:	4808      	ldr	r0, [pc, #32]	@ (8001928 <RS485_SendIDandTEMP+0x48>)
 8001908:	f7fe fcb2 	bl	8000270 <strlen>
 800190c:	4603      	mov	r3, r0
 800190e:	b29b      	uxth	r3, r3
 8001910:	461a      	mov	r2, r3
 8001912:	4905      	ldr	r1, [pc, #20]	@ (8001928 <RS485_SendIDandTEMP+0x48>)
 8001914:	4805      	ldr	r0, [pc, #20]	@ (800192c <RS485_SendIDandTEMP+0x4c>)
 8001916:	f002 fe75 	bl	8004604 <HAL_UART_Transmit_IT>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	080088f8 	.word	0x080088f8
 8001928:	200002c0 	.word	0x200002c0
 800192c:	20000300 	.word	0x20000300

08001930 <LT300_TemperatureRequest>:

// CODE USART3 Begin



void LT300_TemperatureRequest(){
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)"d\n", 2);
 8001934:	2202      	movs	r2, #2
 8001936:	4903      	ldr	r1, [pc, #12]	@ (8001944 <LT300_TemperatureRequest+0x14>)
 8001938:	4803      	ldr	r0, [pc, #12]	@ (8001948 <LT300_TemperatureRequest+0x18>)
 800193a:	f002 fe63 	bl	8004604 <HAL_UART_Transmit_IT>
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	08008908 	.word	0x08008908
 8001948:	20000388 	.word	0x20000388

0800194c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800194c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001984 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001950:	f7ff fe4c 	bl	80015ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001954:	480c      	ldr	r0, [pc, #48]	@ (8001988 <LoopForever+0x6>)
  ldr r1, =_edata
 8001956:	490d      	ldr	r1, [pc, #52]	@ (800198c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001958:	4a0d      	ldr	r2, [pc, #52]	@ (8001990 <LoopForever+0xe>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800195c:	e002      	b.n	8001964 <LoopCopyDataInit>

0800195e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001962:	3304      	adds	r3, #4

08001964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001968:	d3f9      	bcc.n	800195e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196a:	4a0a      	ldr	r2, [pc, #40]	@ (8001994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800196c:	4c0a      	ldr	r4, [pc, #40]	@ (8001998 <LoopForever+0x16>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001970:	e001      	b.n	8001976 <LoopFillZerobss>

08001972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001974:	3204      	adds	r2, #4

08001976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001978:	d3fb      	bcc.n	8001972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197a:	f004 ff41 	bl	8006800 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800197e:	f7ff fbe1 	bl	8001144 <main>

08001982 <LoopForever>:

LoopForever:
    b LoopForever
 8001982:	e7fe      	b.n	8001982 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001984:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800198c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001990:	08008cd8 	.word	0x08008cd8
  ldr r2, =_sbss
 8001994:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001998:	20000564 	.word	0x20000564

0800199c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800199c:	e7fe      	b.n	800199c <ADC1_IRQHandler>

0800199e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a8:	2003      	movs	r0, #3
 80019aa:	f000 f961 	bl	8001c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ae:	200f      	movs	r0, #15
 80019b0:	f000 f80e 	bl	80019d0 <HAL_InitTick>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	71fb      	strb	r3, [r7, #7]
 80019be:	e001      	b.n	80019c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019c0:	f7ff fcdc 	bl	800137c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019c4:	79fb      	ldrb	r3, [r7, #7]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019dc:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <HAL_InitTick+0x6c>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d023      	beq.n	8001a2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019e4:	4b16      	ldr	r3, [pc, #88]	@ (8001a40 <HAL_InitTick+0x70>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b14      	ldr	r3, [pc, #80]	@ (8001a3c <HAL_InitTick+0x6c>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	4619      	mov	r1, r3
 80019ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f96d 	bl	8001cda <HAL_SYSTICK_Config>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10f      	bne.n	8001a26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b0f      	cmp	r3, #15
 8001a0a:	d809      	bhi.n	8001a20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	f04f 30ff 	mov.w	r0, #4294967295
 8001a14:	f000 f937 	bl	8001c86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a18:	4a0a      	ldr	r2, [pc, #40]	@ (8001a44 <HAL_InitTick+0x74>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e007      	b.n	8001a30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	e004      	b.n	8001a30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
 8001a2a:	e001      	b.n	8001a30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	2000000c 	.word	0x2000000c
 8001a40:	20000004 	.word	0x20000004
 8001a44:	20000008 	.word	0x20000008

08001a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_IncTick+0x20>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_IncTick+0x24>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	4a04      	ldr	r2, [pc, #16]	@ (8001a6c <HAL_IncTick+0x24>)
 8001a5a:	6013      	str	r3, [r2, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	2000000c 	.word	0x2000000c
 8001a6c:	20000410 	.word	0x20000410

08001a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return uwTick;
 8001a74:	4b03      	ldr	r3, [pc, #12]	@ (8001a84 <HAL_GetTick+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000410 	.word	0x20000410

08001a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a90:	f7ff ffee 	bl	8001a70 <HAL_GetTick>
 8001a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa0:	d005      	beq.n	8001aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001acc <HAL_Delay+0x44>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aae:	bf00      	nop
 8001ab0:	f7ff ffde 	bl	8001a70 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d8f7      	bhi.n	8001ab0 <HAL_Delay+0x28>
  {
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000000c 	.word	0x2000000c

08001ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001aec:	4013      	ands	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b02:	4a04      	ldr	r2, [pc, #16]	@ (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	60d3      	str	r3, [r2, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b1c:	4b04      	ldr	r3, [pc, #16]	@ (8001b30 <__NVIC_GetPriorityGrouping+0x18>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	f003 0307 	and.w	r3, r3, #7
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	db0b      	blt.n	8001b5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	f003 021f 	and.w	r2, r3, #31
 8001b4c:	4907      	ldr	r1, [pc, #28]	@ (8001b6c <__NVIC_EnableIRQ+0x38>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	2001      	movs	r0, #1
 8001b56:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000e100 	.word	0xe000e100

08001b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db0a      	blt.n	8001b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	490c      	ldr	r1, [pc, #48]	@ (8001bbc <__NVIC_SetPriority+0x4c>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	0112      	lsls	r2, r2, #4
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b98:	e00a      	b.n	8001bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4908      	ldr	r1, [pc, #32]	@ (8001bc0 <__NVIC_SetPriority+0x50>)
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3b04      	subs	r3, #4
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	440b      	add	r3, r1
 8001bae:	761a      	strb	r2, [r3, #24]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	@ 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f1c3 0307 	rsb	r3, r3, #7
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	bf28      	it	cs
 8001be2:	2304      	movcs	r3, #4
 8001be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3304      	adds	r3, #4
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d902      	bls.n	8001bf4 <NVIC_EncodePriority+0x30>
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3b03      	subs	r3, #3
 8001bf2:	e000      	b.n	8001bf6 <NVIC_EncodePriority+0x32>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	401a      	ands	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	4313      	orrs	r3, r2
         );
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	@ 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c3c:	d301      	bcc.n	8001c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00f      	b.n	8001c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c42:	4a0a      	ldr	r2, [pc, #40]	@ (8001c6c <SysTick_Config+0x40>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f7ff ff8e 	bl	8001b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c54:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <SysTick_Config+0x40>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5a:	4b04      	ldr	r3, [pc, #16]	@ (8001c6c <SysTick_Config+0x40>)
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	e000e010 	.word	0xe000e010

08001c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ff29 	bl	8001ad0 <__NVIC_SetPriorityGrouping>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c98:	f7ff ff3e 	bl	8001b18 <__NVIC_GetPriorityGrouping>
 8001c9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	6978      	ldr	r0, [r7, #20]
 8001ca4:	f7ff ff8e 	bl	8001bc4 <NVIC_EncodePriority>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff5d 	bl	8001b70 <__NVIC_SetPriority>
}
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff31 	bl	8001b34 <__NVIC_EnableIRQ>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffa2 	bl	8001c2c <SysTick_Config>
 8001ce8:	4603      	mov	r3, r0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b085      	sub	sp, #20
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d008      	beq.n	8001d1c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2204      	movs	r2, #4
 8001d0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e022      	b.n	8001d62 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 020e 	bic.w	r2, r2, #14
 8001d2a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d40:	f003 021c 	and.w	r2, r3, #28
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	2101      	movs	r1, #1
 8001d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d005      	beq.n	8001d92 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2204      	movs	r2, #4
 8001d8a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	e029      	b.n	8001de6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 020e 	bic.w	r2, r2, #14
 8001da0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0201 	bic.w	r2, r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	f003 021c 	and.w	r2, r3, #28
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	4798      	blx	r3
    }
  }
  return status;
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfe:	e154      	b.n	80020aa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2101      	movs	r1, #1
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8146 	beq.w	80020a4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d005      	beq.n	8001e30 <HAL_GPIO_Init+0x40>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d130      	bne.n	8001e92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e66:	2201      	movs	r2, #1
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	091b      	lsrs	r3, r3, #4
 8001e7c:	f003 0201 	and.w	r2, r3, #1
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d017      	beq.n	8001ece <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d123      	bne.n	8001f22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	08da      	lsrs	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3208      	adds	r2, #8
 8001ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	691a      	ldr	r2, [r3, #16]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	08da      	lsrs	r2, r3, #3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3208      	adds	r2, #8
 8001f1c:	6939      	ldr	r1, [r7, #16]
 8001f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0203 	and.w	r2, r3, #3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	f000 80a0 	beq.w	80020a4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f64:	4b58      	ldr	r3, [pc, #352]	@ (80020c8 <HAL_GPIO_Init+0x2d8>)
 8001f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f68:	4a57      	ldr	r2, [pc, #348]	@ (80020c8 <HAL_GPIO_Init+0x2d8>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f70:	4b55      	ldr	r3, [pc, #340]	@ (80020c8 <HAL_GPIO_Init+0x2d8>)
 8001f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f7c:	4a53      	ldr	r2, [pc, #332]	@ (80020cc <HAL_GPIO_Init+0x2dc>)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	3302      	adds	r3, #2
 8001f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	220f      	movs	r2, #15
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001fa6:	d019      	beq.n	8001fdc <HAL_GPIO_Init+0x1ec>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a49      	ldr	r2, [pc, #292]	@ (80020d0 <HAL_GPIO_Init+0x2e0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d013      	beq.n	8001fd8 <HAL_GPIO_Init+0x1e8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a48      	ldr	r2, [pc, #288]	@ (80020d4 <HAL_GPIO_Init+0x2e4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_GPIO_Init+0x1e4>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a47      	ldr	r2, [pc, #284]	@ (80020d8 <HAL_GPIO_Init+0x2e8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d007      	beq.n	8001fd0 <HAL_GPIO_Init+0x1e0>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a46      	ldr	r2, [pc, #280]	@ (80020dc <HAL_GPIO_Init+0x2ec>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d101      	bne.n	8001fcc <HAL_GPIO_Init+0x1dc>
 8001fc8:	2304      	movs	r3, #4
 8001fca:	e008      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fcc:	2307      	movs	r3, #7
 8001fce:	e006      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e004      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e002      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	f002 0203 	and.w	r2, r2, #3
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	4093      	lsls	r3, r2
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fee:	4937      	ldr	r1, [pc, #220]	@ (80020cc <HAL_GPIO_Init+0x2dc>)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ffc:	4b38      	ldr	r3, [pc, #224]	@ (80020e0 <HAL_GPIO_Init+0x2f0>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002020:	4a2f      	ldr	r2, [pc, #188]	@ (80020e0 <HAL_GPIO_Init+0x2f0>)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002026:	4b2e      	ldr	r3, [pc, #184]	@ (80020e0 <HAL_GPIO_Init+0x2f0>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	43db      	mvns	r3, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800204a:	4a25      	ldr	r2, [pc, #148]	@ (80020e0 <HAL_GPIO_Init+0x2f0>)
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002050:	4b23      	ldr	r3, [pc, #140]	@ (80020e0 <HAL_GPIO_Init+0x2f0>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	43db      	mvns	r3, r3
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002074:	4a1a      	ldr	r2, [pc, #104]	@ (80020e0 <HAL_GPIO_Init+0x2f0>)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800207a:	4b19      	ldr	r3, [pc, #100]	@ (80020e0 <HAL_GPIO_Init+0x2f0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	43db      	mvns	r3, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800209e:	4a10      	ldr	r2, [pc, #64]	@ (80020e0 <HAL_GPIO_Init+0x2f0>)
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	3301      	adds	r3, #1
 80020a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f47f aea3 	bne.w	8001e00 <HAL_GPIO_Init+0x10>
  }
}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010000 	.word	0x40010000
 80020d0:	48000400 	.word	0x48000400
 80020d4:	48000800 	.word	0x48000800
 80020d8:	48000c00 	.word	0x48000c00
 80020dc:	48001000 	.word	0x48001000
 80020e0:	40010400 	.word	0x40010400

080020e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	887b      	ldrh	r3, [r7, #2]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	e001      	b.n	8002106 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
 8002120:	4613      	mov	r3, r2
 8002122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002124:	787b      	ldrb	r3, [r7, #1]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002130:	e002      	b.n	8002138 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002132:	887a      	ldrh	r2, [r7, #2]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002148:	4b04      	ldr	r3, [pc, #16]	@ (800215c <HAL_PWREx_GetVoltageRange+0x18>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40007000 	.word	0x40007000

08002160 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800216e:	d130      	bne.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002170:	4b23      	ldr	r3, [pc, #140]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800217c:	d038      	beq.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800217e:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002186:	4a1e      	ldr	r2, [pc, #120]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002188:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800218c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800218e:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2232      	movs	r2, #50	@ 0x32
 8002194:	fb02 f303 	mul.w	r3, r2, r3
 8002198:	4a1b      	ldr	r2, [pc, #108]	@ (8002208 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	0c9b      	lsrs	r3, r3, #18
 80021a0:	3301      	adds	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021a4:	e002      	b.n	80021ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	3b01      	subs	r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ac:	4b14      	ldr	r3, [pc, #80]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b8:	d102      	bne.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f2      	bne.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021cc:	d110      	bne.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e00f      	b.n	80021f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021de:	d007      	beq.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021e0:	4b07      	ldr	r3, [pc, #28]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021e8:	4a05      	ldr	r2, [pc, #20]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40007000 	.word	0x40007000
 8002204:	20000004 	.word	0x20000004
 8002208:	431bde83 	.word	0x431bde83

0800220c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d102      	bne.n	8002220 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	f000 bc02 	b.w	8002a24 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002220:	4b96      	ldr	r3, [pc, #600]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800222a:	4b94      	ldr	r3, [pc, #592]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80e4 	beq.w	800240a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <HAL_RCC_OscConfig+0x4c>
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2b0c      	cmp	r3, #12
 800224c:	f040 808b 	bne.w	8002366 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2b01      	cmp	r3, #1
 8002254:	f040 8087 	bne.w	8002366 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002258:	4b88      	ldr	r3, [pc, #544]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_OscConfig+0x64>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e3d9      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1a      	ldr	r2, [r3, #32]
 8002274:	4b81      	ldr	r3, [pc, #516]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d004      	beq.n	800228a <HAL_RCC_OscConfig+0x7e>
 8002280:	4b7e      	ldr	r3, [pc, #504]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002288:	e005      	b.n	8002296 <HAL_RCC_OscConfig+0x8a>
 800228a:	4b7c      	ldr	r3, [pc, #496]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 800228c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002296:	4293      	cmp	r3, r2
 8002298:	d223      	bcs.n	80022e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 fd8c 	bl	8002dbc <RCC_SetFlashLatencyFromMSIRange>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e3ba      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ae:	4b73      	ldr	r3, [pc, #460]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a72      	ldr	r2, [pc, #456]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022b4:	f043 0308 	orr.w	r3, r3, #8
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	4b70      	ldr	r3, [pc, #448]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	496d      	ldr	r1, [pc, #436]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022cc:	4b6b      	ldr	r3, [pc, #428]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	4968      	ldr	r1, [pc, #416]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
 80022e0:	e025      	b.n	800232e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e2:	4b66      	ldr	r3, [pc, #408]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a65      	ldr	r2, [pc, #404]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b63      	ldr	r3, [pc, #396]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	4960      	ldr	r1, [pc, #384]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002300:	4b5e      	ldr	r3, [pc, #376]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	495b      	ldr	r1, [pc, #364]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002310:	4313      	orrs	r3, r2
 8002312:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fd4c 	bl	8002dbc <RCC_SetFlashLatencyFromMSIRange>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e37a      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800232e:	f000 fc81 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002332:	4602      	mov	r2, r0
 8002334:	4b51      	ldr	r3, [pc, #324]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	4950      	ldr	r1, [pc, #320]	@ (8002480 <HAL_RCC_OscConfig+0x274>)
 8002340:	5ccb      	ldrb	r3, [r1, r3]
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	4a4e      	ldr	r2, [pc, #312]	@ (8002484 <HAL_RCC_OscConfig+0x278>)
 800234c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800234e:	4b4e      	ldr	r3, [pc, #312]	@ (8002488 <HAL_RCC_OscConfig+0x27c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fb3c 	bl	80019d0 <HAL_InitTick>
 8002358:	4603      	mov	r3, r0
 800235a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d052      	beq.n	8002408 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	e35e      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d032      	beq.n	80023d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800236e:	4b43      	ldr	r3, [pc, #268]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a42      	ldr	r2, [pc, #264]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800237a:	f7ff fb79 	bl	8001a70 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002382:	f7ff fb75 	bl	8001a70 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e347      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002394:	4b39      	ldr	r3, [pc, #228]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a0:	4b36      	ldr	r3, [pc, #216]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a35      	ldr	r2, [pc, #212]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80023a6:	f043 0308 	orr.w	r3, r3, #8
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b33      	ldr	r3, [pc, #204]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4930      	ldr	r1, [pc, #192]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023be:	4b2f      	ldr	r3, [pc, #188]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	492b      	ldr	r1, [pc, #172]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]
 80023d2:	e01a      	b.n	800240a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023d4:	4b29      	ldr	r3, [pc, #164]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a28      	ldr	r2, [pc, #160]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023e0:	f7ff fb46 	bl	8001a70 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023e8:	f7ff fb42 	bl	8001a70 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e314      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023fa:	4b20      	ldr	r3, [pc, #128]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x1dc>
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002408:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d073      	beq.n	80024fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2b08      	cmp	r3, #8
 800241a:	d005      	beq.n	8002428 <HAL_RCC_OscConfig+0x21c>
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2b0c      	cmp	r3, #12
 8002420:	d10e      	bne.n	8002440 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d10b      	bne.n	8002440 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002428:	4b14      	ldr	r3, [pc, #80]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d063      	beq.n	80024fc <HAL_RCC_OscConfig+0x2f0>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d15f      	bne.n	80024fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e2f1      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002448:	d106      	bne.n	8002458 <HAL_RCC_OscConfig+0x24c>
 800244a:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a0b      	ldr	r2, [pc, #44]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e025      	b.n	80024a4 <HAL_RCC_OscConfig+0x298>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002460:	d114      	bne.n	800248c <HAL_RCC_OscConfig+0x280>
 8002462:	4b06      	ldr	r3, [pc, #24]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a05      	ldr	r2, [pc, #20]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b03      	ldr	r3, [pc, #12]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a02      	ldr	r2, [pc, #8]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e013      	b.n	80024a4 <HAL_RCC_OscConfig+0x298>
 800247c:	40021000 	.word	0x40021000
 8002480:	0800890c 	.word	0x0800890c
 8002484:	20000004 	.word	0x20000004
 8002488:	20000008 	.word	0x20000008
 800248c:	4ba0      	ldr	r3, [pc, #640]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a9f      	ldr	r2, [pc, #636]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b9d      	ldr	r3, [pc, #628]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a9c      	ldr	r2, [pc, #624]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 800249e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d013      	beq.n	80024d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7ff fae0 	bl	8001a70 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b4:	f7ff fadc 	bl	8001a70 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	@ 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e2ae      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024c6:	4b92      	ldr	r3, [pc, #584]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0x2a8>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7ff facc 	bl	8001a70 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024dc:	f7ff fac8 	bl	8001a70 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	@ 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e29a      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ee:	4b88      	ldr	r3, [pc, #544]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x2d0>
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d060      	beq.n	80025cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d005      	beq.n	800251c <HAL_RCC_OscConfig+0x310>
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d119      	bne.n	800254a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d116      	bne.n	800254a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800251c:	4b7c      	ldr	r3, [pc, #496]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_OscConfig+0x328>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e277      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002534:	4b76      	ldr	r3, [pc, #472]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	4973      	ldr	r1, [pc, #460]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002548:	e040      	b.n	80025cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d023      	beq.n	800259a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002552:	4b6f      	ldr	r3, [pc, #444]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6e      	ldr	r2, [pc, #440]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800255c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255e:	f7ff fa87 	bl	8001a70 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002566:	f7ff fa83 	bl	8001a70 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e255      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002578:	4b65      	ldr	r3, [pc, #404]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002584:	4b62      	ldr	r3, [pc, #392]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	061b      	lsls	r3, r3, #24
 8002592:	495f      	ldr	r1, [pc, #380]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
 8002598:	e018      	b.n	80025cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259a:	4b5d      	ldr	r3, [pc, #372]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a5c      	ldr	r2, [pc, #368]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80025a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7ff fa63 	bl	8001a70 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ae:	f7ff fa5f 	bl	8001a70 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e231      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c0:	4b53      	ldr	r3, [pc, #332]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d03c      	beq.n	8002652 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01c      	beq.n	800261a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80025e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7ff fa3e 	bl	8001a70 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f8:	f7ff fa3a 	bl	8001a70 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e20c      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800260a:	4b41      	ldr	r3, [pc, #260]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 800260c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ef      	beq.n	80025f8 <HAL_RCC_OscConfig+0x3ec>
 8002618:	e01b      	b.n	8002652 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261a:	4b3d      	ldr	r3, [pc, #244]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 800261c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002620:	4a3b      	ldr	r2, [pc, #236]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7ff fa21 	bl	8001a70 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002632:	f7ff fa1d 	bl	8001a70 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e1ef      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002644:	4b32      	ldr	r3, [pc, #200]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002646:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ef      	bne.n	8002632 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80a6 	beq.w	80027ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002660:	2300      	movs	r3, #0
 8002662:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002664:	4b2a      	ldr	r3, [pc, #168]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10d      	bne.n	800268c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002670:	4b27      	ldr	r3, [pc, #156]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002674:	4a26      	ldr	r2, [pc, #152]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800267a:	6593      	str	r3, [r2, #88]	@ 0x58
 800267c:	4b24      	ldr	r3, [pc, #144]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002688:	2301      	movs	r3, #1
 800268a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268c:	4b21      	ldr	r3, [pc, #132]	@ (8002714 <HAL_RCC_OscConfig+0x508>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d118      	bne.n	80026ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002698:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <HAL_RCC_OscConfig+0x508>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1d      	ldr	r2, [pc, #116]	@ (8002714 <HAL_RCC_OscConfig+0x508>)
 800269e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a4:	f7ff f9e4 	bl	8001a70 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ac:	f7ff f9e0 	bl	8001a70 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1b2      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026be:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <HAL_RCC_OscConfig+0x508>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d108      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4d8>
 80026d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026e2:	e029      	b.n	8002738 <HAL_RCC_OscConfig+0x52c>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b05      	cmp	r3, #5
 80026ea:	d115      	bne.n	8002718 <HAL_RCC_OscConfig+0x50c>
 80026ec:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f2:	4a07      	ldr	r2, [pc, #28]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026fc:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002702:	4a03      	ldr	r2, [pc, #12]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800270c:	e014      	b.n	8002738 <HAL_RCC_OscConfig+0x52c>
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	40007000 	.word	0x40007000
 8002718:	4b9a      	ldr	r3, [pc, #616]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271e:	4a99      	ldr	r2, [pc, #612]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002728:	4b96      	ldr	r3, [pc, #600]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272e:	4a95      	ldr	r2, [pc, #596]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 8002730:	f023 0304 	bic.w	r3, r3, #4
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d016      	beq.n	800276e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002740:	f7ff f996 	bl	8001a70 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002746:	e00a      	b.n	800275e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002748:	f7ff f992 	bl	8001a70 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e162      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800275e:	4b89      	ldr	r3, [pc, #548]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0ed      	beq.n	8002748 <HAL_RCC_OscConfig+0x53c>
 800276c:	e015      	b.n	800279a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276e:	f7ff f97f 	bl	8001a70 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7ff f97b 	bl	8001a70 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e14b      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800278c:	4b7d      	ldr	r3, [pc, #500]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1ed      	bne.n	8002776 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800279a:	7ffb      	ldrb	r3, [r7, #31]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a0:	4b78      	ldr	r3, [pc, #480]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a4:	4a77      	ldr	r2, [pc, #476]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 80027a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027aa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d03c      	beq.n	8002832 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01c      	beq.n	80027fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027c0:	4b70      	ldr	r3, [pc, #448]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 80027c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027c6:	4a6f      	ldr	r2, [pc, #444]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7ff f94e 	bl	8001a70 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027d8:	f7ff f94a 	bl	8001a70 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e11c      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027ea:	4b66      	ldr	r3, [pc, #408]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 80027ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0ef      	beq.n	80027d8 <HAL_RCC_OscConfig+0x5cc>
 80027f8:	e01b      	b.n	8002832 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027fa:	4b62      	ldr	r3, [pc, #392]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 80027fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002800:	4a60      	ldr	r2, [pc, #384]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 8002802:	f023 0301 	bic.w	r3, r3, #1
 8002806:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280a:	f7ff f931 	bl	8001a70 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002812:	f7ff f92d 	bl	8001a70 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0ff      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002824:	4b57      	ldr	r3, [pc, #348]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 8002826:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1ef      	bne.n	8002812 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 80f3 	beq.w	8002a22 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002840:	2b02      	cmp	r3, #2
 8002842:	f040 80c9 	bne.w	80029d8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002846:	4b4f      	ldr	r3, [pc, #316]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f003 0203 	and.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002856:	429a      	cmp	r2, r3
 8002858:	d12c      	bne.n	80028b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002864:	3b01      	subs	r3, #1
 8002866:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002868:	429a      	cmp	r2, r3
 800286a:	d123      	bne.n	80028b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002876:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d11b      	bne.n	80028b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002886:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d113      	bne.n	80028b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002896:	085b      	lsrs	r3, r3, #1
 8002898:	3b01      	subs	r3, #1
 800289a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d109      	bne.n	80028b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	085b      	lsrs	r3, r3, #1
 80028ac:	3b01      	subs	r3, #1
 80028ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d06b      	beq.n	800298c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b0c      	cmp	r3, #12
 80028b8:	d062      	beq.n	8002980 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028ba:	4b32      	ldr	r3, [pc, #200]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e0ac      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 80028d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028d6:	f7ff f8cb 	bl	8001a70 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028de:	f7ff f8c7 	bl	8001a70 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e099      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f0:	4b24      	ldr	r3, [pc, #144]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f0      	bne.n	80028de <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028fc:	4b21      	ldr	r3, [pc, #132]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	4b21      	ldr	r3, [pc, #132]	@ (8002988 <HAL_RCC_OscConfig+0x77c>)
 8002902:	4013      	ands	r3, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800290c:	3a01      	subs	r2, #1
 800290e:	0112      	lsls	r2, r2, #4
 8002910:	4311      	orrs	r1, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002916:	0212      	lsls	r2, r2, #8
 8002918:	4311      	orrs	r1, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800291e:	0852      	lsrs	r2, r2, #1
 8002920:	3a01      	subs	r2, #1
 8002922:	0552      	lsls	r2, r2, #21
 8002924:	4311      	orrs	r1, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800292a:	0852      	lsrs	r2, r2, #1
 800292c:	3a01      	subs	r2, #1
 800292e:	0652      	lsls	r2, r2, #25
 8002930:	4311      	orrs	r1, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002936:	06d2      	lsls	r2, r2, #27
 8002938:	430a      	orrs	r2, r1
 800293a:	4912      	ldr	r1, [pc, #72]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 800293c:	4313      	orrs	r3, r2
 800293e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002940:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0f      	ldr	r2, [pc, #60]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 8002946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800294a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800294c:	4b0d      	ldr	r3, [pc, #52]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a0c      	ldr	r2, [pc, #48]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 8002952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002956:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002958:	f7ff f88a 	bl	8001a70 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7ff f886 	bl	8001a70 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e058      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002972:	4b04      	ldr	r3, [pc, #16]	@ (8002984 <HAL_RCC_OscConfig+0x778>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800297e:	e050      	b.n	8002a22 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e04f      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
 8002984:	40021000 	.word	0x40021000
 8002988:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298c:	4b27      	ldr	r3, [pc, #156]	@ (8002a2c <HAL_RCC_OscConfig+0x820>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d144      	bne.n	8002a22 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002998:	4b24      	ldr	r3, [pc, #144]	@ (8002a2c <HAL_RCC_OscConfig+0x820>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a23      	ldr	r2, [pc, #140]	@ (8002a2c <HAL_RCC_OscConfig+0x820>)
 800299e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029a4:	4b21      	ldr	r3, [pc, #132]	@ (8002a2c <HAL_RCC_OscConfig+0x820>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4a20      	ldr	r2, [pc, #128]	@ (8002a2c <HAL_RCC_OscConfig+0x820>)
 80029aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029b0:	f7ff f85e 	bl	8001a70 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b8:	f7ff f85a 	bl	8001a70 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e02c      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ca:	4b18      	ldr	r3, [pc, #96]	@ (8002a2c <HAL_RCC_OscConfig+0x820>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x7ac>
 80029d6:	e024      	b.n	8002a22 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b0c      	cmp	r3, #12
 80029dc:	d01f      	beq.n	8002a1e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029de:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <HAL_RCC_OscConfig+0x820>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a12      	ldr	r2, [pc, #72]	@ (8002a2c <HAL_RCC_OscConfig+0x820>)
 80029e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7ff f841 	bl	8001a70 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f2:	f7ff f83d 	bl	8001a70 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e00f      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a04:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <HAL_RCC_OscConfig+0x820>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f0      	bne.n	80029f2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002a10:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <HAL_RCC_OscConfig+0x820>)
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	4905      	ldr	r1, [pc, #20]	@ (8002a2c <HAL_RCC_OscConfig+0x820>)
 8002a16:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <HAL_RCC_OscConfig+0x824>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60cb      	str	r3, [r1, #12]
 8002a1c:	e001      	b.n	8002a22 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	feeefffc 	.word	0xfeeefffc

08002a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0e7      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a48:	4b75      	ldr	r3, [pc, #468]	@ (8002c20 <HAL_RCC_ClockConfig+0x1ec>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d910      	bls.n	8002a78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b72      	ldr	r3, [pc, #456]	@ (8002c20 <HAL_RCC_ClockConfig+0x1ec>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 0207 	bic.w	r2, r3, #7
 8002a5e:	4970      	ldr	r1, [pc, #448]	@ (8002c20 <HAL_RCC_ClockConfig+0x1ec>)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b6e      	ldr	r3, [pc, #440]	@ (8002c20 <HAL_RCC_ClockConfig+0x1ec>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0cf      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d010      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	4b66      	ldr	r3, [pc, #408]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d908      	bls.n	8002aa6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a94:	4b63      	ldr	r3, [pc, #396]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4960      	ldr	r1, [pc, #384]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d04c      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aba:	4b5a      	ldr	r3, [pc, #360]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d121      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e0a6      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ad2:	4b54      	ldr	r3, [pc, #336]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d115      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e09a      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aea:	4b4e      	ldr	r3, [pc, #312]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e08e      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002afa:	4b4a      	ldr	r3, [pc, #296]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e086      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b0a:	4b46      	ldr	r3, [pc, #280]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f023 0203 	bic.w	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4943      	ldr	r1, [pc, #268]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b1c:	f7fe ffa8 	bl	8001a70 <HAL_GetTick>
 8002b20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b24:	f7fe ffa4 	bl	8001a70 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e06e      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 020c 	and.w	r2, r3, #12
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d1eb      	bne.n	8002b24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d010      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	4b31      	ldr	r3, [pc, #196]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d208      	bcs.n	8002b7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b68:	4b2e      	ldr	r3, [pc, #184]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	492b      	ldr	r1, [pc, #172]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b7a:	4b29      	ldr	r3, [pc, #164]	@ (8002c20 <HAL_RCC_ClockConfig+0x1ec>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d210      	bcs.n	8002baa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b88:	4b25      	ldr	r3, [pc, #148]	@ (8002c20 <HAL_RCC_ClockConfig+0x1ec>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 0207 	bic.w	r2, r3, #7
 8002b90:	4923      	ldr	r1, [pc, #140]	@ (8002c20 <HAL_RCC_ClockConfig+0x1ec>)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b98:	4b21      	ldr	r3, [pc, #132]	@ (8002c20 <HAL_RCC_ClockConfig+0x1ec>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d001      	beq.n	8002baa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e036      	b.n	8002c18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	4918      	ldr	r1, [pc, #96]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d009      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bd4:	4b13      	ldr	r3, [pc, #76]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4910      	ldr	r1, [pc, #64]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002be8:	f000 f824 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	490b      	ldr	r1, [pc, #44]	@ (8002c28 <HAL_RCC_ClockConfig+0x1f4>)
 8002bfa:	5ccb      	ldrb	r3, [r1, r3]
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
 8002c04:	4a09      	ldr	r2, [pc, #36]	@ (8002c2c <HAL_RCC_ClockConfig+0x1f8>)
 8002c06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c08:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <HAL_RCC_ClockConfig+0x1fc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe fedf 	bl	80019d0 <HAL_InitTick>
 8002c12:	4603      	mov	r3, r0
 8002c14:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c16:	7afb      	ldrb	r3, [r7, #11]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40022000 	.word	0x40022000
 8002c24:	40021000 	.word	0x40021000
 8002c28:	0800890c 	.word	0x0800890c
 8002c2c:	20000004 	.word	0x20000004
 8002c30:	20000008 	.word	0x20000008

08002c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b089      	sub	sp, #36	@ 0x24
 8002c38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c42:	4b3e      	ldr	r3, [pc, #248]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x34>
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	d121      	bne.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d11e      	bne.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c68:	4b34      	ldr	r3, [pc, #208]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d107      	bne.n	8002c84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c74:	4b31      	ldr	r3, [pc, #196]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c7a:	0a1b      	lsrs	r3, r3, #8
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	e005      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c84:	4b2d      	ldr	r3, [pc, #180]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c90:	4a2b      	ldr	r2, [pc, #172]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10d      	bne.n	8002cbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d102      	bne.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cac:	4b25      	ldr	r3, [pc, #148]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cae:	61bb      	str	r3, [r7, #24]
 8002cb0:	e004      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cb8:	4b23      	ldr	r3, [pc, #140]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d134      	bne.n	8002d2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d003      	beq.n	8002cda <HAL_RCC_GetSysClockFreq+0xa6>
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d003      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xac>
 8002cd8:	e005      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cda:	4b1a      	ldr	r3, [pc, #104]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cdc:	617b      	str	r3, [r7, #20]
      break;
 8002cde:	e005      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ce0:	4b19      	ldr	r3, [pc, #100]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ce2:	617b      	str	r3, [r7, #20]
      break;
 8002ce4:	e002      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	617b      	str	r3, [r7, #20]
      break;
 8002cea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cec:	4b13      	ldr	r3, [pc, #76]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cfa:	4b10      	ldr	r3, [pc, #64]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	fb03 f202 	mul.w	r2, r3, r2
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d12:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	0e5b      	lsrs	r3, r3, #25
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d2c:	69bb      	ldr	r3, [r7, #24]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3724      	adds	r7, #36	@ 0x24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	08008924 	.word	0x08008924
 8002d44:	00f42400 	.word	0x00f42400
 8002d48:	02dc6c00 	.word	0x02dc6c00

08002d4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d50:	4b03      	ldr	r3, [pc, #12]	@ (8002d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000004 	.word	0x20000004

08002d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d68:	f7ff fff0 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	0a1b      	lsrs	r3, r3, #8
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	4904      	ldr	r1, [pc, #16]	@ (8002d8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	0800891c 	.word	0x0800891c

08002d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d94:	f7ff ffda 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	0adb      	lsrs	r3, r3, #11
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	4904      	ldr	r1, [pc, #16]	@ (8002db8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002da6:	5ccb      	ldrb	r3, [r1, r3]
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40021000 	.word	0x40021000
 8002db8:	0800891c 	.word	0x0800891c

08002dbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dd4:	f7ff f9b6 	bl	8002144 <HAL_PWREx_GetVoltageRange>
 8002dd8:	6178      	str	r0, [r7, #20]
 8002dda:	e014      	b.n	8002e06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ddc:	4b25      	ldr	r3, [pc, #148]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de0:	4a24      	ldr	r2, [pc, #144]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002de8:	4b22      	ldr	r3, [pc, #136]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002df4:	f7ff f9a6 	bl	8002144 <HAL_PWREx_GetVoltageRange>
 8002df8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e0c:	d10b      	bne.n	8002e26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b80      	cmp	r3, #128	@ 0x80
 8002e12:	d919      	bls.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e18:	d902      	bls.n	8002e20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	e013      	b.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e20:	2301      	movs	r3, #1
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	e010      	b.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b80      	cmp	r3, #128	@ 0x80
 8002e2a:	d902      	bls.n	8002e32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	e00a      	b.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b80      	cmp	r3, #128	@ 0x80
 8002e36:	d102      	bne.n	8002e3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e38:	2302      	movs	r3, #2
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	e004      	b.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b70      	cmp	r3, #112	@ 0x70
 8002e42:	d101      	bne.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e44:	2301      	movs	r3, #1
 8002e46:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e48:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 0207 	bic.w	r2, r3, #7
 8002e50:	4909      	ldr	r1, [pc, #36]	@ (8002e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e58:	4b07      	ldr	r3, [pc, #28]	@ (8002e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d001      	beq.n	8002e6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40022000 	.word	0x40022000

08002e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e84:	2300      	movs	r3, #0
 8002e86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e88:	2300      	movs	r3, #0
 8002e8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d031      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ea0:	d01a      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002ea2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ea6:	d814      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d009      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002eac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002eb0:	d10f      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	4a5c      	ldr	r2, [pc, #368]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ebc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ebe:	e00c      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f9f0 	bl	80032ac <RCCEx_PLLSAI1_Config>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ed0:	e003      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ed6:	e000      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002ed8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eda:	7cfb      	ldrb	r3, [r7, #19]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10b      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ee0:	4b51      	ldr	r3, [pc, #324]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	494e      	ldr	r1, [pc, #312]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ef6:	e001      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 809e 	beq.w	8003046 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f0e:	4b46      	ldr	r3, [pc, #280]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00d      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f24:	4b40      	ldr	r3, [pc, #256]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f28:	4a3f      	ldr	r2, [pc, #252]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f30:	4b3d      	ldr	r3, [pc, #244]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f40:	4b3a      	ldr	r3, [pc, #232]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a39      	ldr	r2, [pc, #228]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f4a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f4c:	f7fe fd90 	bl	8001a70 <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f52:	e009      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f54:	f7fe fd8c 	bl	8001a70 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d902      	bls.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	74fb      	strb	r3, [r7, #19]
        break;
 8002f66:	e005      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f68:	4b30      	ldr	r3, [pc, #192]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ef      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002f74:	7cfb      	ldrb	r3, [r7, #19]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d15a      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f84:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d01e      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d019      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f96:	4b24      	ldr	r3, [pc, #144]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fa0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fa2:	4b21      	ldr	r3, [pc, #132]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa8:	4a1f      	ldr	r2, [pc, #124]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fc2:	4a19      	ldr	r2, [pc, #100]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d016      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fd4c 	bl	8001a70 <HAL_GetTick>
 8002fd8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fda:	e00b      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7fe fd48 	bl	8001a70 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d902      	bls.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	74fb      	strb	r3, [r7, #19]
            break;
 8002ff2:	e006      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0ec      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003002:	7cfb      	ldrb	r3, [r7, #19]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10b      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003008:	4b07      	ldr	r3, [pc, #28]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003016:	4904      	ldr	r1, [pc, #16]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800301e:	e009      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003020:	7cfb      	ldrb	r3, [r7, #19]
 8003022:	74bb      	strb	r3, [r7, #18]
 8003024:	e006      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003026:	bf00      	nop
 8003028:	40021000 	.word	0x40021000
 800302c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003034:	7c7b      	ldrb	r3, [r7, #17]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d105      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303a:	4b9b      	ldr	r3, [pc, #620]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800303c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303e:	4a9a      	ldr	r2, [pc, #616]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003040:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003044:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003052:	4b95      	ldr	r3, [pc, #596]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003058:	f023 0203 	bic.w	r2, r3, #3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4991      	ldr	r1, [pc, #580]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003074:	4b8c      	ldr	r3, [pc, #560]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307a:	f023 020c 	bic.w	r2, r3, #12
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003082:	4989      	ldr	r1, [pc, #548]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003096:	4b84      	ldr	r3, [pc, #528]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a4:	4980      	ldr	r1, [pc, #512]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030b8:	4b7b      	ldr	r3, [pc, #492]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c6:	4978      	ldr	r1, [pc, #480]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030da:	4b73      	ldr	r3, [pc, #460]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e8:	496f      	ldr	r1, [pc, #444]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030fc:	4b6a      	ldr	r3, [pc, #424]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80030fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003102:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	4967      	ldr	r1, [pc, #412]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800311e:	4b62      	ldr	r3, [pc, #392]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003124:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312c:	495e      	ldr	r1, [pc, #376]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003140:	4b59      	ldr	r3, [pc, #356]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003146:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800314e:	4956      	ldr	r1, [pc, #344]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003162:	4b51      	ldr	r3, [pc, #324]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003168:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003170:	494d      	ldr	r1, [pc, #308]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d028      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003184:	4b48      	ldr	r3, [pc, #288]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003192:	4945      	ldr	r1, [pc, #276]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800319e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031a2:	d106      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031a4:	4b40      	ldr	r3, [pc, #256]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4a3f      	ldr	r2, [pc, #252]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80031aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031ae:	60d3      	str	r3, [r2, #12]
 80031b0:	e011      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031ba:	d10c      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3304      	adds	r3, #4
 80031c0:	2101      	movs	r1, #1
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 f872 	bl	80032ac <RCCEx_PLLSAI1_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031cc:	7cfb      	ldrb	r3, [r7, #19]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80031d2:	7cfb      	ldrb	r3, [r7, #19]
 80031d4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d028      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031e2:	4b31      	ldr	r3, [pc, #196]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f0:	492d      	ldr	r1, [pc, #180]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003200:	d106      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003202:	4b29      	ldr	r3, [pc, #164]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	4a28      	ldr	r2, [pc, #160]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003208:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800320c:	60d3      	str	r3, [r2, #12]
 800320e:	e011      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003214:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003218:	d10c      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3304      	adds	r3, #4
 800321e:	2101      	movs	r1, #1
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f843 	bl	80032ac <RCCEx_PLLSAI1_Config>
 8003226:	4603      	mov	r3, r0
 8003228:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800322a:	7cfb      	ldrb	r3, [r7, #19]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003230:	7cfb      	ldrb	r3, [r7, #19]
 8003232:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01c      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003240:	4b19      	ldr	r3, [pc, #100]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003246:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800324e:	4916      	ldr	r1, [pc, #88]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800325a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800325e:	d10c      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3304      	adds	r3, #4
 8003264:	2102      	movs	r1, #2
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f820 	bl	80032ac <RCCEx_PLLSAI1_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003270:	7cfb      	ldrb	r3, [r7, #19]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8003276:	7cfb      	ldrb	r3, [r7, #19]
 8003278:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003286:	4b08      	ldr	r3, [pc, #32]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003294:	4904      	ldr	r1, [pc, #16]	@ (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800329c:	7cbb      	ldrb	r3, [r7, #18]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000

080032ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032ba:	4b74      	ldr	r3, [pc, #464]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d018      	beq.n	80032f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032c6:	4b71      	ldr	r3, [pc, #452]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 0203 	and.w	r2, r3, #3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d10d      	bne.n	80032f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
       ||
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d009      	beq.n	80032f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032de:	4b6b      	ldr	r3, [pc, #428]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
       ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d047      	beq.n	8003382 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
 80032f6:	e044      	b.n	8003382 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d018      	beq.n	8003332 <RCCEx_PLLSAI1_Config+0x86>
 8003300:	2b03      	cmp	r3, #3
 8003302:	d825      	bhi.n	8003350 <RCCEx_PLLSAI1_Config+0xa4>
 8003304:	2b01      	cmp	r3, #1
 8003306:	d002      	beq.n	800330e <RCCEx_PLLSAI1_Config+0x62>
 8003308:	2b02      	cmp	r3, #2
 800330a:	d009      	beq.n	8003320 <RCCEx_PLLSAI1_Config+0x74>
 800330c:	e020      	b.n	8003350 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800330e:	4b5f      	ldr	r3, [pc, #380]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d11d      	bne.n	8003356 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800331e:	e01a      	b.n	8003356 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003320:	4b5a      	ldr	r3, [pc, #360]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003328:	2b00      	cmp	r3, #0
 800332a:	d116      	bne.n	800335a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003330:	e013      	b.n	800335a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003332:	4b56      	ldr	r3, [pc, #344]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10f      	bne.n	800335e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800333e:	4b53      	ldr	r3, [pc, #332]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800334e:	e006      	b.n	800335e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
      break;
 8003354:	e004      	b.n	8003360 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003356:	bf00      	nop
 8003358:	e002      	b.n	8003360 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800335a:	bf00      	nop
 800335c:	e000      	b.n	8003360 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800335e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10d      	bne.n	8003382 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003366:	4b49      	ldr	r3, [pc, #292]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6819      	ldr	r1, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	3b01      	subs	r3, #1
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	430b      	orrs	r3, r1
 800337c:	4943      	ldr	r1, [pc, #268]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 800337e:	4313      	orrs	r3, r2
 8003380:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d17c      	bne.n	8003482 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003388:	4b40      	ldr	r3, [pc, #256]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a3f      	ldr	r2, [pc, #252]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 800338e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003394:	f7fe fb6c 	bl	8001a70 <HAL_GetTick>
 8003398:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800339a:	e009      	b.n	80033b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800339c:	f7fe fb68 	bl	8001a70 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d902      	bls.n	80033b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	73fb      	strb	r3, [r7, #15]
        break;
 80033ae:	e005      	b.n	80033bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033b0:	4b36      	ldr	r3, [pc, #216]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1ef      	bne.n	800339c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d15f      	bne.n	8003482 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d110      	bne.n	80033ea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033c8:	4b30      	ldr	r3, [pc, #192]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80033d0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6892      	ldr	r2, [r2, #8]
 80033d8:	0211      	lsls	r1, r2, #8
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68d2      	ldr	r2, [r2, #12]
 80033de:	06d2      	lsls	r2, r2, #27
 80033e0:	430a      	orrs	r2, r1
 80033e2:	492a      	ldr	r1, [pc, #168]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	610b      	str	r3, [r1, #16]
 80033e8:	e027      	b.n	800343a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d112      	bne.n	8003416 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033f0:	4b26      	ldr	r3, [pc, #152]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80033f8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6892      	ldr	r2, [r2, #8]
 8003400:	0211      	lsls	r1, r2, #8
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6912      	ldr	r2, [r2, #16]
 8003406:	0852      	lsrs	r2, r2, #1
 8003408:	3a01      	subs	r2, #1
 800340a:	0552      	lsls	r2, r2, #21
 800340c:	430a      	orrs	r2, r1
 800340e:	491f      	ldr	r1, [pc, #124]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003410:	4313      	orrs	r3, r2
 8003412:	610b      	str	r3, [r1, #16]
 8003414:	e011      	b.n	800343a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003416:	4b1d      	ldr	r3, [pc, #116]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800341e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	6892      	ldr	r2, [r2, #8]
 8003426:	0211      	lsls	r1, r2, #8
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6952      	ldr	r2, [r2, #20]
 800342c:	0852      	lsrs	r2, r2, #1
 800342e:	3a01      	subs	r2, #1
 8003430:	0652      	lsls	r2, r2, #25
 8003432:	430a      	orrs	r2, r1
 8003434:	4915      	ldr	r1, [pc, #84]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003436:	4313      	orrs	r3, r2
 8003438:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800343a:	4b14      	ldr	r3, [pc, #80]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a13      	ldr	r2, [pc, #76]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003440:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003444:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003446:	f7fe fb13 	bl	8001a70 <HAL_GetTick>
 800344a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800344c:	e009      	b.n	8003462 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800344e:	f7fe fb0f 	bl	8001a70 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d902      	bls.n	8003462 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	73fb      	strb	r3, [r7, #15]
          break;
 8003460:	e005      	b.n	800346e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003462:	4b0a      	ldr	r3, [pc, #40]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0ef      	beq.n	800344e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d106      	bne.n	8003482 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003474:	4b05      	ldr	r3, [pc, #20]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	4903      	ldr	r1, [pc, #12]	@ (800348c <RCCEx_PLLSAI1_Config+0x1e0>)
 800347e:	4313      	orrs	r3, r2
 8003480:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003482:	7bfb      	ldrb	r3, [r7, #15]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000

08003490 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e095      	b.n	80035ce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d108      	bne.n	80034bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034b2:	d009      	beq.n	80034c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	61da      	str	r2, [r3, #28]
 80034ba:	e005      	b.n	80034c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fd ff06 	bl	80012f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003508:	d902      	bls.n	8003510 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	e002      	b.n	8003516 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003510:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003514:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800351e:	d007      	beq.n	8003530 <HAL_SPI_Init+0xa0>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003528:	d002      	beq.n	8003530 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003568:	431a      	orrs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003572:	ea42 0103 	orr.w	r1, r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	0c1b      	lsrs	r3, r3, #16
 800358c:	f003 0204 	and.w	r2, r3, #4
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80035ac:	ea42 0103 	orr.w	r1, r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b088      	sub	sp, #32
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	603b      	str	r3, [r7, #0]
 80035e2:	4613      	mov	r3, r2
 80035e4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035e6:	f7fe fa43 	bl	8001a70 <HAL_GetTick>
 80035ea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d001      	beq.n	8003600 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80035fc:	2302      	movs	r3, #2
 80035fe:	e15c      	b.n	80038ba <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <HAL_SPI_Transmit+0x36>
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e154      	b.n	80038ba <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_SPI_Transmit+0x48>
 800361a:	2302      	movs	r3, #2
 800361c:	e14d      	b.n	80038ba <HAL_SPI_Transmit+0x2e4>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2203      	movs	r2, #3
 800362a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	88fa      	ldrh	r2, [r7, #6]
 800363e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	88fa      	ldrh	r2, [r7, #6]
 8003644:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003670:	d10f      	bne.n	8003692 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003680:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003690:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369c:	2b40      	cmp	r3, #64	@ 0x40
 800369e:	d007      	beq.n	80036b0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036b8:	d952      	bls.n	8003760 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_SPI_Transmit+0xf2>
 80036c2:	8b7b      	ldrh	r3, [r7, #26]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d145      	bne.n	8003754 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036cc:	881a      	ldrh	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d8:	1c9a      	adds	r2, r3, #2
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036ec:	e032      	b.n	8003754 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d112      	bne.n	8003722 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003700:	881a      	ldrh	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370c:	1c9a      	adds	r2, r3, #2
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003716:	b29b      	uxth	r3, r3
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003720:	e018      	b.n	8003754 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003722:	f7fe f9a5 	bl	8001a70 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d803      	bhi.n	800373a <HAL_SPI_Transmit+0x164>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003738:	d102      	bne.n	8003740 <HAL_SPI_Transmit+0x16a>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d109      	bne.n	8003754 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e0b2      	b.n	80038ba <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1c7      	bne.n	80036ee <HAL_SPI_Transmit+0x118>
 800375e:	e083      	b.n	8003868 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <HAL_SPI_Transmit+0x198>
 8003768:	8b7b      	ldrh	r3, [r7, #26]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d177      	bne.n	800385e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b01      	cmp	r3, #1
 8003776:	d912      	bls.n	800379e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800377c:	881a      	ldrh	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003788:	1c9a      	adds	r2, r3, #2
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b02      	subs	r3, #2
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800379c:	e05f      	b.n	800385e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	330c      	adds	r3, #12
 80037a8:	7812      	ldrb	r2, [r2, #0]
 80037aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80037c4:	e04b      	b.n	800385e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d12b      	bne.n	800382c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d912      	bls.n	8003804 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e2:	881a      	ldrh	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ee:	1c9a      	adds	r2, r3, #2
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b02      	subs	r3, #2
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003802:	e02c      	b.n	800385e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	330c      	adds	r3, #12
 800380e:	7812      	ldrb	r2, [r2, #0]
 8003810:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800382a:	e018      	b.n	800385e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800382c:	f7fe f920 	bl	8001a70 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d803      	bhi.n	8003844 <HAL_SPI_Transmit+0x26e>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003842:	d102      	bne.n	800384a <HAL_SPI_Transmit+0x274>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e02d      	b.n	80038ba <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1ae      	bne.n	80037c6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	6839      	ldr	r1, [r7, #0]
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fb65 	bl	8003f3c <SPI_EndRxTxTransaction>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10a      	bne.n	800389c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80038b8:	2300      	movs	r3, #0
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3720      	adds	r7, #32
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b08a      	sub	sp, #40	@ 0x28
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	607a      	str	r2, [r7, #4]
 80038ce:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038d0:	2301      	movs	r3, #1
 80038d2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038d4:	f7fe f8cc 	bl	8001a70 <HAL_GetTick>
 80038d8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038e0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80038e8:	887b      	ldrh	r3, [r7, #2]
 80038ea:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80038ec:	887b      	ldrh	r3, [r7, #2]
 80038ee:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038f0:	7ffb      	ldrb	r3, [r7, #31]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d00c      	beq.n	8003910 <HAL_SPI_TransmitReceive+0x4e>
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038fc:	d106      	bne.n	800390c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <HAL_SPI_TransmitReceive+0x4a>
 8003906:	7ffb      	ldrb	r3, [r7, #31]
 8003908:	2b04      	cmp	r3, #4
 800390a:	d001      	beq.n	8003910 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800390c:	2302      	movs	r3, #2
 800390e:	e1f3      	b.n	8003cf8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <HAL_SPI_TransmitReceive+0x60>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_SPI_TransmitReceive+0x60>
 800391c:	887b      	ldrh	r3, [r7, #2]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e1e8      	b.n	8003cf8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_SPI_TransmitReceive+0x72>
 8003930:	2302      	movs	r3, #2
 8003932:	e1e1      	b.n	8003cf8 <HAL_SPI_TransmitReceive+0x436>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b04      	cmp	r3, #4
 8003946:	d003      	beq.n	8003950 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2205      	movs	r2, #5
 800394c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	887a      	ldrh	r2, [r7, #2]
 8003960:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	887a      	ldrh	r2, [r7, #2]
 8003968:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	887a      	ldrh	r2, [r7, #2]
 8003976:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	887a      	ldrh	r2, [r7, #2]
 800397c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003992:	d802      	bhi.n	800399a <HAL_SPI_TransmitReceive+0xd8>
 8003994:	8abb      	ldrh	r3, [r7, #20]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d908      	bls.n	80039ac <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	e007      	b.n	80039bc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039ba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c6:	2b40      	cmp	r3, #64	@ 0x40
 80039c8:	d007      	beq.n	80039da <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039e2:	f240 8083 	bls.w	8003aec <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_SPI_TransmitReceive+0x132>
 80039ee:	8afb      	ldrh	r3, [r7, #22]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d16f      	bne.n	8003ad4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f8:	881a      	ldrh	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a04:	1c9a      	adds	r2, r3, #2
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a18:	e05c      	b.n	8003ad4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d11b      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x19e>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d016      	beq.n	8003a60 <HAL_SPI_TransmitReceive+0x19e>
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d113      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3c:	881a      	ldrh	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a48:	1c9a      	adds	r2, r3, #2
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d11c      	bne.n	8003aa8 <HAL_SPI_TransmitReceive+0x1e6>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d016      	beq.n	8003aa8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	b292      	uxth	r2, r2
 8003a86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8c:	1c9a      	adds	r2, r3, #2
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003aa8:	f7fd ffe2 	bl	8001a70 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d80d      	bhi.n	8003ad4 <HAL_SPI_TransmitReceive+0x212>
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abe:	d009      	beq.n	8003ad4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e111      	b.n	8003cf8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d19d      	bne.n	8003a1a <HAL_SPI_TransmitReceive+0x158>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d197      	bne.n	8003a1a <HAL_SPI_TransmitReceive+0x158>
 8003aea:	e0e5      	b.n	8003cb8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_SPI_TransmitReceive+0x23a>
 8003af4:	8afb      	ldrh	r3, [r7, #22]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	f040 80d1 	bne.w	8003c9e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d912      	bls.n	8003b2c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0a:	881a      	ldrh	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b16:	1c9a      	adds	r2, r3, #2
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b02      	subs	r3, #2
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b2a:	e0b8      	b.n	8003c9e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	330c      	adds	r3, #12
 8003b36:	7812      	ldrb	r2, [r2, #0]
 8003b38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b52:	e0a4      	b.n	8003c9e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d134      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x30a>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d02f      	beq.n	8003bcc <HAL_SPI_TransmitReceive+0x30a>
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d12c      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d912      	bls.n	8003ba2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b80:	881a      	ldrh	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8c:	1c9a      	adds	r2, r3, #2
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b02      	subs	r3, #2
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ba0:	e012      	b.n	8003bc8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	330c      	adds	r3, #12
 8003bac:	7812      	ldrb	r2, [r2, #0]
 8003bae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d148      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x3aa>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d042      	beq.n	8003c6c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d923      	bls.n	8003c3a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfc:	b292      	uxth	r2, r2
 8003bfe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c04:	1c9a      	adds	r2, r3, #2
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b02      	subs	r3, #2
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d81f      	bhi.n	8003c68 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c36:	605a      	str	r2, [r3, #4]
 8003c38:	e016      	b.n	8003c68 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f103 020c 	add.w	r2, r3, #12
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	7812      	ldrb	r2, [r2, #0]
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c6c:	f7fd ff00 	bl	8001a70 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d803      	bhi.n	8003c84 <HAL_SPI_TransmitReceive+0x3c2>
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	d102      	bne.n	8003c8a <HAL_SPI_TransmitReceive+0x3c8>
 8003c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e02c      	b.n	8003cf8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f47f af55 	bne.w	8003b54 <HAL_SPI_TransmitReceive+0x292>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f47f af4e 	bne.w	8003b54 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cb8:	6a3a      	ldr	r2, [r7, #32]
 8003cba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f93d 	bl	8003f3c <SPI_EndRxTxTransaction>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e00e      	b.n	8003cf8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
  }
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3728      	adds	r7, #40	@ 0x28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d10:	f7fd feae 	bl	8001a70 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d20:	f7fd fea6 	bl	8001a70 <HAL_GetTick>
 8003d24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d26:	4b39      	ldr	r3, [pc, #228]	@ (8003e0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	015b      	lsls	r3, r3, #5
 8003d2c:	0d1b      	lsrs	r3, r3, #20
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	fb02 f303 	mul.w	r3, r2, r3
 8003d34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d36:	e054      	b.n	8003de2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3e:	d050      	beq.n	8003de2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d40:	f7fd fe96 	bl	8001a70 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d902      	bls.n	8003d56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d13d      	bne.n	8003dd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d6e:	d111      	bne.n	8003d94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d78:	d004      	beq.n	8003d84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d82:	d107      	bne.n	8003d94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d9c:	d10f      	bne.n	8003dbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e017      	b.n	8003e02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4013      	ands	r3, r2
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	bf0c      	ite	eq
 8003df2:	2301      	moveq	r3, #1
 8003df4:	2300      	movne	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d19b      	bne.n	8003d38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3720      	adds	r7, #32
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000004 	.word	0x20000004

08003e10 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	@ 0x28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e22:	f7fd fe25 	bl	8001a70 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	4413      	add	r3, r2
 8003e30:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003e32:	f7fd fe1d 	bl	8001a70 <HAL_GetTick>
 8003e36:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e40:	4b3d      	ldr	r3, [pc, #244]	@ (8003f38 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	00da      	lsls	r2, r3, #3
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	0d1b      	lsrs	r3, r3, #20
 8003e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e52:	fb02 f303 	mul.w	r3, r2, r3
 8003e56:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e58:	e060      	b.n	8003f1c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e60:	d107      	bne.n	8003e72 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d104      	bne.n	8003e72 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d050      	beq.n	8003f1c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e7a:	f7fd fdf9 	bl	8001a70 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d902      	bls.n	8003e90 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d13d      	bne.n	8003f0c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ea8:	d111      	bne.n	8003ece <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eb2:	d004      	beq.n	8003ebe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ebc:	d107      	bne.n	8003ece <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ecc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ed6:	d10f      	bne.n	8003ef8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ef6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e010      	b.n	8003f2e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4013      	ands	r3, r2
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d196      	bne.n	8003e5a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3728      	adds	r7, #40	@ 0x28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000004 	.word	0x20000004

08003f3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f7ff ff5b 	bl	8003e10 <SPI_WaitFifoStateUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f64:	f043 0220 	orr.w	r2, r3, #32
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e027      	b.n	8003fc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2200      	movs	r2, #0
 8003f78:	2180      	movs	r1, #128	@ 0x80
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f7ff fec0 	bl	8003d00 <SPI_WaitFlagStateUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d007      	beq.n	8003f96 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f8a:	f043 0220 	orr.w	r2, r3, #32
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e014      	b.n	8003fc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f7ff ff34 	bl	8003e10 <SPI_WaitFifoStateUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d007      	beq.n	8003fbe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb2:	f043 0220 	orr.w	r2, r3, #32
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e000      	b.n	8003fc0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e049      	b.n	800406e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fd fb44 	bl	800167c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f000 f9ba 	bl	8004380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b01      	cmp	r3, #1
 800408a:	d001      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e03b      	b.n	8004108 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a19      	ldr	r2, [pc, #100]	@ (8004114 <HAL_TIM_Base_Start_IT+0x9c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d009      	beq.n	80040c6 <HAL_TIM_Base_Start_IT+0x4e>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ba:	d004      	beq.n	80040c6 <HAL_TIM_Base_Start_IT+0x4e>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a15      	ldr	r2, [pc, #84]	@ (8004118 <HAL_TIM_Base_Start_IT+0xa0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d115      	bne.n	80040f2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	4b13      	ldr	r3, [pc, #76]	@ (800411c <HAL_TIM_Base_Start_IT+0xa4>)
 80040ce:	4013      	ands	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b06      	cmp	r3, #6
 80040d6:	d015      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x8c>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040de:	d011      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f0:	e008      	b.n	8004104 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 0201 	orr.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	e000      	b.n	8004106 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004104:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	40012c00 	.word	0x40012c00
 8004118:	40014000 	.word	0x40014000
 800411c:	00010007 	.word	0x00010007

08004120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d020      	beq.n	8004184 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01b      	beq.n	8004184 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0202 	mvn.w	r2, #2
 8004154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f8e9 	bl	8004342 <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f8db 	bl	800432e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f8ec 	bl	8004356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	d020      	beq.n	80041d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01b      	beq.n	80041d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0204 	mvn.w	r2, #4
 80041a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2202      	movs	r2, #2
 80041a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f8c3 	bl	8004342 <HAL_TIM_IC_CaptureCallback>
 80041bc:	e005      	b.n	80041ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f8b5 	bl	800432e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f8c6 	bl	8004356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d020      	beq.n	800421c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01b      	beq.n	800421c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0208 	mvn.w	r2, #8
 80041ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2204      	movs	r2, #4
 80041f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f89d 	bl	8004342 <HAL_TIM_IC_CaptureCallback>
 8004208:	e005      	b.n	8004216 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f88f 	bl	800432e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f8a0 	bl	8004356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	2b00      	cmp	r3, #0
 8004224:	d020      	beq.n	8004268 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01b      	beq.n	8004268 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f06f 0210 	mvn.w	r2, #16
 8004238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2208      	movs	r2, #8
 800423e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f877 	bl	8004342 <HAL_TIM_IC_CaptureCallback>
 8004254:	e005      	b.n	8004262 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f869 	bl	800432e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f87a 	bl	8004356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00c      	beq.n	800428c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d007      	beq.n	800428c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0201 	mvn.w	r2, #1
 8004284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fc fecc 	bl	8001024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004292:	2b00      	cmp	r3, #0
 8004294:	d104      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00c      	beq.n	80042ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d007      	beq.n	80042ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80042b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f943 	bl	8004540 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00c      	beq.n	80042de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d007      	beq.n	80042de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80042d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f93b 	bl	8004554 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00c      	beq.n	8004302 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d007      	beq.n	8004302 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f834 	bl	800436a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00c      	beq.n	8004326 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f06f 0220 	mvn.w	r2, #32
 800431e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f903 	bl	800452c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004326:	bf00      	nop
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
	...

08004380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a30      	ldr	r2, [pc, #192]	@ (8004454 <TIM_Base_SetConfig+0xd4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d003      	beq.n	80043a0 <TIM_Base_SetConfig+0x20>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800439e:	d108      	bne.n	80043b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a27      	ldr	r2, [pc, #156]	@ (8004454 <TIM_Base_SetConfig+0xd4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00b      	beq.n	80043d2 <TIM_Base_SetConfig+0x52>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043c0:	d007      	beq.n	80043d2 <TIM_Base_SetConfig+0x52>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a24      	ldr	r2, [pc, #144]	@ (8004458 <TIM_Base_SetConfig+0xd8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d003      	beq.n	80043d2 <TIM_Base_SetConfig+0x52>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a23      	ldr	r2, [pc, #140]	@ (800445c <TIM_Base_SetConfig+0xdc>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d108      	bne.n	80043e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a12      	ldr	r2, [pc, #72]	@ (8004454 <TIM_Base_SetConfig+0xd4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d007      	beq.n	8004420 <TIM_Base_SetConfig+0xa0>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a11      	ldr	r2, [pc, #68]	@ (8004458 <TIM_Base_SetConfig+0xd8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d003      	beq.n	8004420 <TIM_Base_SetConfig+0xa0>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a10      	ldr	r2, [pc, #64]	@ (800445c <TIM_Base_SetConfig+0xdc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d103      	bne.n	8004428 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b01      	cmp	r3, #1
 8004438:	d105      	bne.n	8004446 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f023 0201 	bic.w	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	611a      	str	r2, [r3, #16]
  }
}
 8004446:	bf00      	nop
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40012c00 	.word	0x40012c00
 8004458:	40014000 	.word	0x40014000
 800445c:	40014400 	.word	0x40014400

08004460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004474:	2302      	movs	r3, #2
 8004476:	e04f      	b.n	8004518 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a21      	ldr	r2, [pc, #132]	@ (8004524 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d108      	bne.n	80044b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80044a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a14      	ldr	r2, [pc, #80]	@ (8004524 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e0:	d004      	beq.n	80044ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a10      	ldr	r2, [pc, #64]	@ (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d10c      	bne.n	8004506 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	40012c00 	.word	0x40012c00
 8004528:	40014000 	.word	0x40014000

0800452c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e040      	b.n	80045fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fd f8fc 	bl	8001788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2224      	movs	r2, #36	@ 0x24
 8004594:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0201 	bic.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fe06 	bl	80051c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 fba9 	bl	8004d0c <UART_SetConfig>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e01b      	b.n	80045fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 fe85 	bl	8005304 <UART_CheckIdleState>
 80045fa:	4603      	mov	r3, r0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004604:	b480      	push	{r7}
 8004606:	b08b      	sub	sp, #44	@ 0x2c
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004616:	2b20      	cmp	r3, #32
 8004618:	d147      	bne.n	80046aa <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <HAL_UART_Transmit_IT+0x22>
 8004620:	88fb      	ldrh	r3, [r7, #6]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e040      	b.n	80046ac <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	88fa      	ldrh	r2, [r7, #6]
 8004634:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2221      	movs	r2, #33	@ 0x21
 8004652:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800465c:	d107      	bne.n	800466e <HAL_UART_Transmit_IT+0x6a>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d103      	bne.n	800466e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4a13      	ldr	r2, [pc, #76]	@ (80046b8 <HAL_UART_Transmit_IT+0xb4>)
 800466a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800466c:	e002      	b.n	8004674 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4a12      	ldr	r2, [pc, #72]	@ (80046bc <HAL_UART_Transmit_IT+0xb8>)
 8004672:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	613b      	str	r3, [r7, #16]
   return(result);
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004688:	627b      	str	r3, [r7, #36]	@ 0x24
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	623b      	str	r3, [r7, #32]
 8004694:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004696:	69f9      	ldr	r1, [r7, #28]
 8004698:	6a3a      	ldr	r2, [r7, #32]
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	61bb      	str	r3, [r7, #24]
   return(result);
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e6      	bne.n	8004674 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	e000      	b.n	80046ac <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80046aa:	2302      	movs	r3, #2
  }
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	372c      	adds	r7, #44	@ 0x2c
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	080056d9 	.word	0x080056d9
 80046bc:	08005623 	.word	0x08005623

080046c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b0ba      	sub	sp, #232	@ 0xe8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80046ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80046ee:	4013      	ands	r3, r2
 80046f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80046f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d115      	bne.n	8004728 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80046fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00f      	beq.n	8004728 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800470c:	f003 0320 	and.w	r3, r3, #32
 8004710:	2b00      	cmp	r3, #0
 8004712:	d009      	beq.n	8004728 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 82ca 	beq.w	8004cb2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	4798      	blx	r3
      }
      return;
 8004726:	e2c4      	b.n	8004cb2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8117 	beq.w	8004960 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d106      	bne.n	800474c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800473e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004742:	4b85      	ldr	r3, [pc, #532]	@ (8004958 <HAL_UART_IRQHandler+0x298>)
 8004744:	4013      	ands	r3, r2
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 810a 	beq.w	8004960 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800474c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d011      	beq.n	800477c <HAL_UART_IRQHandler+0xbc>
 8004758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800475c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00b      	beq.n	800477c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2201      	movs	r2, #1
 800476a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004772:	f043 0201 	orr.w	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800477c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d011      	beq.n	80047ac <HAL_UART_IRQHandler+0xec>
 8004788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00b      	beq.n	80047ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2202      	movs	r2, #2
 800479a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047a2:	f043 0204 	orr.w	r2, r3, #4
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d011      	beq.n	80047dc <HAL_UART_IRQHandler+0x11c>
 80047b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00b      	beq.n	80047dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2204      	movs	r2, #4
 80047ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047d2:	f043 0202 	orr.w	r2, r3, #2
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d017      	beq.n	8004818 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d105      	bne.n	8004800 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00b      	beq.n	8004818 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2208      	movs	r2, #8
 8004806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800480e:	f043 0208 	orr.w	r2, r3, #8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800481c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004820:	2b00      	cmp	r3, #0
 8004822:	d012      	beq.n	800484a <HAL_UART_IRQHandler+0x18a>
 8004824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004828:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00c      	beq.n	800484a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004838:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004840:	f043 0220 	orr.w	r2, r3, #32
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8230 	beq.w	8004cb6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00d      	beq.n	800487e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d007      	beq.n	800487e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004884:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004892:	2b40      	cmp	r3, #64	@ 0x40
 8004894:	d005      	beq.n	80048a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800489a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d04f      	beq.n	8004942 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fe43 	bl	800552e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b2:	2b40      	cmp	r3, #64	@ 0x40
 80048b4:	d141      	bne.n	800493a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3308      	adds	r3, #8
 80048bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80048cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3308      	adds	r3, #8
 80048de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80048e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80048e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80048ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80048fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1d9      	bne.n	80048b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004906:	2b00      	cmp	r3, #0
 8004908:	d013      	beq.n	8004932 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800490e:	4a13      	ldr	r2, [pc, #76]	@ (800495c <HAL_UART_IRQHandler+0x29c>)
 8004910:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004916:	4618      	mov	r0, r3
 8004918:	f7fd fa29 	bl	8001d6e <HAL_DMA_Abort_IT>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d017      	beq.n	8004952 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800492c:	4610      	mov	r0, r2
 800492e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004930:	e00f      	b.n	8004952 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f9d4 	bl	8004ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004938:	e00b      	b.n	8004952 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f9d0 	bl	8004ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004940:	e007      	b.n	8004952 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f9cc 	bl	8004ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004950:	e1b1      	b.n	8004cb6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004952:	bf00      	nop
    return;
 8004954:	e1af      	b.n	8004cb6 <HAL_UART_IRQHandler+0x5f6>
 8004956:	bf00      	nop
 8004958:	04000120 	.word	0x04000120
 800495c:	080055f7 	.word	0x080055f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004964:	2b01      	cmp	r3, #1
 8004966:	f040 816a 	bne.w	8004c3e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800496a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800496e:	f003 0310 	and.w	r3, r3, #16
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 8163 	beq.w	8004c3e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 815c 	beq.w	8004c3e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2210      	movs	r2, #16
 800498c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004998:	2b40      	cmp	r3, #64	@ 0x40
 800499a:	f040 80d4 	bne.w	8004b46 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 80ad 	beq.w	8004b0e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80049ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049be:	429a      	cmp	r2, r3
 80049c0:	f080 80a5 	bcs.w	8004b0e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f040 8086 	bne.w	8004aec <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80049ec:	e853 3f00 	ldrex	r3, [r3]
 80049f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80049f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004a0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a0e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a1a:	e841 2300 	strex	r3, r2, [r1]
 8004a1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1da      	bne.n	80049e0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3308      	adds	r3, #8
 8004a30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a34:	e853 3f00 	ldrex	r3, [r3]
 8004a38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a3c:	f023 0301 	bic.w	r3, r3, #1
 8004a40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3308      	adds	r3, #8
 8004a4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004a52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004a56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004a5a:	e841 2300 	strex	r3, r2, [r1]
 8004a5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004a60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e1      	bne.n	8004a2a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3308      	adds	r3, #8
 8004a86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e3      	bne.n	8004a66 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004aba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004abc:	f023 0310 	bic.w	r3, r3, #16
 8004ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ace:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ad0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ad4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004adc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e4      	bne.n	8004aac <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fd f903 	bl	8001cf2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	4619      	mov	r1, r3
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f8f4 	bl	8004cf4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004b0c:	e0d5      	b.n	8004cba <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	f040 80ce 	bne.w	8004cba <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	f040 80c5 	bne.w	8004cba <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f8d8 	bl	8004cf4 <HAL_UARTEx_RxEventCallback>
      return;
 8004b44:	e0b9      	b.n	8004cba <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 80ab 	beq.w	8004cbe <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004b68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80a6 	beq.w	8004cbe <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7a:	e853 3f00 	ldrex	r3, [r3]
 8004b7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e4      	bne.n	8004b72 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3308      	adds	r3, #8
 8004bae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004bcc:	633a      	str	r2, [r7, #48]	@ 0x30
 8004bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bd4:	e841 2300 	strex	r3, r2, [r1]
 8004bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e3      	bne.n	8004ba8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f023 0310 	bic.w	r3, r3, #16
 8004c08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c16:	61fb      	str	r3, [r7, #28]
 8004c18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	69b9      	ldr	r1, [r7, #24]
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	617b      	str	r3, [r7, #20]
   return(result);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e4      	bne.n	8004bf4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c34:	4619      	mov	r1, r3
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f85c 	bl	8004cf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c3c:	e03f      	b.n	8004cbe <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00e      	beq.n	8004c68 <HAL_UART_IRQHandler+0x5a8>
 8004c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d008      	beq.n	8004c68 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004c5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fdc3 	bl	80057ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c66:	e02d      	b.n	8004cc4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00e      	beq.n	8004c92 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d008      	beq.n	8004c92 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01c      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	4798      	blx	r3
    }
    return;
 8004c90:	e017      	b.n	8004cc2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d012      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x604>
 8004c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00c      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fd74 	bl	8005798 <UART_EndTransmit_IT>
    return;
 8004cb0:	e008      	b.n	8004cc4 <HAL_UART_IRQHandler+0x604>
      return;
 8004cb2:	bf00      	nop
 8004cb4:	e006      	b.n	8004cc4 <HAL_UART_IRQHandler+0x604>
    return;
 8004cb6:	bf00      	nop
 8004cb8:	e004      	b.n	8004cc4 <HAL_UART_IRQHandler+0x604>
      return;
 8004cba:	bf00      	nop
 8004cbc:	e002      	b.n	8004cc4 <HAL_UART_IRQHandler+0x604>
      return;
 8004cbe:	bf00      	nop
 8004cc0:	e000      	b.n	8004cc4 <HAL_UART_IRQHandler+0x604>
    return;
 8004cc2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004cc4:	37e8      	adds	r7, #232	@ 0xe8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop

08004ccc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d10:	b08a      	sub	sp, #40	@ 0x28
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	431a      	orrs	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4b9e      	ldr	r3, [pc, #632]	@ (8004fb4 <UART_SetConfig+0x2a8>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d44:	430b      	orrs	r3, r1
 8004d46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a93      	ldr	r2, [pc, #588]	@ (8004fb8 <UART_SetConfig+0x2ac>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d74:	4313      	orrs	r3, r2
 8004d76:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a8a      	ldr	r2, [pc, #552]	@ (8004fbc <UART_SetConfig+0x2b0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d126      	bne.n	8004de4 <UART_SetConfig+0xd8>
 8004d96:	4b8a      	ldr	r3, [pc, #552]	@ (8004fc0 <UART_SetConfig+0x2b4>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d81b      	bhi.n	8004ddc <UART_SetConfig+0xd0>
 8004da4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dac <UART_SetConfig+0xa0>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004dbd 	.word	0x08004dbd
 8004db0:	08004dcd 	.word	0x08004dcd
 8004db4:	08004dc5 	.word	0x08004dc5
 8004db8:	08004dd5 	.word	0x08004dd5
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dc2:	e0ab      	b.n	8004f1c <UART_SetConfig+0x210>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dca:	e0a7      	b.n	8004f1c <UART_SetConfig+0x210>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dd2:	e0a3      	b.n	8004f1c <UART_SetConfig+0x210>
 8004dd4:	2308      	movs	r3, #8
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dda:	e09f      	b.n	8004f1c <UART_SetConfig+0x210>
 8004ddc:	2310      	movs	r3, #16
 8004dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004de2:	e09b      	b.n	8004f1c <UART_SetConfig+0x210>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a76      	ldr	r2, [pc, #472]	@ (8004fc4 <UART_SetConfig+0x2b8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d138      	bne.n	8004e60 <UART_SetConfig+0x154>
 8004dee:	4b74      	ldr	r3, [pc, #464]	@ (8004fc0 <UART_SetConfig+0x2b4>)
 8004df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df4:	f003 030c 	and.w	r3, r3, #12
 8004df8:	2b0c      	cmp	r3, #12
 8004dfa:	d82d      	bhi.n	8004e58 <UART_SetConfig+0x14c>
 8004dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8004e04 <UART_SetConfig+0xf8>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e39 	.word	0x08004e39
 8004e08:	08004e59 	.word	0x08004e59
 8004e0c:	08004e59 	.word	0x08004e59
 8004e10:	08004e59 	.word	0x08004e59
 8004e14:	08004e49 	.word	0x08004e49
 8004e18:	08004e59 	.word	0x08004e59
 8004e1c:	08004e59 	.word	0x08004e59
 8004e20:	08004e59 	.word	0x08004e59
 8004e24:	08004e41 	.word	0x08004e41
 8004e28:	08004e59 	.word	0x08004e59
 8004e2c:	08004e59 	.word	0x08004e59
 8004e30:	08004e59 	.word	0x08004e59
 8004e34:	08004e51 	.word	0x08004e51
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e3e:	e06d      	b.n	8004f1c <UART_SetConfig+0x210>
 8004e40:	2302      	movs	r3, #2
 8004e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e46:	e069      	b.n	8004f1c <UART_SetConfig+0x210>
 8004e48:	2304      	movs	r3, #4
 8004e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e4e:	e065      	b.n	8004f1c <UART_SetConfig+0x210>
 8004e50:	2308      	movs	r3, #8
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e56:	e061      	b.n	8004f1c <UART_SetConfig+0x210>
 8004e58:	2310      	movs	r3, #16
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e5e:	e05d      	b.n	8004f1c <UART_SetConfig+0x210>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a58      	ldr	r2, [pc, #352]	@ (8004fc8 <UART_SetConfig+0x2bc>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d125      	bne.n	8004eb6 <UART_SetConfig+0x1aa>
 8004e6a:	4b55      	ldr	r3, [pc, #340]	@ (8004fc0 <UART_SetConfig+0x2b4>)
 8004e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e74:	2b30      	cmp	r3, #48	@ 0x30
 8004e76:	d016      	beq.n	8004ea6 <UART_SetConfig+0x19a>
 8004e78:	2b30      	cmp	r3, #48	@ 0x30
 8004e7a:	d818      	bhi.n	8004eae <UART_SetConfig+0x1a2>
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	d00a      	beq.n	8004e96 <UART_SetConfig+0x18a>
 8004e80:	2b20      	cmp	r3, #32
 8004e82:	d814      	bhi.n	8004eae <UART_SetConfig+0x1a2>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <UART_SetConfig+0x182>
 8004e88:	2b10      	cmp	r3, #16
 8004e8a:	d008      	beq.n	8004e9e <UART_SetConfig+0x192>
 8004e8c:	e00f      	b.n	8004eae <UART_SetConfig+0x1a2>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e94:	e042      	b.n	8004f1c <UART_SetConfig+0x210>
 8004e96:	2302      	movs	r3, #2
 8004e98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e9c:	e03e      	b.n	8004f1c <UART_SetConfig+0x210>
 8004e9e:	2304      	movs	r3, #4
 8004ea0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea4:	e03a      	b.n	8004f1c <UART_SetConfig+0x210>
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eac:	e036      	b.n	8004f1c <UART_SetConfig+0x210>
 8004eae:	2310      	movs	r3, #16
 8004eb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eb4:	e032      	b.n	8004f1c <UART_SetConfig+0x210>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a3f      	ldr	r2, [pc, #252]	@ (8004fb8 <UART_SetConfig+0x2ac>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d12a      	bne.n	8004f16 <UART_SetConfig+0x20a>
 8004ec0:	4b3f      	ldr	r3, [pc, #252]	@ (8004fc0 <UART_SetConfig+0x2b4>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004eca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ece:	d01a      	beq.n	8004f06 <UART_SetConfig+0x1fa>
 8004ed0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ed4:	d81b      	bhi.n	8004f0e <UART_SetConfig+0x202>
 8004ed6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eda:	d00c      	beq.n	8004ef6 <UART_SetConfig+0x1ea>
 8004edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ee0:	d815      	bhi.n	8004f0e <UART_SetConfig+0x202>
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <UART_SetConfig+0x1e2>
 8004ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eea:	d008      	beq.n	8004efe <UART_SetConfig+0x1f2>
 8004eec:	e00f      	b.n	8004f0e <UART_SetConfig+0x202>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef4:	e012      	b.n	8004f1c <UART_SetConfig+0x210>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004efc:	e00e      	b.n	8004f1c <UART_SetConfig+0x210>
 8004efe:	2304      	movs	r3, #4
 8004f00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f04:	e00a      	b.n	8004f1c <UART_SetConfig+0x210>
 8004f06:	2308      	movs	r3, #8
 8004f08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f0c:	e006      	b.n	8004f1c <UART_SetConfig+0x210>
 8004f0e:	2310      	movs	r3, #16
 8004f10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f14:	e002      	b.n	8004f1c <UART_SetConfig+0x210>
 8004f16:	2310      	movs	r3, #16
 8004f18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a25      	ldr	r2, [pc, #148]	@ (8004fb8 <UART_SetConfig+0x2ac>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	f040 808a 	bne.w	800503c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d824      	bhi.n	8004f7a <UART_SetConfig+0x26e>
 8004f30:	a201      	add	r2, pc, #4	@ (adr r2, 8004f38 <UART_SetConfig+0x22c>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004f5d 	.word	0x08004f5d
 8004f3c:	08004f7b 	.word	0x08004f7b
 8004f40:	08004f65 	.word	0x08004f65
 8004f44:	08004f7b 	.word	0x08004f7b
 8004f48:	08004f6b 	.word	0x08004f6b
 8004f4c:	08004f7b 	.word	0x08004f7b
 8004f50:	08004f7b 	.word	0x08004f7b
 8004f54:	08004f7b 	.word	0x08004f7b
 8004f58:	08004f73 	.word	0x08004f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f5c:	f7fd ff02 	bl	8002d64 <HAL_RCC_GetPCLK1Freq>
 8004f60:	61f8      	str	r0, [r7, #28]
        break;
 8004f62:	e010      	b.n	8004f86 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f64:	4b19      	ldr	r3, [pc, #100]	@ (8004fcc <UART_SetConfig+0x2c0>)
 8004f66:	61fb      	str	r3, [r7, #28]
        break;
 8004f68:	e00d      	b.n	8004f86 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f6a:	f7fd fe63 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8004f6e:	61f8      	str	r0, [r7, #28]
        break;
 8004f70:	e009      	b.n	8004f86 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f76:	61fb      	str	r3, [r7, #28]
        break;
 8004f78:	e005      	b.n	8004f86 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 8109 	beq.w	80051a0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	4413      	add	r3, r2
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d305      	bcc.n	8004faa <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d912      	bls.n	8004fd0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004fb0:	e0f6      	b.n	80051a0 <UART_SetConfig+0x494>
 8004fb2:	bf00      	nop
 8004fb4:	efff69f3 	.word	0xefff69f3
 8004fb8:	40008000 	.word	0x40008000
 8004fbc:	40013800 	.word	0x40013800
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	40004400 	.word	0x40004400
 8004fc8:	40004800 	.word	0x40004800
 8004fcc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	461c      	mov	r4, r3
 8004fd6:	4615      	mov	r5, r2
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	022b      	lsls	r3, r5, #8
 8004fe2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004fe6:	0222      	lsls	r2, r4, #8
 8004fe8:	68f9      	ldr	r1, [r7, #12]
 8004fea:	6849      	ldr	r1, [r1, #4]
 8004fec:	0849      	lsrs	r1, r1, #1
 8004fee:	2000      	movs	r0, #0
 8004ff0:	4688      	mov	r8, r1
 8004ff2:	4681      	mov	r9, r0
 8004ff4:	eb12 0a08 	adds.w	sl, r2, r8
 8004ff8:	eb43 0b09 	adc.w	fp, r3, r9
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	607a      	str	r2, [r7, #4]
 8005006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800500a:	4650      	mov	r0, sl
 800500c:	4659      	mov	r1, fp
 800500e:	f7fb fe1b 	bl	8000c48 <__aeabi_uldivmod>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4613      	mov	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005020:	d308      	bcc.n	8005034 <UART_SetConfig+0x328>
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005028:	d204      	bcs.n	8005034 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	60da      	str	r2, [r3, #12]
 8005032:	e0b5      	b.n	80051a0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800503a:	e0b1      	b.n	80051a0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005044:	d15d      	bne.n	8005102 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005046:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800504a:	2b08      	cmp	r3, #8
 800504c:	d827      	bhi.n	800509e <UART_SetConfig+0x392>
 800504e:	a201      	add	r2, pc, #4	@ (adr r2, 8005054 <UART_SetConfig+0x348>)
 8005050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005054:	08005079 	.word	0x08005079
 8005058:	08005081 	.word	0x08005081
 800505c:	08005089 	.word	0x08005089
 8005060:	0800509f 	.word	0x0800509f
 8005064:	0800508f 	.word	0x0800508f
 8005068:	0800509f 	.word	0x0800509f
 800506c:	0800509f 	.word	0x0800509f
 8005070:	0800509f 	.word	0x0800509f
 8005074:	08005097 	.word	0x08005097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005078:	f7fd fe74 	bl	8002d64 <HAL_RCC_GetPCLK1Freq>
 800507c:	61f8      	str	r0, [r7, #28]
        break;
 800507e:	e014      	b.n	80050aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005080:	f7fd fe86 	bl	8002d90 <HAL_RCC_GetPCLK2Freq>
 8005084:	61f8      	str	r0, [r7, #28]
        break;
 8005086:	e010      	b.n	80050aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005088:	4b4c      	ldr	r3, [pc, #304]	@ (80051bc <UART_SetConfig+0x4b0>)
 800508a:	61fb      	str	r3, [r7, #28]
        break;
 800508c:	e00d      	b.n	80050aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800508e:	f7fd fdd1 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8005092:	61f8      	str	r0, [r7, #28]
        break;
 8005094:	e009      	b.n	80050aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800509a:	61fb      	str	r3, [r7, #28]
        break;
 800509c:	e005      	b.n	80050aa <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d077      	beq.n	80051a0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	005a      	lsls	r2, r3, #1
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	085b      	lsrs	r3, r3, #1
 80050ba:	441a      	add	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2b0f      	cmp	r3, #15
 80050ca:	d916      	bls.n	80050fa <UART_SetConfig+0x3ee>
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050d2:	d212      	bcs.n	80050fa <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	f023 030f 	bic.w	r3, r3, #15
 80050dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	085b      	lsrs	r3, r3, #1
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	8afb      	ldrh	r3, [r7, #22]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	8afa      	ldrh	r2, [r7, #22]
 80050f6:	60da      	str	r2, [r3, #12]
 80050f8:	e052      	b.n	80051a0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005100:	e04e      	b.n	80051a0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005102:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005106:	2b08      	cmp	r3, #8
 8005108:	d827      	bhi.n	800515a <UART_SetConfig+0x44e>
 800510a:	a201      	add	r2, pc, #4	@ (adr r2, 8005110 <UART_SetConfig+0x404>)
 800510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005110:	08005135 	.word	0x08005135
 8005114:	0800513d 	.word	0x0800513d
 8005118:	08005145 	.word	0x08005145
 800511c:	0800515b 	.word	0x0800515b
 8005120:	0800514b 	.word	0x0800514b
 8005124:	0800515b 	.word	0x0800515b
 8005128:	0800515b 	.word	0x0800515b
 800512c:	0800515b 	.word	0x0800515b
 8005130:	08005153 	.word	0x08005153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005134:	f7fd fe16 	bl	8002d64 <HAL_RCC_GetPCLK1Freq>
 8005138:	61f8      	str	r0, [r7, #28]
        break;
 800513a:	e014      	b.n	8005166 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800513c:	f7fd fe28 	bl	8002d90 <HAL_RCC_GetPCLK2Freq>
 8005140:	61f8      	str	r0, [r7, #28]
        break;
 8005142:	e010      	b.n	8005166 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005144:	4b1d      	ldr	r3, [pc, #116]	@ (80051bc <UART_SetConfig+0x4b0>)
 8005146:	61fb      	str	r3, [r7, #28]
        break;
 8005148:	e00d      	b.n	8005166 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800514a:	f7fd fd73 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 800514e:	61f8      	str	r0, [r7, #28]
        break;
 8005150:	e009      	b.n	8005166 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005156:	61fb      	str	r3, [r7, #28]
        break;
 8005158:	e005      	b.n	8005166 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005164:	bf00      	nop
    }

    if (pclk != 0U)
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d019      	beq.n	80051a0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	085a      	lsrs	r2, r3, #1
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	441a      	add	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	fbb2 f3f3 	udiv	r3, r2, r3
 800517e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	2b0f      	cmp	r3, #15
 8005184:	d909      	bls.n	800519a <UART_SetConfig+0x48e>
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800518c:	d205      	bcs.n	800519a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	60da      	str	r2, [r3, #12]
 8005198:	e002      	b.n	80051a0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80051ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3728      	adds	r7, #40	@ 0x28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ba:	bf00      	nop
 80051bc:	00f42400 	.word	0x00f42400

080051c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01a      	beq.n	80052d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052be:	d10a      	bne.n	80052d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	605a      	str	r2, [r3, #4]
  }
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b098      	sub	sp, #96	@ 0x60
 8005308:	af02      	add	r7, sp, #8
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005314:	f7fc fbac 	bl	8001a70 <HAL_GetTick>
 8005318:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b08      	cmp	r3, #8
 8005326:	d12e      	bne.n	8005386 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005328:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005330:	2200      	movs	r2, #0
 8005332:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f88c 	bl	8005454 <UART_WaitOnFlagUntilTimeout>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d021      	beq.n	8005386 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005356:	653b      	str	r3, [r7, #80]	@ 0x50
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005360:	647b      	str	r3, [r7, #68]	@ 0x44
 8005362:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005366:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800536e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e6      	bne.n	8005342 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e062      	b.n	800544c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0304 	and.w	r3, r3, #4
 8005390:	2b04      	cmp	r3, #4
 8005392:	d149      	bne.n	8005428 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005394:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800539c:	2200      	movs	r2, #0
 800539e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f856 	bl	8005454 <UART_WaitOnFlagUntilTimeout>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d03c      	beq.n	8005428 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b6:	e853 3f00 	ldrex	r3, [r3]
 80053ba:	623b      	str	r3, [r7, #32]
   return(result);
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053d4:	e841 2300 	strex	r3, r2, [r1]
 80053d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1e6      	bne.n	80053ae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3308      	adds	r3, #8
 80053e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0301 	bic.w	r3, r3, #1
 80053f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3308      	adds	r3, #8
 80053fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005400:	61fa      	str	r2, [r7, #28]
 8005402:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005404:	69b9      	ldr	r1, [r7, #24]
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	e841 2300 	strex	r3, r2, [r1]
 800540c:	617b      	str	r3, [r7, #20]
   return(result);
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1e5      	bne.n	80053e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e011      	b.n	800544c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2220      	movs	r2, #32
 800542c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3758      	adds	r7, #88	@ 0x58
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	4613      	mov	r3, r2
 8005462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005464:	e04f      	b.n	8005506 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d04b      	beq.n	8005506 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546e:	f7fc faff 	bl	8001a70 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	429a      	cmp	r2, r3
 800547c:	d302      	bcc.n	8005484 <UART_WaitOnFlagUntilTimeout+0x30>
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e04e      	b.n	8005526 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	d037      	beq.n	8005506 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2b80      	cmp	r3, #128	@ 0x80
 800549a:	d034      	beq.n	8005506 <UART_WaitOnFlagUntilTimeout+0xb2>
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b40      	cmp	r3, #64	@ 0x40
 80054a0:	d031      	beq.n	8005506 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	f003 0308 	and.w	r3, r3, #8
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d110      	bne.n	80054d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2208      	movs	r2, #8
 80054b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f838 	bl	800552e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2208      	movs	r2, #8
 80054c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e029      	b.n	8005526 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054e0:	d111      	bne.n	8005506 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 f81e 	bl	800552e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e00f      	b.n	8005526 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4013      	ands	r3, r2
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	429a      	cmp	r2, r3
 8005514:	bf0c      	ite	eq
 8005516:	2301      	moveq	r3, #1
 8005518:	2300      	movne	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	429a      	cmp	r2, r3
 8005522:	d0a0      	beq.n	8005466 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800552e:	b480      	push	{r7}
 8005530:	b095      	sub	sp, #84	@ 0x54
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800553e:	e853 3f00 	ldrex	r3, [r3]
 8005542:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005546:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800554a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	461a      	mov	r2, r3
 8005552:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005554:	643b      	str	r3, [r7, #64]	@ 0x40
 8005556:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800555a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800555c:	e841 2300 	strex	r3, r2, [r1]
 8005560:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e6      	bne.n	8005536 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3308      	adds	r3, #8
 800556e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	61fb      	str	r3, [r7, #28]
   return(result);
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	f023 0301 	bic.w	r3, r3, #1
 800557e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	3308      	adds	r3, #8
 8005586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005588:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800558a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800558e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e5      	bne.n	8005568 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d118      	bne.n	80055d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f023 0310 	bic.w	r3, r3, #16
 80055b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055c2:	61bb      	str	r3, [r7, #24]
 80055c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c6:	6979      	ldr	r1, [r7, #20]
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	e841 2300 	strex	r3, r2, [r1]
 80055ce:	613b      	str	r3, [r7, #16]
   return(result);
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1e6      	bne.n	80055a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2220      	movs	r2, #32
 80055da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80055ea:	bf00      	nop
 80055ec:	3754      	adds	r7, #84	@ 0x54
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005602:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f7ff fb63 	bl	8004ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800561a:	bf00      	nop
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005622:	b480      	push	{r7}
 8005624:	b08f      	sub	sp, #60	@ 0x3c
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800562e:	2b21      	cmp	r3, #33	@ 0x21
 8005630:	d14c      	bne.n	80056cc <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d132      	bne.n	80056a4 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	e853 3f00 	ldrex	r3, [r3]
 800564a:	61fb      	str	r3, [r7, #28]
   return(result);
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005652:	637b      	str	r3, [r7, #52]	@ 0x34
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	461a      	mov	r2, r3
 800565a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800565e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005664:	e841 2300 	strex	r3, r2, [r1]
 8005668:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800566a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e6      	bne.n	800563e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	60bb      	str	r3, [r7, #8]
   return(result);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005684:	633b      	str	r3, [r7, #48]	@ 0x30
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568e:	61bb      	str	r3, [r7, #24]
 8005690:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	6979      	ldr	r1, [r7, #20]
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	613b      	str	r3, [r7, #16]
   return(result);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e6      	bne.n	8005670 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80056a2:	e013      	b.n	80056cc <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056a8:	781a      	ldrb	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80056cc:	bf00      	nop
 80056ce:	373c      	adds	r7, #60	@ 0x3c
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80056d8:	b480      	push	{r7}
 80056da:	b091      	sub	sp, #68	@ 0x44
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056e4:	2b21      	cmp	r3, #33	@ 0x21
 80056e6:	d151      	bne.n	800578c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d132      	bne.n	800575a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fc:	e853 3f00 	ldrex	r3, [r3]
 8005700:	623b      	str	r3, [r7, #32]
   return(result);
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005708:	63bb      	str	r3, [r7, #56]	@ 0x38
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005712:	633b      	str	r3, [r7, #48]	@ 0x30
 8005714:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800571a:	e841 2300 	strex	r3, r2, [r1]
 800571e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1e6      	bne.n	80056f4 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	60fb      	str	r3, [r7, #12]
   return(result);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800573a:	637b      	str	r3, [r7, #52]	@ 0x34
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	461a      	mov	r2, r3
 8005742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005744:	61fb      	str	r3, [r7, #28]
 8005746:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	69b9      	ldr	r1, [r7, #24]
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	617b      	str	r3, [r7, #20]
   return(result);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e6      	bne.n	8005726 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005758:	e018      	b.n	800578c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800575e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005762:	881a      	ldrh	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800576c:	b292      	uxth	r2, r2
 800576e:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005774:	1c9a      	adds	r2, r3, #2
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005780:	b29b      	uxth	r3, r3
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800578c:	bf00      	nop
 800578e:	3744      	adds	r7, #68	@ 0x44
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057b4:	61fb      	str	r3, [r7, #28]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	61bb      	str	r3, [r7, #24]
 80057c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	6979      	ldr	r1, [r7, #20]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	613b      	str	r3, [r7, #16]
   return(result);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e6      	bne.n	80057a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2220      	movs	r2, #32
 80057d6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7ff fa74 	bl	8004ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057e4:	bf00      	nop
 80057e6:	3720      	adds	r7, #32
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <checkJS1>:
uint8_t countJmpJS1set = 0;
uint8_t countJmpJS1reset = 0;
_Bool jmpJS1 = false; // false - работа с MAX31865; true - работа с ЛТ-300


void checkJS1(){
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
	//проверка входа PC7. Если 1, то работа с датчиком MAX31865, если 0, то работа с ЛТ-300
	if(!HAL_GPIO_ReadPin(Select_Sensor_GPIO_Port, Select_Sensor_Pin) && jmpJS1==false){
 8005804:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005808:	481e      	ldr	r0, [pc, #120]	@ (8005884 <checkJS1+0x84>)
 800580a:	f7fc fc6b 	bl	80020e4 <HAL_GPIO_ReadPin>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d117      	bne.n	8005844 <checkJS1+0x44>
 8005814:	4b1c      	ldr	r3, [pc, #112]	@ (8005888 <checkJS1+0x88>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	f083 0301 	eor.w	r3, r3, #1
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d010      	beq.n	8005844 <checkJS1+0x44>
		countJmpJS1set++;
 8005822:	4b1a      	ldr	r3, [pc, #104]	@ (800588c <checkJS1+0x8c>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	3301      	adds	r3, #1
 8005828:	b2da      	uxtb	r2, r3
 800582a:	4b18      	ldr	r3, [pc, #96]	@ (800588c <checkJS1+0x8c>)
 800582c:	701a      	strb	r2, [r3, #0]
		if(countJmpJS1set > 3) {
 800582e:	4b17      	ldr	r3, [pc, #92]	@ (800588c <checkJS1+0x8c>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d923      	bls.n	800587e <checkJS1+0x7e>
			countJmpJS1reset = 0;
 8005836:	4b16      	ldr	r3, [pc, #88]	@ (8005890 <checkJS1+0x90>)
 8005838:	2200      	movs	r2, #0
 800583a:	701a      	strb	r2, [r3, #0]
			jmpJS1=true;
 800583c:	4b12      	ldr	r3, [pc, #72]	@ (8005888 <checkJS1+0x88>)
 800583e:	2201      	movs	r2, #1
 8005840:	701a      	strb	r2, [r3, #0]
		if(countJmpJS1set > 3) {
 8005842:	e01c      	b.n	800587e <checkJS1+0x7e>
		}
	} else if (HAL_GPIO_ReadPin(Select_Sensor_GPIO_Port, Select_Sensor_Pin) && jmpJS1==true){
 8005844:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005848:	480e      	ldr	r0, [pc, #56]	@ (8005884 <checkJS1+0x84>)
 800584a:	f7fc fc4b 	bl	80020e4 <HAL_GPIO_ReadPin>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d014      	beq.n	800587e <checkJS1+0x7e>
 8005854:	4b0c      	ldr	r3, [pc, #48]	@ (8005888 <checkJS1+0x88>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d010      	beq.n	800587e <checkJS1+0x7e>
		countJmpJS1reset++;
 800585c:	4b0c      	ldr	r3, [pc, #48]	@ (8005890 <checkJS1+0x90>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	3301      	adds	r3, #1
 8005862:	b2da      	uxtb	r2, r3
 8005864:	4b0a      	ldr	r3, [pc, #40]	@ (8005890 <checkJS1+0x90>)
 8005866:	701a      	strb	r2, [r3, #0]
		if(countJmpJS1reset > 3) {
 8005868:	4b09      	ldr	r3, [pc, #36]	@ (8005890 <checkJS1+0x90>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b03      	cmp	r3, #3
 800586e:	d906      	bls.n	800587e <checkJS1+0x7e>
			countJmpJS1set = 0;
 8005870:	4b06      	ldr	r3, [pc, #24]	@ (800588c <checkJS1+0x8c>)
 8005872:	2200      	movs	r2, #0
 8005874:	701a      	strb	r2, [r3, #0]
			jmpJS1=false;
 8005876:	4b04      	ldr	r3, [pc, #16]	@ (8005888 <checkJS1+0x88>)
 8005878:	2200      	movs	r2, #0
 800587a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800587c:	e7ff      	b.n	800587e <checkJS1+0x7e>
 800587e:	bf00      	nop
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	48000400 	.word	0x48000400
 8005888:	20000416 	.word	0x20000416
 800588c:	20000414 	.word	0x20000414
 8005890:	20000415 	.word	0x20000415

08005894 <JS1_isSet>:

_Bool JS1_isSet() {
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
	if (jmpJS1==true) return true;
 8005898:	4b05      	ldr	r3, [pc, #20]	@ (80058b0 <JS1_isSet+0x1c>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <JS1_isSet+0x10>
 80058a0:	2301      	movs	r3, #1
 80058a2:	e000      	b.n	80058a6 <JS1_isSet+0x12>
	else return false;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	20000416 	.word	0x20000416

080058b4 <Max31865_delay>:

#define RTD_A 3.9083e-3
#define RTD_B -5.775e-7
//#########################################################################################################################
void  Max31865_delay(uint32_t delay_ms)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  #if (_MAX31865_USE_FREERTOS == 1)
  osDelay(delay_ms);
  #else
  HAL_Delay(delay_ms);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7fc f8e3 	bl	8001a88 <HAL_Delay>
  #endif  
}
 80058c2:	bf00      	nop
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <Max31865_readRegisterN>:
//#########################################################################################################################
void Max31865_readRegisterN(Max31865_t *max31865,uint8_t addr, uint8_t *buffer, uint8_t n)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b088      	sub	sp, #32
 80058ce:	af02      	add	r7, sp, #8
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	461a      	mov	r2, r3
 80058d6:	460b      	mov	r3, r1
 80058d8:	72fb      	strb	r3, [r7, #11]
 80058da:	4613      	mov	r3, r2
 80058dc:	72bb      	strb	r3, [r7, #10]
  uint8_t tmp = 0xFF;
 80058de:	23ff      	movs	r3, #255	@ 0xff
 80058e0:	75fb      	strb	r3, [r7, #23]
	addr &= 0x7F;
 80058e2:	7afb      	ldrb	r3, [r7, #11]
 80058e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);          
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6818      	ldr	r0, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	889b      	ldrh	r3, [r3, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	4619      	mov	r1, r3
 80058f8:	f7fc fc0c 	bl	8002114 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(max31865->spi,&addr, 1, 100);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6898      	ldr	r0, [r3, #8]
 8005900:	f107 010b 	add.w	r1, r7, #11
 8005904:	2364      	movs	r3, #100	@ 0x64
 8005906:	2201      	movs	r2, #1
 8005908:	f7fd fe65 	bl	80035d6 <HAL_SPI_Transmit>
	while (n--)
 800590c:	e00c      	b.n	8005928 <Max31865_readRegisterN+0x5e>
	{
    HAL_SPI_TransmitReceive(max31865->spi, &tmp, buffer, 1, 100);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6898      	ldr	r0, [r3, #8]
 8005912:	f107 0117 	add.w	r1, r7, #23
 8005916:	2364      	movs	r3, #100	@ 0x64
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	2301      	movs	r3, #1
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	f7fd ffd0 	bl	80038c2 <HAL_SPI_TransmitReceive>
		buffer++;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	3301      	adds	r3, #1
 8005926:	607b      	str	r3, [r7, #4]
	while (n--)
 8005928:	7abb      	ldrb	r3, [r7, #10]
 800592a:	1e5a      	subs	r2, r3, #1
 800592c:	72ba      	strb	r2, [r7, #10]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1ed      	bne.n	800590e <Max31865_readRegisterN+0x44>
	}
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);      
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6818      	ldr	r0, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	889b      	ldrh	r3, [r3, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	4619      	mov	r1, r3
 800593e:	f7fc fbe9 	bl	8002114 <HAL_GPIO_WritePin>
}
 8005942:	bf00      	nop
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <Max31865_readRegister8>:
//#########################################################################################################################
uint8_t Max31865_readRegister8(Max31865_t *max31865,uint8_t addr)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	460b      	mov	r3, r1
 8005954:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	73fb      	strb	r3, [r7, #15]
	Max31865_readRegisterN(max31865, addr, &ret, 1);
 800595a:	f107 020f 	add.w	r2, r7, #15
 800595e:	78f9      	ldrb	r1, [r7, #3]
 8005960:	2301      	movs	r3, #1
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff ffb1 	bl	80058ca <Max31865_readRegisterN>
	return ret;  
 8005968:	7bfb      	ldrb	r3, [r7, #15]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <Max31865_readRegister16>:
//#########################################################################################################################
uint16_t Max31865_readRegister16(Max31865_t *max31865,uint8_t addr)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b084      	sub	sp, #16
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	460b      	mov	r3, r1
 800597c:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[2] = {0, 0};
 800597e:	2300      	movs	r3, #0
 8005980:	81bb      	strh	r3, [r7, #12]
	Max31865_readRegisterN(max31865, addr, buffer, 2);
 8005982:	f107 020c 	add.w	r2, r7, #12
 8005986:	78f9      	ldrb	r1, [r7, #3]
 8005988:	2302      	movs	r3, #2
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff ff9d 	bl	80058ca <Max31865_readRegisterN>
	uint16_t ret = buffer[0];
 8005990:	7b3b      	ldrb	r3, [r7, #12]
 8005992:	81fb      	strh	r3, [r7, #14]
	ret <<= 8;
 8005994:	89fb      	ldrh	r3, [r7, #14]
 8005996:	021b      	lsls	r3, r3, #8
 8005998:	81fb      	strh	r3, [r7, #14]
	ret |=  buffer[1];
 800599a:	7b7b      	ldrb	r3, [r7, #13]
 800599c:	461a      	mov	r2, r3
 800599e:	89fb      	ldrh	r3, [r7, #14]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	81fb      	strh	r3, [r7, #14]
	return ret;
 80059a4:	89fb      	ldrh	r3, [r7, #14]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <Max31865_writeRegister8>:
//#########################################################################################################################
void Max31865_writeRegister8(Max31865_t *max31865,uint8_t addr, uint8_t data)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	460b      	mov	r3, r1
 80059b8:	70fb      	strb	r3, [r7, #3]
 80059ba:	4613      	mov	r3, r2
 80059bc:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);          
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	889b      	ldrh	r3, [r3, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	4619      	mov	r1, r3
 80059ca:	f7fc fba3 	bl	8002114 <HAL_GPIO_WritePin>
  addr |= 0x80;
 80059ce:	78fb      	ldrb	r3, [r7, #3]
 80059d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(max31865->spi,&addr, 1, 100);   
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6898      	ldr	r0, [r3, #8]
 80059dc:	1cf9      	adds	r1, r7, #3
 80059de:	2364      	movs	r3, #100	@ 0x64
 80059e0:	2201      	movs	r2, #1
 80059e2:	f7fd fdf8 	bl	80035d6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(max31865->spi,&data, 1, 100);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6898      	ldr	r0, [r3, #8]
 80059ea:	1cb9      	adds	r1, r7, #2
 80059ec:	2364      	movs	r3, #100	@ 0x64
 80059ee:	2201      	movs	r2, #1
 80059f0:	f7fd fdf1 	bl	80035d6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);          
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6818      	ldr	r0, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	889b      	ldrh	r3, [r3, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	4619      	mov	r1, r3
 8005a00:	f7fc fb88 	bl	8002114 <HAL_GPIO_WritePin>
}
 8005a04:	bf00      	nop
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <Max31865_clearFault>:
{
  return Max31865_readRegister8(max31865, MAX31856_FAULTSTAT_REG);
}
//#########################################################################################################################
void Max31865_clearFault(Max31865_t *max31865)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8005a14:	2100      	movs	r1, #0
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff ff97 	bl	800594a <Max31865_readRegister8>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	73fb      	strb	r3, [r7, #15]
	t &= ~0x2C;
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	f023 032c 	bic.w	r3, r3, #44	@ 0x2c
 8005a26:	73fb      	strb	r3, [r7, #15]
	t |= MAX31856_CONFIG_FAULTSTAT;
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
 8005a2a:	f043 0302 	orr.w	r3, r3, #2
 8005a2e:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	461a      	mov	r2, r3
 8005a34:	2100      	movs	r1, #0
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7ff ffb9 	bl	80059ae <Max31865_writeRegister8>
}
 8005a3c:	bf00      	nop
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <Max31865_enableBias>:
//#########################################################################################################################
void Max31865_enableBias(Max31865_t *max31865, uint8_t enable)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8005a50:	2100      	movs	r1, #0
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff ff79 	bl	800594a <Max31865_readRegister8>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	73fb      	strb	r3, [r7, #15]
	if (enable)
 8005a5c:	78fb      	ldrb	r3, [r7, #3]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d004      	beq.n	8005a6c <Max31865_enableBias+0x28>
		t |= MAX31856_CONFIG_BIAS;
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
 8005a64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a68:	73fb      	strb	r3, [r7, #15]
 8005a6a:	e003      	b.n	8005a74 <Max31865_enableBias+0x30>
	else
		t &= ~MAX31856_CONFIG_BIAS;
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
 8005a6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a72:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	461a      	mov	r2, r3
 8005a78:	2100      	movs	r1, #0
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff ff97 	bl	80059ae <Max31865_writeRegister8>
}
 8005a80:	bf00      	nop
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <Max31865_autoConvert>:
//#########################################################################################################################
void Max31865_autoConvert(Max31865_t *max31865, uint8_t enable)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8005a94:	2100      	movs	r1, #0
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff ff57 	bl	800594a <Max31865_readRegister8>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	73fb      	strb	r3, [r7, #15]
	if (enable)
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d004      	beq.n	8005ab0 <Max31865_autoConvert+0x28>
		t |= MAX31856_CONFIG_MODEAUTO;
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
 8005aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005aac:	73fb      	strb	r3, [r7, #15]
 8005aae:	e003      	b.n	8005ab8 <Max31865_autoConvert+0x30>
	else
		t &= ~MAX31856_CONFIG_MODEAUTO; 
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
 8005ab2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ab6:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	461a      	mov	r2, r3
 8005abc:	2100      	movs	r1, #0
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff ff75 	bl	80059ae <Max31865_writeRegister8>
}
 8005ac4:	bf00      	nop
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <Max31865_setWires>:
//#########################################################################################################################
void Max31865_setWires(Max31865_t *max31865, uint8_t numWires)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8005ad8:	2100      	movs	r1, #0
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff ff35 	bl	800594a <Max31865_readRegister8>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	73fb      	strb	r3, [r7, #15]
	if (numWires == 3)
 8005ae4:	78fb      	ldrb	r3, [r7, #3]
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d104      	bne.n	8005af4 <Max31865_setWires+0x28>
		t |= MAX31856_CONFIG_3WIRE;
 8005aea:	7bfb      	ldrb	r3, [r7, #15]
 8005aec:	f043 0310 	orr.w	r3, r3, #16
 8005af0:	73fb      	strb	r3, [r7, #15]
 8005af2:	e003      	b.n	8005afc <Max31865_setWires+0x30>
	else
		t &= ~MAX31856_CONFIG_3WIRE;
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
 8005af6:	f023 0310 	bic.w	r3, r3, #16
 8005afa:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	461a      	mov	r2, r3
 8005b00:	2100      	movs	r1, #0
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff ff53 	bl	80059ae <Max31865_writeRegister8>
}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <Max31865_setFilter>:
//#########################################################################################################################
void Max31865_setFilter(Max31865_t *max31865, uint8_t filterHz)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7ff ff13 	bl	800594a <Max31865_readRegister8>
 8005b24:	4603      	mov	r3, r0
 8005b26:	73fb      	strb	r3, [r7, #15]
	if (filterHz == 50)
 8005b28:	78fb      	ldrb	r3, [r7, #3]
 8005b2a:	2b32      	cmp	r3, #50	@ 0x32
 8005b2c:	d104      	bne.n	8005b38 <Max31865_setFilter+0x28>
		t |= MAX31856_CONFIG_FILT50HZ;
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
 8005b30:	f043 0301 	orr.w	r3, r3, #1
 8005b34:	73fb      	strb	r3, [r7, #15]
 8005b36:	e003      	b.n	8005b40 <Max31865_setFilter+0x30>
	else
		t &= ~MAX31856_CONFIG_FILT50HZ;
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	f023 0301 	bic.w	r3, r3, #1
 8005b3e:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
 8005b42:	461a      	mov	r2, r3
 8005b44:	2100      	movs	r1, #0
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff ff31 	bl	80059ae <Max31865_writeRegister8>
}
 8005b4c:	bf00      	nop
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <Max31865_readRTD>:
//#########################################################################################################################
uint16_t Max31865_readRTD (Max31865_t *max31865)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
	Max31865_clearFault(max31865);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff ff55 	bl	8005a0c <Max31865_clearFault>
	Max31865_enableBias(max31865, 1);
 8005b62:	2101      	movs	r1, #1
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff ff6d 	bl	8005a44 <Max31865_enableBias>
	Max31865_delay(10);
 8005b6a:	200a      	movs	r0, #10
 8005b6c:	f7ff fea2 	bl	80058b4 <Max31865_delay>
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8005b70:	2100      	movs	r1, #0
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff fee9 	bl	800594a <Max31865_readRegister8>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	73fb      	strb	r3, [r7, #15]
	t |= MAX31856_CONFIG_1SHOT;
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	f043 0320 	orr.w	r3, r3, #32
 8005b82:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
 8005b86:	461a      	mov	r2, r3
 8005b88:	2100      	movs	r1, #0
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff ff0f 	bl	80059ae <Max31865_writeRegister8>
	Max31865_delay(65);
 8005b90:	2041      	movs	r0, #65	@ 0x41
 8005b92:	f7ff fe8f 	bl	80058b4 <Max31865_delay>
	uint16_t rtd = Max31865_readRegister16(max31865, MAX31856_RTDMSB_REG);
 8005b96:	2101      	movs	r1, #1
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff feea 	bl	8005972 <Max31865_readRegister16>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	81bb      	strh	r3, [r7, #12]
	rtd >>= 1;
 8005ba2:	89bb      	ldrh	r3, [r7, #12]
 8005ba4:	085b      	lsrs	r3, r3, #1
 8005ba6:	81bb      	strh	r3, [r7, #12]
	return rtd;
 8005ba8:	89bb      	ldrh	r3, [r7, #12]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <Max31865_init>:
//#########################################################################################################################
//#########################################################################################################################
//#########################################################################################################################
void  Max31865_init(Max31865_t *max31865,SPI_HandleTypeDef *spi,GPIO_TypeDef  *cs_gpio,uint16_t cs_pin,uint8_t  numwires, uint8_t filterHz)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b084      	sub	sp, #16
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
 8005bbe:	807b      	strh	r3, [r7, #2]
  if(max31865->lock == 1)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	7b1b      	ldrb	r3, [r3, #12]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d102      	bne.n	8005bce <Max31865_init+0x1c>
    Max31865_delay(1);
 8005bc8:	2001      	movs	r0, #1
 8005bca:	f7ff fe73 	bl	80058b4 <Max31865_delay>
  max31865->lock = 1;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	731a      	strb	r2, [r3, #12]
  max31865->spi = spi;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	609a      	str	r2, [r3, #8]
  max31865->cs_gpio = cs_gpio;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	601a      	str	r2, [r3, #0]
  max31865->cs_pin = cs_pin; 
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	887a      	ldrh	r2, [r7, #2]
 8005be4:	809a      	strh	r2, [r3, #4]
  HAL_GPIO_WritePin(max31865->cs_gpio,max31865->cs_pin,GPIO_PIN_SET);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	889b      	ldrh	r3, [r3, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	f7fc fa8f 	bl	8002114 <HAL_GPIO_WritePin>
  Max31865_delay(100);
 8005bf6:	2064      	movs	r0, #100	@ 0x64
 8005bf8:	f7ff fe5c 	bl	80058b4 <Max31865_delay>
  Max31865_setWires(max31865, numwires);
 8005bfc:	7e3b      	ldrb	r3, [r7, #24]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f7ff ff63 	bl	8005acc <Max31865_setWires>
	Max31865_enableBias(max31865, 0);
 8005c06:	2100      	movs	r1, #0
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f7ff ff1b 	bl	8005a44 <Max31865_enableBias>
	Max31865_autoConvert(max31865, 0);
 8005c0e:	2100      	movs	r1, #0
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7ff ff39 	bl	8005a88 <Max31865_autoConvert>
	Max31865_clearFault(max31865);
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f7ff fef8 	bl	8005a0c <Max31865_clearFault>
  Max31865_setFilter(max31865, filterHz);  
 8005c1c:	7f3b      	ldrb	r3, [r7, #28]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f7ff ff75 	bl	8005b10 <Max31865_setFilter>
}
 8005c26:	bf00      	nop
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <__cvt>:
 8005c2e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c32:	ec57 6b10 	vmov	r6, r7, d0
 8005c36:	2f00      	cmp	r7, #0
 8005c38:	460c      	mov	r4, r1
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	463b      	mov	r3, r7
 8005c3e:	bfbb      	ittet	lt
 8005c40:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005c44:	461f      	movlt	r7, r3
 8005c46:	2300      	movge	r3, #0
 8005c48:	232d      	movlt	r3, #45	@ 0x2d
 8005c4a:	700b      	strb	r3, [r1, #0]
 8005c4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c4e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005c52:	4691      	mov	r9, r2
 8005c54:	f023 0820 	bic.w	r8, r3, #32
 8005c58:	bfbc      	itt	lt
 8005c5a:	4632      	movlt	r2, r6
 8005c5c:	4616      	movlt	r6, r2
 8005c5e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c62:	d005      	beq.n	8005c70 <__cvt+0x42>
 8005c64:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005c68:	d100      	bne.n	8005c6c <__cvt+0x3e>
 8005c6a:	3401      	adds	r4, #1
 8005c6c:	2102      	movs	r1, #2
 8005c6e:	e000      	b.n	8005c72 <__cvt+0x44>
 8005c70:	2103      	movs	r1, #3
 8005c72:	ab03      	add	r3, sp, #12
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	ab02      	add	r3, sp, #8
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	ec47 6b10 	vmov	d0, r6, r7
 8005c7e:	4653      	mov	r3, sl
 8005c80:	4622      	mov	r2, r4
 8005c82:	f000 fe6d 	bl	8006960 <_dtoa_r>
 8005c86:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005c8a:	4605      	mov	r5, r0
 8005c8c:	d119      	bne.n	8005cc2 <__cvt+0x94>
 8005c8e:	f019 0f01 	tst.w	r9, #1
 8005c92:	d00e      	beq.n	8005cb2 <__cvt+0x84>
 8005c94:	eb00 0904 	add.w	r9, r0, r4
 8005c98:	2200      	movs	r2, #0
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	f7fa ff12 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ca4:	b108      	cbz	r0, 8005caa <__cvt+0x7c>
 8005ca6:	f8cd 900c 	str.w	r9, [sp, #12]
 8005caa:	2230      	movs	r2, #48	@ 0x30
 8005cac:	9b03      	ldr	r3, [sp, #12]
 8005cae:	454b      	cmp	r3, r9
 8005cb0:	d31e      	bcc.n	8005cf0 <__cvt+0xc2>
 8005cb2:	9b03      	ldr	r3, [sp, #12]
 8005cb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005cb6:	1b5b      	subs	r3, r3, r5
 8005cb8:	4628      	mov	r0, r5
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	b004      	add	sp, #16
 8005cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005cc6:	eb00 0904 	add.w	r9, r0, r4
 8005cca:	d1e5      	bne.n	8005c98 <__cvt+0x6a>
 8005ccc:	7803      	ldrb	r3, [r0, #0]
 8005cce:	2b30      	cmp	r3, #48	@ 0x30
 8005cd0:	d10a      	bne.n	8005ce8 <__cvt+0xba>
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	4639      	mov	r1, r7
 8005cda:	f7fa fef5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cde:	b918      	cbnz	r0, 8005ce8 <__cvt+0xba>
 8005ce0:	f1c4 0401 	rsb	r4, r4, #1
 8005ce4:	f8ca 4000 	str.w	r4, [sl]
 8005ce8:	f8da 3000 	ldr.w	r3, [sl]
 8005cec:	4499      	add	r9, r3
 8005cee:	e7d3      	b.n	8005c98 <__cvt+0x6a>
 8005cf0:	1c59      	adds	r1, r3, #1
 8005cf2:	9103      	str	r1, [sp, #12]
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	e7d9      	b.n	8005cac <__cvt+0x7e>

08005cf8 <__exponent>:
 8005cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cfa:	2900      	cmp	r1, #0
 8005cfc:	bfba      	itte	lt
 8005cfe:	4249      	neglt	r1, r1
 8005d00:	232d      	movlt	r3, #45	@ 0x2d
 8005d02:	232b      	movge	r3, #43	@ 0x2b
 8005d04:	2909      	cmp	r1, #9
 8005d06:	7002      	strb	r2, [r0, #0]
 8005d08:	7043      	strb	r3, [r0, #1]
 8005d0a:	dd29      	ble.n	8005d60 <__exponent+0x68>
 8005d0c:	f10d 0307 	add.w	r3, sp, #7
 8005d10:	461d      	mov	r5, r3
 8005d12:	270a      	movs	r7, #10
 8005d14:	461a      	mov	r2, r3
 8005d16:	fbb1 f6f7 	udiv	r6, r1, r7
 8005d1a:	fb07 1416 	mls	r4, r7, r6, r1
 8005d1e:	3430      	adds	r4, #48	@ 0x30
 8005d20:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005d24:	460c      	mov	r4, r1
 8005d26:	2c63      	cmp	r4, #99	@ 0x63
 8005d28:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d2c:	4631      	mov	r1, r6
 8005d2e:	dcf1      	bgt.n	8005d14 <__exponent+0x1c>
 8005d30:	3130      	adds	r1, #48	@ 0x30
 8005d32:	1e94      	subs	r4, r2, #2
 8005d34:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005d38:	1c41      	adds	r1, r0, #1
 8005d3a:	4623      	mov	r3, r4
 8005d3c:	42ab      	cmp	r3, r5
 8005d3e:	d30a      	bcc.n	8005d56 <__exponent+0x5e>
 8005d40:	f10d 0309 	add.w	r3, sp, #9
 8005d44:	1a9b      	subs	r3, r3, r2
 8005d46:	42ac      	cmp	r4, r5
 8005d48:	bf88      	it	hi
 8005d4a:	2300      	movhi	r3, #0
 8005d4c:	3302      	adds	r3, #2
 8005d4e:	4403      	add	r3, r0
 8005d50:	1a18      	subs	r0, r3, r0
 8005d52:	b003      	add	sp, #12
 8005d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d56:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005d5a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005d5e:	e7ed      	b.n	8005d3c <__exponent+0x44>
 8005d60:	2330      	movs	r3, #48	@ 0x30
 8005d62:	3130      	adds	r1, #48	@ 0x30
 8005d64:	7083      	strb	r3, [r0, #2]
 8005d66:	70c1      	strb	r1, [r0, #3]
 8005d68:	1d03      	adds	r3, r0, #4
 8005d6a:	e7f1      	b.n	8005d50 <__exponent+0x58>

08005d6c <_printf_float>:
 8005d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d70:	b08d      	sub	sp, #52	@ 0x34
 8005d72:	460c      	mov	r4, r1
 8005d74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005d78:	4616      	mov	r6, r2
 8005d7a:	461f      	mov	r7, r3
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	f000 fcef 	bl	8006760 <_localeconv_r>
 8005d82:	6803      	ldr	r3, [r0, #0]
 8005d84:	9304      	str	r3, [sp, #16]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fa fa72 	bl	8000270 <strlen>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d90:	f8d8 3000 	ldr.w	r3, [r8]
 8005d94:	9005      	str	r0, [sp, #20]
 8005d96:	3307      	adds	r3, #7
 8005d98:	f023 0307 	bic.w	r3, r3, #7
 8005d9c:	f103 0208 	add.w	r2, r3, #8
 8005da0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005da4:	f8d4 b000 	ldr.w	fp, [r4]
 8005da8:	f8c8 2000 	str.w	r2, [r8]
 8005dac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005db0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005db4:	9307      	str	r3, [sp, #28]
 8005db6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005dba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005dbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dc2:	4b9c      	ldr	r3, [pc, #624]	@ (8006034 <_printf_float+0x2c8>)
 8005dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc8:	f7fa feb0 	bl	8000b2c <__aeabi_dcmpun>
 8005dcc:	bb70      	cbnz	r0, 8005e2c <_printf_float+0xc0>
 8005dce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dd2:	4b98      	ldr	r3, [pc, #608]	@ (8006034 <_printf_float+0x2c8>)
 8005dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd8:	f7fa fe8a 	bl	8000af0 <__aeabi_dcmple>
 8005ddc:	bb30      	cbnz	r0, 8005e2c <_printf_float+0xc0>
 8005dde:	2200      	movs	r2, #0
 8005de0:	2300      	movs	r3, #0
 8005de2:	4640      	mov	r0, r8
 8005de4:	4649      	mov	r1, r9
 8005de6:	f7fa fe79 	bl	8000adc <__aeabi_dcmplt>
 8005dea:	b110      	cbz	r0, 8005df2 <_printf_float+0x86>
 8005dec:	232d      	movs	r3, #45	@ 0x2d
 8005dee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005df2:	4a91      	ldr	r2, [pc, #580]	@ (8006038 <_printf_float+0x2cc>)
 8005df4:	4b91      	ldr	r3, [pc, #580]	@ (800603c <_printf_float+0x2d0>)
 8005df6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005dfa:	bf94      	ite	ls
 8005dfc:	4690      	movls	r8, r2
 8005dfe:	4698      	movhi	r8, r3
 8005e00:	2303      	movs	r3, #3
 8005e02:	6123      	str	r3, [r4, #16]
 8005e04:	f02b 0304 	bic.w	r3, fp, #4
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	f04f 0900 	mov.w	r9, #0
 8005e0e:	9700      	str	r7, [sp, #0]
 8005e10:	4633      	mov	r3, r6
 8005e12:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005e14:	4621      	mov	r1, r4
 8005e16:	4628      	mov	r0, r5
 8005e18:	f000 f9d2 	bl	80061c0 <_printf_common>
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	f040 808d 	bne.w	8005f3c <_printf_float+0x1d0>
 8005e22:	f04f 30ff 	mov.w	r0, #4294967295
 8005e26:	b00d      	add	sp, #52	@ 0x34
 8005e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2c:	4642      	mov	r2, r8
 8005e2e:	464b      	mov	r3, r9
 8005e30:	4640      	mov	r0, r8
 8005e32:	4649      	mov	r1, r9
 8005e34:	f7fa fe7a 	bl	8000b2c <__aeabi_dcmpun>
 8005e38:	b140      	cbz	r0, 8005e4c <_printf_float+0xe0>
 8005e3a:	464b      	mov	r3, r9
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	bfbc      	itt	lt
 8005e40:	232d      	movlt	r3, #45	@ 0x2d
 8005e42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005e46:	4a7e      	ldr	r2, [pc, #504]	@ (8006040 <_printf_float+0x2d4>)
 8005e48:	4b7e      	ldr	r3, [pc, #504]	@ (8006044 <_printf_float+0x2d8>)
 8005e4a:	e7d4      	b.n	8005df6 <_printf_float+0x8a>
 8005e4c:	6863      	ldr	r3, [r4, #4]
 8005e4e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005e52:	9206      	str	r2, [sp, #24]
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	d13b      	bne.n	8005ed0 <_printf_float+0x164>
 8005e58:	2306      	movs	r3, #6
 8005e5a:	6063      	str	r3, [r4, #4]
 8005e5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005e60:	2300      	movs	r3, #0
 8005e62:	6022      	str	r2, [r4, #0]
 8005e64:	9303      	str	r3, [sp, #12]
 8005e66:	ab0a      	add	r3, sp, #40	@ 0x28
 8005e68:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005e6c:	ab09      	add	r3, sp, #36	@ 0x24
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	6861      	ldr	r1, [r4, #4]
 8005e72:	ec49 8b10 	vmov	d0, r8, r9
 8005e76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f7ff fed7 	bl	8005c2e <__cvt>
 8005e80:	9b06      	ldr	r3, [sp, #24]
 8005e82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005e84:	2b47      	cmp	r3, #71	@ 0x47
 8005e86:	4680      	mov	r8, r0
 8005e88:	d129      	bne.n	8005ede <_printf_float+0x172>
 8005e8a:	1cc8      	adds	r0, r1, #3
 8005e8c:	db02      	blt.n	8005e94 <_printf_float+0x128>
 8005e8e:	6863      	ldr	r3, [r4, #4]
 8005e90:	4299      	cmp	r1, r3
 8005e92:	dd41      	ble.n	8005f18 <_printf_float+0x1ac>
 8005e94:	f1aa 0a02 	sub.w	sl, sl, #2
 8005e98:	fa5f fa8a 	uxtb.w	sl, sl
 8005e9c:	3901      	subs	r1, #1
 8005e9e:	4652      	mov	r2, sl
 8005ea0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005ea4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ea6:	f7ff ff27 	bl	8005cf8 <__exponent>
 8005eaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005eac:	1813      	adds	r3, r2, r0
 8005eae:	2a01      	cmp	r2, #1
 8005eb0:	4681      	mov	r9, r0
 8005eb2:	6123      	str	r3, [r4, #16]
 8005eb4:	dc02      	bgt.n	8005ebc <_printf_float+0x150>
 8005eb6:	6822      	ldr	r2, [r4, #0]
 8005eb8:	07d2      	lsls	r2, r2, #31
 8005eba:	d501      	bpl.n	8005ec0 <_printf_float+0x154>
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	6123      	str	r3, [r4, #16]
 8005ec0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d0a2      	beq.n	8005e0e <_printf_float+0xa2>
 8005ec8:	232d      	movs	r3, #45	@ 0x2d
 8005eca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ece:	e79e      	b.n	8005e0e <_printf_float+0xa2>
 8005ed0:	9a06      	ldr	r2, [sp, #24]
 8005ed2:	2a47      	cmp	r2, #71	@ 0x47
 8005ed4:	d1c2      	bne.n	8005e5c <_printf_float+0xf0>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1c0      	bne.n	8005e5c <_printf_float+0xf0>
 8005eda:	2301      	movs	r3, #1
 8005edc:	e7bd      	b.n	8005e5a <_printf_float+0xee>
 8005ede:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ee2:	d9db      	bls.n	8005e9c <_printf_float+0x130>
 8005ee4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ee8:	d118      	bne.n	8005f1c <_printf_float+0x1b0>
 8005eea:	2900      	cmp	r1, #0
 8005eec:	6863      	ldr	r3, [r4, #4]
 8005eee:	dd0b      	ble.n	8005f08 <_printf_float+0x19c>
 8005ef0:	6121      	str	r1, [r4, #16]
 8005ef2:	b913      	cbnz	r3, 8005efa <_printf_float+0x18e>
 8005ef4:	6822      	ldr	r2, [r4, #0]
 8005ef6:	07d0      	lsls	r0, r2, #31
 8005ef8:	d502      	bpl.n	8005f00 <_printf_float+0x194>
 8005efa:	3301      	adds	r3, #1
 8005efc:	440b      	add	r3, r1
 8005efe:	6123      	str	r3, [r4, #16]
 8005f00:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005f02:	f04f 0900 	mov.w	r9, #0
 8005f06:	e7db      	b.n	8005ec0 <_printf_float+0x154>
 8005f08:	b913      	cbnz	r3, 8005f10 <_printf_float+0x1a4>
 8005f0a:	6822      	ldr	r2, [r4, #0]
 8005f0c:	07d2      	lsls	r2, r2, #31
 8005f0e:	d501      	bpl.n	8005f14 <_printf_float+0x1a8>
 8005f10:	3302      	adds	r3, #2
 8005f12:	e7f4      	b.n	8005efe <_printf_float+0x192>
 8005f14:	2301      	movs	r3, #1
 8005f16:	e7f2      	b.n	8005efe <_printf_float+0x192>
 8005f18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005f1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f1e:	4299      	cmp	r1, r3
 8005f20:	db05      	blt.n	8005f2e <_printf_float+0x1c2>
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	6121      	str	r1, [r4, #16]
 8005f26:	07d8      	lsls	r0, r3, #31
 8005f28:	d5ea      	bpl.n	8005f00 <_printf_float+0x194>
 8005f2a:	1c4b      	adds	r3, r1, #1
 8005f2c:	e7e7      	b.n	8005efe <_printf_float+0x192>
 8005f2e:	2900      	cmp	r1, #0
 8005f30:	bfd4      	ite	le
 8005f32:	f1c1 0202 	rsble	r2, r1, #2
 8005f36:	2201      	movgt	r2, #1
 8005f38:	4413      	add	r3, r2
 8005f3a:	e7e0      	b.n	8005efe <_printf_float+0x192>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	055a      	lsls	r2, r3, #21
 8005f40:	d407      	bmi.n	8005f52 <_printf_float+0x1e6>
 8005f42:	6923      	ldr	r3, [r4, #16]
 8005f44:	4642      	mov	r2, r8
 8005f46:	4631      	mov	r1, r6
 8005f48:	4628      	mov	r0, r5
 8005f4a:	47b8      	blx	r7
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	d12b      	bne.n	8005fa8 <_printf_float+0x23c>
 8005f50:	e767      	b.n	8005e22 <_printf_float+0xb6>
 8005f52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f56:	f240 80dd 	bls.w	8006114 <_printf_float+0x3a8>
 8005f5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2300      	movs	r3, #0
 8005f62:	f7fa fdb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	d033      	beq.n	8005fd2 <_printf_float+0x266>
 8005f6a:	4a37      	ldr	r2, [pc, #220]	@ (8006048 <_printf_float+0x2dc>)
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	4631      	mov	r1, r6
 8005f70:	4628      	mov	r0, r5
 8005f72:	47b8      	blx	r7
 8005f74:	3001      	adds	r0, #1
 8005f76:	f43f af54 	beq.w	8005e22 <_printf_float+0xb6>
 8005f7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005f7e:	4543      	cmp	r3, r8
 8005f80:	db02      	blt.n	8005f88 <_printf_float+0x21c>
 8005f82:	6823      	ldr	r3, [r4, #0]
 8005f84:	07d8      	lsls	r0, r3, #31
 8005f86:	d50f      	bpl.n	8005fa8 <_printf_float+0x23c>
 8005f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f8c:	4631      	mov	r1, r6
 8005f8e:	4628      	mov	r0, r5
 8005f90:	47b8      	blx	r7
 8005f92:	3001      	adds	r0, #1
 8005f94:	f43f af45 	beq.w	8005e22 <_printf_float+0xb6>
 8005f98:	f04f 0900 	mov.w	r9, #0
 8005f9c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005fa0:	f104 0a1a 	add.w	sl, r4, #26
 8005fa4:	45c8      	cmp	r8, r9
 8005fa6:	dc09      	bgt.n	8005fbc <_printf_float+0x250>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	079b      	lsls	r3, r3, #30
 8005fac:	f100 8103 	bmi.w	80061b6 <_printf_float+0x44a>
 8005fb0:	68e0      	ldr	r0, [r4, #12]
 8005fb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fb4:	4298      	cmp	r0, r3
 8005fb6:	bfb8      	it	lt
 8005fb8:	4618      	movlt	r0, r3
 8005fba:	e734      	b.n	8005e26 <_printf_float+0xba>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	4652      	mov	r2, sl
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	47b8      	blx	r7
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	f43f af2b 	beq.w	8005e22 <_printf_float+0xb6>
 8005fcc:	f109 0901 	add.w	r9, r9, #1
 8005fd0:	e7e8      	b.n	8005fa4 <_printf_float+0x238>
 8005fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	dc39      	bgt.n	800604c <_printf_float+0x2e0>
 8005fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8006048 <_printf_float+0x2dc>)
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4631      	mov	r1, r6
 8005fde:	4628      	mov	r0, r5
 8005fe0:	47b8      	blx	r7
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	f43f af1d 	beq.w	8005e22 <_printf_float+0xb6>
 8005fe8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005fec:	ea59 0303 	orrs.w	r3, r9, r3
 8005ff0:	d102      	bne.n	8005ff8 <_printf_float+0x28c>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	07d9      	lsls	r1, r3, #31
 8005ff6:	d5d7      	bpl.n	8005fa8 <_printf_float+0x23c>
 8005ff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	4628      	mov	r0, r5
 8006000:	47b8      	blx	r7
 8006002:	3001      	adds	r0, #1
 8006004:	f43f af0d 	beq.w	8005e22 <_printf_float+0xb6>
 8006008:	f04f 0a00 	mov.w	sl, #0
 800600c:	f104 0b1a 	add.w	fp, r4, #26
 8006010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006012:	425b      	negs	r3, r3
 8006014:	4553      	cmp	r3, sl
 8006016:	dc01      	bgt.n	800601c <_printf_float+0x2b0>
 8006018:	464b      	mov	r3, r9
 800601a:	e793      	b.n	8005f44 <_printf_float+0x1d8>
 800601c:	2301      	movs	r3, #1
 800601e:	465a      	mov	r2, fp
 8006020:	4631      	mov	r1, r6
 8006022:	4628      	mov	r0, r5
 8006024:	47b8      	blx	r7
 8006026:	3001      	adds	r0, #1
 8006028:	f43f aefb 	beq.w	8005e22 <_printf_float+0xb6>
 800602c:	f10a 0a01 	add.w	sl, sl, #1
 8006030:	e7ee      	b.n	8006010 <_printf_float+0x2a4>
 8006032:	bf00      	nop
 8006034:	7fefffff 	.word	0x7fefffff
 8006038:	08008954 	.word	0x08008954
 800603c:	08008958 	.word	0x08008958
 8006040:	0800895c 	.word	0x0800895c
 8006044:	08008960 	.word	0x08008960
 8006048:	08008964 	.word	0x08008964
 800604c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800604e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006052:	4553      	cmp	r3, sl
 8006054:	bfa8      	it	ge
 8006056:	4653      	movge	r3, sl
 8006058:	2b00      	cmp	r3, #0
 800605a:	4699      	mov	r9, r3
 800605c:	dc36      	bgt.n	80060cc <_printf_float+0x360>
 800605e:	f04f 0b00 	mov.w	fp, #0
 8006062:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006066:	f104 021a 	add.w	r2, r4, #26
 800606a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800606c:	9306      	str	r3, [sp, #24]
 800606e:	eba3 0309 	sub.w	r3, r3, r9
 8006072:	455b      	cmp	r3, fp
 8006074:	dc31      	bgt.n	80060da <_printf_float+0x36e>
 8006076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006078:	459a      	cmp	sl, r3
 800607a:	dc3a      	bgt.n	80060f2 <_printf_float+0x386>
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	07da      	lsls	r2, r3, #31
 8006080:	d437      	bmi.n	80060f2 <_printf_float+0x386>
 8006082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006084:	ebaa 0903 	sub.w	r9, sl, r3
 8006088:	9b06      	ldr	r3, [sp, #24]
 800608a:	ebaa 0303 	sub.w	r3, sl, r3
 800608e:	4599      	cmp	r9, r3
 8006090:	bfa8      	it	ge
 8006092:	4699      	movge	r9, r3
 8006094:	f1b9 0f00 	cmp.w	r9, #0
 8006098:	dc33      	bgt.n	8006102 <_printf_float+0x396>
 800609a:	f04f 0800 	mov.w	r8, #0
 800609e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060a2:	f104 0b1a 	add.w	fp, r4, #26
 80060a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060a8:	ebaa 0303 	sub.w	r3, sl, r3
 80060ac:	eba3 0309 	sub.w	r3, r3, r9
 80060b0:	4543      	cmp	r3, r8
 80060b2:	f77f af79 	ble.w	8005fa8 <_printf_float+0x23c>
 80060b6:	2301      	movs	r3, #1
 80060b8:	465a      	mov	r2, fp
 80060ba:	4631      	mov	r1, r6
 80060bc:	4628      	mov	r0, r5
 80060be:	47b8      	blx	r7
 80060c0:	3001      	adds	r0, #1
 80060c2:	f43f aeae 	beq.w	8005e22 <_printf_float+0xb6>
 80060c6:	f108 0801 	add.w	r8, r8, #1
 80060ca:	e7ec      	b.n	80060a6 <_printf_float+0x33a>
 80060cc:	4642      	mov	r2, r8
 80060ce:	4631      	mov	r1, r6
 80060d0:	4628      	mov	r0, r5
 80060d2:	47b8      	blx	r7
 80060d4:	3001      	adds	r0, #1
 80060d6:	d1c2      	bne.n	800605e <_printf_float+0x2f2>
 80060d8:	e6a3      	b.n	8005e22 <_printf_float+0xb6>
 80060da:	2301      	movs	r3, #1
 80060dc:	4631      	mov	r1, r6
 80060de:	4628      	mov	r0, r5
 80060e0:	9206      	str	r2, [sp, #24]
 80060e2:	47b8      	blx	r7
 80060e4:	3001      	adds	r0, #1
 80060e6:	f43f ae9c 	beq.w	8005e22 <_printf_float+0xb6>
 80060ea:	9a06      	ldr	r2, [sp, #24]
 80060ec:	f10b 0b01 	add.w	fp, fp, #1
 80060f0:	e7bb      	b.n	800606a <_printf_float+0x2fe>
 80060f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060f6:	4631      	mov	r1, r6
 80060f8:	4628      	mov	r0, r5
 80060fa:	47b8      	blx	r7
 80060fc:	3001      	adds	r0, #1
 80060fe:	d1c0      	bne.n	8006082 <_printf_float+0x316>
 8006100:	e68f      	b.n	8005e22 <_printf_float+0xb6>
 8006102:	9a06      	ldr	r2, [sp, #24]
 8006104:	464b      	mov	r3, r9
 8006106:	4442      	add	r2, r8
 8006108:	4631      	mov	r1, r6
 800610a:	4628      	mov	r0, r5
 800610c:	47b8      	blx	r7
 800610e:	3001      	adds	r0, #1
 8006110:	d1c3      	bne.n	800609a <_printf_float+0x32e>
 8006112:	e686      	b.n	8005e22 <_printf_float+0xb6>
 8006114:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006118:	f1ba 0f01 	cmp.w	sl, #1
 800611c:	dc01      	bgt.n	8006122 <_printf_float+0x3b6>
 800611e:	07db      	lsls	r3, r3, #31
 8006120:	d536      	bpl.n	8006190 <_printf_float+0x424>
 8006122:	2301      	movs	r3, #1
 8006124:	4642      	mov	r2, r8
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	47b8      	blx	r7
 800612c:	3001      	adds	r0, #1
 800612e:	f43f ae78 	beq.w	8005e22 <_printf_float+0xb6>
 8006132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006136:	4631      	mov	r1, r6
 8006138:	4628      	mov	r0, r5
 800613a:	47b8      	blx	r7
 800613c:	3001      	adds	r0, #1
 800613e:	f43f ae70 	beq.w	8005e22 <_printf_float+0xb6>
 8006142:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006146:	2200      	movs	r2, #0
 8006148:	2300      	movs	r3, #0
 800614a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800614e:	f7fa fcbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006152:	b9c0      	cbnz	r0, 8006186 <_printf_float+0x41a>
 8006154:	4653      	mov	r3, sl
 8006156:	f108 0201 	add.w	r2, r8, #1
 800615a:	4631      	mov	r1, r6
 800615c:	4628      	mov	r0, r5
 800615e:	47b8      	blx	r7
 8006160:	3001      	adds	r0, #1
 8006162:	d10c      	bne.n	800617e <_printf_float+0x412>
 8006164:	e65d      	b.n	8005e22 <_printf_float+0xb6>
 8006166:	2301      	movs	r3, #1
 8006168:	465a      	mov	r2, fp
 800616a:	4631      	mov	r1, r6
 800616c:	4628      	mov	r0, r5
 800616e:	47b8      	blx	r7
 8006170:	3001      	adds	r0, #1
 8006172:	f43f ae56 	beq.w	8005e22 <_printf_float+0xb6>
 8006176:	f108 0801 	add.w	r8, r8, #1
 800617a:	45d0      	cmp	r8, sl
 800617c:	dbf3      	blt.n	8006166 <_printf_float+0x3fa>
 800617e:	464b      	mov	r3, r9
 8006180:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006184:	e6df      	b.n	8005f46 <_printf_float+0x1da>
 8006186:	f04f 0800 	mov.w	r8, #0
 800618a:	f104 0b1a 	add.w	fp, r4, #26
 800618e:	e7f4      	b.n	800617a <_printf_float+0x40e>
 8006190:	2301      	movs	r3, #1
 8006192:	4642      	mov	r2, r8
 8006194:	e7e1      	b.n	800615a <_printf_float+0x3ee>
 8006196:	2301      	movs	r3, #1
 8006198:	464a      	mov	r2, r9
 800619a:	4631      	mov	r1, r6
 800619c:	4628      	mov	r0, r5
 800619e:	47b8      	blx	r7
 80061a0:	3001      	adds	r0, #1
 80061a2:	f43f ae3e 	beq.w	8005e22 <_printf_float+0xb6>
 80061a6:	f108 0801 	add.w	r8, r8, #1
 80061aa:	68e3      	ldr	r3, [r4, #12]
 80061ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80061ae:	1a5b      	subs	r3, r3, r1
 80061b0:	4543      	cmp	r3, r8
 80061b2:	dcf0      	bgt.n	8006196 <_printf_float+0x42a>
 80061b4:	e6fc      	b.n	8005fb0 <_printf_float+0x244>
 80061b6:	f04f 0800 	mov.w	r8, #0
 80061ba:	f104 0919 	add.w	r9, r4, #25
 80061be:	e7f4      	b.n	80061aa <_printf_float+0x43e>

080061c0 <_printf_common>:
 80061c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c4:	4616      	mov	r6, r2
 80061c6:	4698      	mov	r8, r3
 80061c8:	688a      	ldr	r2, [r1, #8]
 80061ca:	690b      	ldr	r3, [r1, #16]
 80061cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061d0:	4293      	cmp	r3, r2
 80061d2:	bfb8      	it	lt
 80061d4:	4613      	movlt	r3, r2
 80061d6:	6033      	str	r3, [r6, #0]
 80061d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061dc:	4607      	mov	r7, r0
 80061de:	460c      	mov	r4, r1
 80061e0:	b10a      	cbz	r2, 80061e6 <_printf_common+0x26>
 80061e2:	3301      	adds	r3, #1
 80061e4:	6033      	str	r3, [r6, #0]
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	0699      	lsls	r1, r3, #26
 80061ea:	bf42      	ittt	mi
 80061ec:	6833      	ldrmi	r3, [r6, #0]
 80061ee:	3302      	addmi	r3, #2
 80061f0:	6033      	strmi	r3, [r6, #0]
 80061f2:	6825      	ldr	r5, [r4, #0]
 80061f4:	f015 0506 	ands.w	r5, r5, #6
 80061f8:	d106      	bne.n	8006208 <_printf_common+0x48>
 80061fa:	f104 0a19 	add.w	sl, r4, #25
 80061fe:	68e3      	ldr	r3, [r4, #12]
 8006200:	6832      	ldr	r2, [r6, #0]
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	42ab      	cmp	r3, r5
 8006206:	dc26      	bgt.n	8006256 <_printf_common+0x96>
 8006208:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800620c:	6822      	ldr	r2, [r4, #0]
 800620e:	3b00      	subs	r3, #0
 8006210:	bf18      	it	ne
 8006212:	2301      	movne	r3, #1
 8006214:	0692      	lsls	r2, r2, #26
 8006216:	d42b      	bmi.n	8006270 <_printf_common+0xb0>
 8006218:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800621c:	4641      	mov	r1, r8
 800621e:	4638      	mov	r0, r7
 8006220:	47c8      	blx	r9
 8006222:	3001      	adds	r0, #1
 8006224:	d01e      	beq.n	8006264 <_printf_common+0xa4>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	6922      	ldr	r2, [r4, #16]
 800622a:	f003 0306 	and.w	r3, r3, #6
 800622e:	2b04      	cmp	r3, #4
 8006230:	bf02      	ittt	eq
 8006232:	68e5      	ldreq	r5, [r4, #12]
 8006234:	6833      	ldreq	r3, [r6, #0]
 8006236:	1aed      	subeq	r5, r5, r3
 8006238:	68a3      	ldr	r3, [r4, #8]
 800623a:	bf0c      	ite	eq
 800623c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006240:	2500      	movne	r5, #0
 8006242:	4293      	cmp	r3, r2
 8006244:	bfc4      	itt	gt
 8006246:	1a9b      	subgt	r3, r3, r2
 8006248:	18ed      	addgt	r5, r5, r3
 800624a:	2600      	movs	r6, #0
 800624c:	341a      	adds	r4, #26
 800624e:	42b5      	cmp	r5, r6
 8006250:	d11a      	bne.n	8006288 <_printf_common+0xc8>
 8006252:	2000      	movs	r0, #0
 8006254:	e008      	b.n	8006268 <_printf_common+0xa8>
 8006256:	2301      	movs	r3, #1
 8006258:	4652      	mov	r2, sl
 800625a:	4641      	mov	r1, r8
 800625c:	4638      	mov	r0, r7
 800625e:	47c8      	blx	r9
 8006260:	3001      	adds	r0, #1
 8006262:	d103      	bne.n	800626c <_printf_common+0xac>
 8006264:	f04f 30ff 	mov.w	r0, #4294967295
 8006268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626c:	3501      	adds	r5, #1
 800626e:	e7c6      	b.n	80061fe <_printf_common+0x3e>
 8006270:	18e1      	adds	r1, r4, r3
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	2030      	movs	r0, #48	@ 0x30
 8006276:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800627a:	4422      	add	r2, r4
 800627c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006280:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006284:	3302      	adds	r3, #2
 8006286:	e7c7      	b.n	8006218 <_printf_common+0x58>
 8006288:	2301      	movs	r3, #1
 800628a:	4622      	mov	r2, r4
 800628c:	4641      	mov	r1, r8
 800628e:	4638      	mov	r0, r7
 8006290:	47c8      	blx	r9
 8006292:	3001      	adds	r0, #1
 8006294:	d0e6      	beq.n	8006264 <_printf_common+0xa4>
 8006296:	3601      	adds	r6, #1
 8006298:	e7d9      	b.n	800624e <_printf_common+0x8e>
	...

0800629c <_printf_i>:
 800629c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062a0:	7e0f      	ldrb	r7, [r1, #24]
 80062a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062a4:	2f78      	cmp	r7, #120	@ 0x78
 80062a6:	4691      	mov	r9, r2
 80062a8:	4680      	mov	r8, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	469a      	mov	sl, r3
 80062ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062b2:	d807      	bhi.n	80062c4 <_printf_i+0x28>
 80062b4:	2f62      	cmp	r7, #98	@ 0x62
 80062b6:	d80a      	bhi.n	80062ce <_printf_i+0x32>
 80062b8:	2f00      	cmp	r7, #0
 80062ba:	f000 80d2 	beq.w	8006462 <_printf_i+0x1c6>
 80062be:	2f58      	cmp	r7, #88	@ 0x58
 80062c0:	f000 80b9 	beq.w	8006436 <_printf_i+0x19a>
 80062c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062cc:	e03a      	b.n	8006344 <_printf_i+0xa8>
 80062ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062d2:	2b15      	cmp	r3, #21
 80062d4:	d8f6      	bhi.n	80062c4 <_printf_i+0x28>
 80062d6:	a101      	add	r1, pc, #4	@ (adr r1, 80062dc <_printf_i+0x40>)
 80062d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062dc:	08006335 	.word	0x08006335
 80062e0:	08006349 	.word	0x08006349
 80062e4:	080062c5 	.word	0x080062c5
 80062e8:	080062c5 	.word	0x080062c5
 80062ec:	080062c5 	.word	0x080062c5
 80062f0:	080062c5 	.word	0x080062c5
 80062f4:	08006349 	.word	0x08006349
 80062f8:	080062c5 	.word	0x080062c5
 80062fc:	080062c5 	.word	0x080062c5
 8006300:	080062c5 	.word	0x080062c5
 8006304:	080062c5 	.word	0x080062c5
 8006308:	08006449 	.word	0x08006449
 800630c:	08006373 	.word	0x08006373
 8006310:	08006403 	.word	0x08006403
 8006314:	080062c5 	.word	0x080062c5
 8006318:	080062c5 	.word	0x080062c5
 800631c:	0800646b 	.word	0x0800646b
 8006320:	080062c5 	.word	0x080062c5
 8006324:	08006373 	.word	0x08006373
 8006328:	080062c5 	.word	0x080062c5
 800632c:	080062c5 	.word	0x080062c5
 8006330:	0800640b 	.word	0x0800640b
 8006334:	6833      	ldr	r3, [r6, #0]
 8006336:	1d1a      	adds	r2, r3, #4
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6032      	str	r2, [r6, #0]
 800633c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006340:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006344:	2301      	movs	r3, #1
 8006346:	e09d      	b.n	8006484 <_printf_i+0x1e8>
 8006348:	6833      	ldr	r3, [r6, #0]
 800634a:	6820      	ldr	r0, [r4, #0]
 800634c:	1d19      	adds	r1, r3, #4
 800634e:	6031      	str	r1, [r6, #0]
 8006350:	0606      	lsls	r6, r0, #24
 8006352:	d501      	bpl.n	8006358 <_printf_i+0xbc>
 8006354:	681d      	ldr	r5, [r3, #0]
 8006356:	e003      	b.n	8006360 <_printf_i+0xc4>
 8006358:	0645      	lsls	r5, r0, #25
 800635a:	d5fb      	bpl.n	8006354 <_printf_i+0xb8>
 800635c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006360:	2d00      	cmp	r5, #0
 8006362:	da03      	bge.n	800636c <_printf_i+0xd0>
 8006364:	232d      	movs	r3, #45	@ 0x2d
 8006366:	426d      	negs	r5, r5
 8006368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800636c:	4859      	ldr	r0, [pc, #356]	@ (80064d4 <_printf_i+0x238>)
 800636e:	230a      	movs	r3, #10
 8006370:	e011      	b.n	8006396 <_printf_i+0xfa>
 8006372:	6821      	ldr	r1, [r4, #0]
 8006374:	6833      	ldr	r3, [r6, #0]
 8006376:	0608      	lsls	r0, r1, #24
 8006378:	f853 5b04 	ldr.w	r5, [r3], #4
 800637c:	d402      	bmi.n	8006384 <_printf_i+0xe8>
 800637e:	0649      	lsls	r1, r1, #25
 8006380:	bf48      	it	mi
 8006382:	b2ad      	uxthmi	r5, r5
 8006384:	2f6f      	cmp	r7, #111	@ 0x6f
 8006386:	4853      	ldr	r0, [pc, #332]	@ (80064d4 <_printf_i+0x238>)
 8006388:	6033      	str	r3, [r6, #0]
 800638a:	bf14      	ite	ne
 800638c:	230a      	movne	r3, #10
 800638e:	2308      	moveq	r3, #8
 8006390:	2100      	movs	r1, #0
 8006392:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006396:	6866      	ldr	r6, [r4, #4]
 8006398:	60a6      	str	r6, [r4, #8]
 800639a:	2e00      	cmp	r6, #0
 800639c:	bfa2      	ittt	ge
 800639e:	6821      	ldrge	r1, [r4, #0]
 80063a0:	f021 0104 	bicge.w	r1, r1, #4
 80063a4:	6021      	strge	r1, [r4, #0]
 80063a6:	b90d      	cbnz	r5, 80063ac <_printf_i+0x110>
 80063a8:	2e00      	cmp	r6, #0
 80063aa:	d04b      	beq.n	8006444 <_printf_i+0x1a8>
 80063ac:	4616      	mov	r6, r2
 80063ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80063b2:	fb03 5711 	mls	r7, r3, r1, r5
 80063b6:	5dc7      	ldrb	r7, [r0, r7]
 80063b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063bc:	462f      	mov	r7, r5
 80063be:	42bb      	cmp	r3, r7
 80063c0:	460d      	mov	r5, r1
 80063c2:	d9f4      	bls.n	80063ae <_printf_i+0x112>
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d10b      	bne.n	80063e0 <_printf_i+0x144>
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	07df      	lsls	r7, r3, #31
 80063cc:	d508      	bpl.n	80063e0 <_printf_i+0x144>
 80063ce:	6923      	ldr	r3, [r4, #16]
 80063d0:	6861      	ldr	r1, [r4, #4]
 80063d2:	4299      	cmp	r1, r3
 80063d4:	bfde      	ittt	le
 80063d6:	2330      	movle	r3, #48	@ 0x30
 80063d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063e0:	1b92      	subs	r2, r2, r6
 80063e2:	6122      	str	r2, [r4, #16]
 80063e4:	f8cd a000 	str.w	sl, [sp]
 80063e8:	464b      	mov	r3, r9
 80063ea:	aa03      	add	r2, sp, #12
 80063ec:	4621      	mov	r1, r4
 80063ee:	4640      	mov	r0, r8
 80063f0:	f7ff fee6 	bl	80061c0 <_printf_common>
 80063f4:	3001      	adds	r0, #1
 80063f6:	d14a      	bne.n	800648e <_printf_i+0x1f2>
 80063f8:	f04f 30ff 	mov.w	r0, #4294967295
 80063fc:	b004      	add	sp, #16
 80063fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	f043 0320 	orr.w	r3, r3, #32
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	4833      	ldr	r0, [pc, #204]	@ (80064d8 <_printf_i+0x23c>)
 800640c:	2778      	movs	r7, #120	@ 0x78
 800640e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	6831      	ldr	r1, [r6, #0]
 8006416:	061f      	lsls	r7, r3, #24
 8006418:	f851 5b04 	ldr.w	r5, [r1], #4
 800641c:	d402      	bmi.n	8006424 <_printf_i+0x188>
 800641e:	065f      	lsls	r7, r3, #25
 8006420:	bf48      	it	mi
 8006422:	b2ad      	uxthmi	r5, r5
 8006424:	6031      	str	r1, [r6, #0]
 8006426:	07d9      	lsls	r1, r3, #31
 8006428:	bf44      	itt	mi
 800642a:	f043 0320 	orrmi.w	r3, r3, #32
 800642e:	6023      	strmi	r3, [r4, #0]
 8006430:	b11d      	cbz	r5, 800643a <_printf_i+0x19e>
 8006432:	2310      	movs	r3, #16
 8006434:	e7ac      	b.n	8006390 <_printf_i+0xf4>
 8006436:	4827      	ldr	r0, [pc, #156]	@ (80064d4 <_printf_i+0x238>)
 8006438:	e7e9      	b.n	800640e <_printf_i+0x172>
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	f023 0320 	bic.w	r3, r3, #32
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	e7f6      	b.n	8006432 <_printf_i+0x196>
 8006444:	4616      	mov	r6, r2
 8006446:	e7bd      	b.n	80063c4 <_printf_i+0x128>
 8006448:	6833      	ldr	r3, [r6, #0]
 800644a:	6825      	ldr	r5, [r4, #0]
 800644c:	6961      	ldr	r1, [r4, #20]
 800644e:	1d18      	adds	r0, r3, #4
 8006450:	6030      	str	r0, [r6, #0]
 8006452:	062e      	lsls	r6, r5, #24
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	d501      	bpl.n	800645c <_printf_i+0x1c0>
 8006458:	6019      	str	r1, [r3, #0]
 800645a:	e002      	b.n	8006462 <_printf_i+0x1c6>
 800645c:	0668      	lsls	r0, r5, #25
 800645e:	d5fb      	bpl.n	8006458 <_printf_i+0x1bc>
 8006460:	8019      	strh	r1, [r3, #0]
 8006462:	2300      	movs	r3, #0
 8006464:	6123      	str	r3, [r4, #16]
 8006466:	4616      	mov	r6, r2
 8006468:	e7bc      	b.n	80063e4 <_printf_i+0x148>
 800646a:	6833      	ldr	r3, [r6, #0]
 800646c:	1d1a      	adds	r2, r3, #4
 800646e:	6032      	str	r2, [r6, #0]
 8006470:	681e      	ldr	r6, [r3, #0]
 8006472:	6862      	ldr	r2, [r4, #4]
 8006474:	2100      	movs	r1, #0
 8006476:	4630      	mov	r0, r6
 8006478:	f7f9 feaa 	bl	80001d0 <memchr>
 800647c:	b108      	cbz	r0, 8006482 <_printf_i+0x1e6>
 800647e:	1b80      	subs	r0, r0, r6
 8006480:	6060      	str	r0, [r4, #4]
 8006482:	6863      	ldr	r3, [r4, #4]
 8006484:	6123      	str	r3, [r4, #16]
 8006486:	2300      	movs	r3, #0
 8006488:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800648c:	e7aa      	b.n	80063e4 <_printf_i+0x148>
 800648e:	6923      	ldr	r3, [r4, #16]
 8006490:	4632      	mov	r2, r6
 8006492:	4649      	mov	r1, r9
 8006494:	4640      	mov	r0, r8
 8006496:	47d0      	blx	sl
 8006498:	3001      	adds	r0, #1
 800649a:	d0ad      	beq.n	80063f8 <_printf_i+0x15c>
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	079b      	lsls	r3, r3, #30
 80064a0:	d413      	bmi.n	80064ca <_printf_i+0x22e>
 80064a2:	68e0      	ldr	r0, [r4, #12]
 80064a4:	9b03      	ldr	r3, [sp, #12]
 80064a6:	4298      	cmp	r0, r3
 80064a8:	bfb8      	it	lt
 80064aa:	4618      	movlt	r0, r3
 80064ac:	e7a6      	b.n	80063fc <_printf_i+0x160>
 80064ae:	2301      	movs	r3, #1
 80064b0:	4632      	mov	r2, r6
 80064b2:	4649      	mov	r1, r9
 80064b4:	4640      	mov	r0, r8
 80064b6:	47d0      	blx	sl
 80064b8:	3001      	adds	r0, #1
 80064ba:	d09d      	beq.n	80063f8 <_printf_i+0x15c>
 80064bc:	3501      	adds	r5, #1
 80064be:	68e3      	ldr	r3, [r4, #12]
 80064c0:	9903      	ldr	r1, [sp, #12]
 80064c2:	1a5b      	subs	r3, r3, r1
 80064c4:	42ab      	cmp	r3, r5
 80064c6:	dcf2      	bgt.n	80064ae <_printf_i+0x212>
 80064c8:	e7eb      	b.n	80064a2 <_printf_i+0x206>
 80064ca:	2500      	movs	r5, #0
 80064cc:	f104 0619 	add.w	r6, r4, #25
 80064d0:	e7f5      	b.n	80064be <_printf_i+0x222>
 80064d2:	bf00      	nop
 80064d4:	08008966 	.word	0x08008966
 80064d8:	08008977 	.word	0x08008977

080064dc <std>:
 80064dc:	2300      	movs	r3, #0
 80064de:	b510      	push	{r4, lr}
 80064e0:	4604      	mov	r4, r0
 80064e2:	e9c0 3300 	strd	r3, r3, [r0]
 80064e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064ea:	6083      	str	r3, [r0, #8]
 80064ec:	8181      	strh	r1, [r0, #12]
 80064ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80064f0:	81c2      	strh	r2, [r0, #14]
 80064f2:	6183      	str	r3, [r0, #24]
 80064f4:	4619      	mov	r1, r3
 80064f6:	2208      	movs	r2, #8
 80064f8:	305c      	adds	r0, #92	@ 0x5c
 80064fa:	f000 f928 	bl	800674e <memset>
 80064fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006534 <std+0x58>)
 8006500:	6263      	str	r3, [r4, #36]	@ 0x24
 8006502:	4b0d      	ldr	r3, [pc, #52]	@ (8006538 <std+0x5c>)
 8006504:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006506:	4b0d      	ldr	r3, [pc, #52]	@ (800653c <std+0x60>)
 8006508:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800650a:	4b0d      	ldr	r3, [pc, #52]	@ (8006540 <std+0x64>)
 800650c:	6323      	str	r3, [r4, #48]	@ 0x30
 800650e:	4b0d      	ldr	r3, [pc, #52]	@ (8006544 <std+0x68>)
 8006510:	6224      	str	r4, [r4, #32]
 8006512:	429c      	cmp	r4, r3
 8006514:	d006      	beq.n	8006524 <std+0x48>
 8006516:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800651a:	4294      	cmp	r4, r2
 800651c:	d002      	beq.n	8006524 <std+0x48>
 800651e:	33d0      	adds	r3, #208	@ 0xd0
 8006520:	429c      	cmp	r4, r3
 8006522:	d105      	bne.n	8006530 <std+0x54>
 8006524:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800652c:	f000 b98c 	b.w	8006848 <__retarget_lock_init_recursive>
 8006530:	bd10      	pop	{r4, pc}
 8006532:	bf00      	nop
 8006534:	080066c9 	.word	0x080066c9
 8006538:	080066eb 	.word	0x080066eb
 800653c:	08006723 	.word	0x08006723
 8006540:	08006747 	.word	0x08006747
 8006544:	20000418 	.word	0x20000418

08006548 <stdio_exit_handler>:
 8006548:	4a02      	ldr	r2, [pc, #8]	@ (8006554 <stdio_exit_handler+0xc>)
 800654a:	4903      	ldr	r1, [pc, #12]	@ (8006558 <stdio_exit_handler+0x10>)
 800654c:	4803      	ldr	r0, [pc, #12]	@ (800655c <stdio_exit_handler+0x14>)
 800654e:	f000 b869 	b.w	8006624 <_fwalk_sglue>
 8006552:	bf00      	nop
 8006554:	20000010 	.word	0x20000010
 8006558:	080081a5 	.word	0x080081a5
 800655c:	20000020 	.word	0x20000020

08006560 <cleanup_stdio>:
 8006560:	6841      	ldr	r1, [r0, #4]
 8006562:	4b0c      	ldr	r3, [pc, #48]	@ (8006594 <cleanup_stdio+0x34>)
 8006564:	4299      	cmp	r1, r3
 8006566:	b510      	push	{r4, lr}
 8006568:	4604      	mov	r4, r0
 800656a:	d001      	beq.n	8006570 <cleanup_stdio+0x10>
 800656c:	f001 fe1a 	bl	80081a4 <_fflush_r>
 8006570:	68a1      	ldr	r1, [r4, #8]
 8006572:	4b09      	ldr	r3, [pc, #36]	@ (8006598 <cleanup_stdio+0x38>)
 8006574:	4299      	cmp	r1, r3
 8006576:	d002      	beq.n	800657e <cleanup_stdio+0x1e>
 8006578:	4620      	mov	r0, r4
 800657a:	f001 fe13 	bl	80081a4 <_fflush_r>
 800657e:	68e1      	ldr	r1, [r4, #12]
 8006580:	4b06      	ldr	r3, [pc, #24]	@ (800659c <cleanup_stdio+0x3c>)
 8006582:	4299      	cmp	r1, r3
 8006584:	d004      	beq.n	8006590 <cleanup_stdio+0x30>
 8006586:	4620      	mov	r0, r4
 8006588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800658c:	f001 be0a 	b.w	80081a4 <_fflush_r>
 8006590:	bd10      	pop	{r4, pc}
 8006592:	bf00      	nop
 8006594:	20000418 	.word	0x20000418
 8006598:	20000480 	.word	0x20000480
 800659c:	200004e8 	.word	0x200004e8

080065a0 <global_stdio_init.part.0>:
 80065a0:	b510      	push	{r4, lr}
 80065a2:	4b0b      	ldr	r3, [pc, #44]	@ (80065d0 <global_stdio_init.part.0+0x30>)
 80065a4:	4c0b      	ldr	r4, [pc, #44]	@ (80065d4 <global_stdio_init.part.0+0x34>)
 80065a6:	4a0c      	ldr	r2, [pc, #48]	@ (80065d8 <global_stdio_init.part.0+0x38>)
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	4620      	mov	r0, r4
 80065ac:	2200      	movs	r2, #0
 80065ae:	2104      	movs	r1, #4
 80065b0:	f7ff ff94 	bl	80064dc <std>
 80065b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80065b8:	2201      	movs	r2, #1
 80065ba:	2109      	movs	r1, #9
 80065bc:	f7ff ff8e 	bl	80064dc <std>
 80065c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80065c4:	2202      	movs	r2, #2
 80065c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065ca:	2112      	movs	r1, #18
 80065cc:	f7ff bf86 	b.w	80064dc <std>
 80065d0:	20000550 	.word	0x20000550
 80065d4:	20000418 	.word	0x20000418
 80065d8:	08006549 	.word	0x08006549

080065dc <__sfp_lock_acquire>:
 80065dc:	4801      	ldr	r0, [pc, #4]	@ (80065e4 <__sfp_lock_acquire+0x8>)
 80065de:	f000 b934 	b.w	800684a <__retarget_lock_acquire_recursive>
 80065e2:	bf00      	nop
 80065e4:	20000559 	.word	0x20000559

080065e8 <__sfp_lock_release>:
 80065e8:	4801      	ldr	r0, [pc, #4]	@ (80065f0 <__sfp_lock_release+0x8>)
 80065ea:	f000 b92f 	b.w	800684c <__retarget_lock_release_recursive>
 80065ee:	bf00      	nop
 80065f0:	20000559 	.word	0x20000559

080065f4 <__sinit>:
 80065f4:	b510      	push	{r4, lr}
 80065f6:	4604      	mov	r4, r0
 80065f8:	f7ff fff0 	bl	80065dc <__sfp_lock_acquire>
 80065fc:	6a23      	ldr	r3, [r4, #32]
 80065fe:	b11b      	cbz	r3, 8006608 <__sinit+0x14>
 8006600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006604:	f7ff bff0 	b.w	80065e8 <__sfp_lock_release>
 8006608:	4b04      	ldr	r3, [pc, #16]	@ (800661c <__sinit+0x28>)
 800660a:	6223      	str	r3, [r4, #32]
 800660c:	4b04      	ldr	r3, [pc, #16]	@ (8006620 <__sinit+0x2c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1f5      	bne.n	8006600 <__sinit+0xc>
 8006614:	f7ff ffc4 	bl	80065a0 <global_stdio_init.part.0>
 8006618:	e7f2      	b.n	8006600 <__sinit+0xc>
 800661a:	bf00      	nop
 800661c:	08006561 	.word	0x08006561
 8006620:	20000550 	.word	0x20000550

08006624 <_fwalk_sglue>:
 8006624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006628:	4607      	mov	r7, r0
 800662a:	4688      	mov	r8, r1
 800662c:	4614      	mov	r4, r2
 800662e:	2600      	movs	r6, #0
 8006630:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006634:	f1b9 0901 	subs.w	r9, r9, #1
 8006638:	d505      	bpl.n	8006646 <_fwalk_sglue+0x22>
 800663a:	6824      	ldr	r4, [r4, #0]
 800663c:	2c00      	cmp	r4, #0
 800663e:	d1f7      	bne.n	8006630 <_fwalk_sglue+0xc>
 8006640:	4630      	mov	r0, r6
 8006642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006646:	89ab      	ldrh	r3, [r5, #12]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d907      	bls.n	800665c <_fwalk_sglue+0x38>
 800664c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006650:	3301      	adds	r3, #1
 8006652:	d003      	beq.n	800665c <_fwalk_sglue+0x38>
 8006654:	4629      	mov	r1, r5
 8006656:	4638      	mov	r0, r7
 8006658:	47c0      	blx	r8
 800665a:	4306      	orrs	r6, r0
 800665c:	3568      	adds	r5, #104	@ 0x68
 800665e:	e7e9      	b.n	8006634 <_fwalk_sglue+0x10>

08006660 <sniprintf>:
 8006660:	b40c      	push	{r2, r3}
 8006662:	b530      	push	{r4, r5, lr}
 8006664:	4b17      	ldr	r3, [pc, #92]	@ (80066c4 <sniprintf+0x64>)
 8006666:	1e0c      	subs	r4, r1, #0
 8006668:	681d      	ldr	r5, [r3, #0]
 800666a:	b09d      	sub	sp, #116	@ 0x74
 800666c:	da08      	bge.n	8006680 <sniprintf+0x20>
 800666e:	238b      	movs	r3, #139	@ 0x8b
 8006670:	602b      	str	r3, [r5, #0]
 8006672:	f04f 30ff 	mov.w	r0, #4294967295
 8006676:	b01d      	add	sp, #116	@ 0x74
 8006678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800667c:	b002      	add	sp, #8
 800667e:	4770      	bx	lr
 8006680:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006684:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006688:	bf14      	ite	ne
 800668a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800668e:	4623      	moveq	r3, r4
 8006690:	9304      	str	r3, [sp, #16]
 8006692:	9307      	str	r3, [sp, #28]
 8006694:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006698:	9002      	str	r0, [sp, #8]
 800669a:	9006      	str	r0, [sp, #24]
 800669c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80066a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80066a2:	ab21      	add	r3, sp, #132	@ 0x84
 80066a4:	a902      	add	r1, sp, #8
 80066a6:	4628      	mov	r0, r5
 80066a8:	9301      	str	r3, [sp, #4]
 80066aa:	f001 fbfb 	bl	8007ea4 <_svfiprintf_r>
 80066ae:	1c43      	adds	r3, r0, #1
 80066b0:	bfbc      	itt	lt
 80066b2:	238b      	movlt	r3, #139	@ 0x8b
 80066b4:	602b      	strlt	r3, [r5, #0]
 80066b6:	2c00      	cmp	r4, #0
 80066b8:	d0dd      	beq.n	8006676 <sniprintf+0x16>
 80066ba:	9b02      	ldr	r3, [sp, #8]
 80066bc:	2200      	movs	r2, #0
 80066be:	701a      	strb	r2, [r3, #0]
 80066c0:	e7d9      	b.n	8006676 <sniprintf+0x16>
 80066c2:	bf00      	nop
 80066c4:	2000001c 	.word	0x2000001c

080066c8 <__sread>:
 80066c8:	b510      	push	{r4, lr}
 80066ca:	460c      	mov	r4, r1
 80066cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d0:	f000 f86c 	bl	80067ac <_read_r>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	bfab      	itete	ge
 80066d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80066da:	89a3      	ldrhlt	r3, [r4, #12]
 80066dc:	181b      	addge	r3, r3, r0
 80066de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80066e2:	bfac      	ite	ge
 80066e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80066e6:	81a3      	strhlt	r3, [r4, #12]
 80066e8:	bd10      	pop	{r4, pc}

080066ea <__swrite>:
 80066ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ee:	461f      	mov	r7, r3
 80066f0:	898b      	ldrh	r3, [r1, #12]
 80066f2:	05db      	lsls	r3, r3, #23
 80066f4:	4605      	mov	r5, r0
 80066f6:	460c      	mov	r4, r1
 80066f8:	4616      	mov	r6, r2
 80066fa:	d505      	bpl.n	8006708 <__swrite+0x1e>
 80066fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006700:	2302      	movs	r3, #2
 8006702:	2200      	movs	r2, #0
 8006704:	f000 f840 	bl	8006788 <_lseek_r>
 8006708:	89a3      	ldrh	r3, [r4, #12]
 800670a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800670e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006712:	81a3      	strh	r3, [r4, #12]
 8006714:	4632      	mov	r2, r6
 8006716:	463b      	mov	r3, r7
 8006718:	4628      	mov	r0, r5
 800671a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800671e:	f000 b857 	b.w	80067d0 <_write_r>

08006722 <__sseek>:
 8006722:	b510      	push	{r4, lr}
 8006724:	460c      	mov	r4, r1
 8006726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800672a:	f000 f82d 	bl	8006788 <_lseek_r>
 800672e:	1c43      	adds	r3, r0, #1
 8006730:	89a3      	ldrh	r3, [r4, #12]
 8006732:	bf15      	itete	ne
 8006734:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006736:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800673a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800673e:	81a3      	strheq	r3, [r4, #12]
 8006740:	bf18      	it	ne
 8006742:	81a3      	strhne	r3, [r4, #12]
 8006744:	bd10      	pop	{r4, pc}

08006746 <__sclose>:
 8006746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800674a:	f000 b80d 	b.w	8006768 <_close_r>

0800674e <memset>:
 800674e:	4402      	add	r2, r0
 8006750:	4603      	mov	r3, r0
 8006752:	4293      	cmp	r3, r2
 8006754:	d100      	bne.n	8006758 <memset+0xa>
 8006756:	4770      	bx	lr
 8006758:	f803 1b01 	strb.w	r1, [r3], #1
 800675c:	e7f9      	b.n	8006752 <memset+0x4>
	...

08006760 <_localeconv_r>:
 8006760:	4800      	ldr	r0, [pc, #0]	@ (8006764 <_localeconv_r+0x4>)
 8006762:	4770      	bx	lr
 8006764:	2000015c 	.word	0x2000015c

08006768 <_close_r>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	4d06      	ldr	r5, [pc, #24]	@ (8006784 <_close_r+0x1c>)
 800676c:	2300      	movs	r3, #0
 800676e:	4604      	mov	r4, r0
 8006770:	4608      	mov	r0, r1
 8006772:	602b      	str	r3, [r5, #0]
 8006774:	f7fa fed0 	bl	8001518 <_close>
 8006778:	1c43      	adds	r3, r0, #1
 800677a:	d102      	bne.n	8006782 <_close_r+0x1a>
 800677c:	682b      	ldr	r3, [r5, #0]
 800677e:	b103      	cbz	r3, 8006782 <_close_r+0x1a>
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	bd38      	pop	{r3, r4, r5, pc}
 8006784:	20000554 	.word	0x20000554

08006788 <_lseek_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4d07      	ldr	r5, [pc, #28]	@ (80067a8 <_lseek_r+0x20>)
 800678c:	4604      	mov	r4, r0
 800678e:	4608      	mov	r0, r1
 8006790:	4611      	mov	r1, r2
 8006792:	2200      	movs	r2, #0
 8006794:	602a      	str	r2, [r5, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	f7fa fee5 	bl	8001566 <_lseek>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d102      	bne.n	80067a6 <_lseek_r+0x1e>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	b103      	cbz	r3, 80067a6 <_lseek_r+0x1e>
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	20000554 	.word	0x20000554

080067ac <_read_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4d07      	ldr	r5, [pc, #28]	@ (80067cc <_read_r+0x20>)
 80067b0:	4604      	mov	r4, r0
 80067b2:	4608      	mov	r0, r1
 80067b4:	4611      	mov	r1, r2
 80067b6:	2200      	movs	r2, #0
 80067b8:	602a      	str	r2, [r5, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f7fa fe73 	bl	80014a6 <_read>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d102      	bne.n	80067ca <_read_r+0x1e>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	b103      	cbz	r3, 80067ca <_read_r+0x1e>
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	20000554 	.word	0x20000554

080067d0 <_write_r>:
 80067d0:	b538      	push	{r3, r4, r5, lr}
 80067d2:	4d07      	ldr	r5, [pc, #28]	@ (80067f0 <_write_r+0x20>)
 80067d4:	4604      	mov	r4, r0
 80067d6:	4608      	mov	r0, r1
 80067d8:	4611      	mov	r1, r2
 80067da:	2200      	movs	r2, #0
 80067dc:	602a      	str	r2, [r5, #0]
 80067de:	461a      	mov	r2, r3
 80067e0:	f7fa fe7e 	bl	80014e0 <_write>
 80067e4:	1c43      	adds	r3, r0, #1
 80067e6:	d102      	bne.n	80067ee <_write_r+0x1e>
 80067e8:	682b      	ldr	r3, [r5, #0]
 80067ea:	b103      	cbz	r3, 80067ee <_write_r+0x1e>
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	bd38      	pop	{r3, r4, r5, pc}
 80067f0:	20000554 	.word	0x20000554

080067f4 <__errno>:
 80067f4:	4b01      	ldr	r3, [pc, #4]	@ (80067fc <__errno+0x8>)
 80067f6:	6818      	ldr	r0, [r3, #0]
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	2000001c 	.word	0x2000001c

08006800 <__libc_init_array>:
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	4d0d      	ldr	r5, [pc, #52]	@ (8006838 <__libc_init_array+0x38>)
 8006804:	4c0d      	ldr	r4, [pc, #52]	@ (800683c <__libc_init_array+0x3c>)
 8006806:	1b64      	subs	r4, r4, r5
 8006808:	10a4      	asrs	r4, r4, #2
 800680a:	2600      	movs	r6, #0
 800680c:	42a6      	cmp	r6, r4
 800680e:	d109      	bne.n	8006824 <__libc_init_array+0x24>
 8006810:	4d0b      	ldr	r5, [pc, #44]	@ (8006840 <__libc_init_array+0x40>)
 8006812:	4c0c      	ldr	r4, [pc, #48]	@ (8006844 <__libc_init_array+0x44>)
 8006814:	f002 f864 	bl	80088e0 <_init>
 8006818:	1b64      	subs	r4, r4, r5
 800681a:	10a4      	asrs	r4, r4, #2
 800681c:	2600      	movs	r6, #0
 800681e:	42a6      	cmp	r6, r4
 8006820:	d105      	bne.n	800682e <__libc_init_array+0x2e>
 8006822:	bd70      	pop	{r4, r5, r6, pc}
 8006824:	f855 3b04 	ldr.w	r3, [r5], #4
 8006828:	4798      	blx	r3
 800682a:	3601      	adds	r6, #1
 800682c:	e7ee      	b.n	800680c <__libc_init_array+0xc>
 800682e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006832:	4798      	blx	r3
 8006834:	3601      	adds	r6, #1
 8006836:	e7f2      	b.n	800681e <__libc_init_array+0x1e>
 8006838:	08008cd0 	.word	0x08008cd0
 800683c:	08008cd0 	.word	0x08008cd0
 8006840:	08008cd0 	.word	0x08008cd0
 8006844:	08008cd4 	.word	0x08008cd4

08006848 <__retarget_lock_init_recursive>:
 8006848:	4770      	bx	lr

0800684a <__retarget_lock_acquire_recursive>:
 800684a:	4770      	bx	lr

0800684c <__retarget_lock_release_recursive>:
 800684c:	4770      	bx	lr

0800684e <quorem>:
 800684e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006852:	6903      	ldr	r3, [r0, #16]
 8006854:	690c      	ldr	r4, [r1, #16]
 8006856:	42a3      	cmp	r3, r4
 8006858:	4607      	mov	r7, r0
 800685a:	db7e      	blt.n	800695a <quorem+0x10c>
 800685c:	3c01      	subs	r4, #1
 800685e:	f101 0814 	add.w	r8, r1, #20
 8006862:	00a3      	lsls	r3, r4, #2
 8006864:	f100 0514 	add.w	r5, r0, #20
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800686e:	9301      	str	r3, [sp, #4]
 8006870:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006874:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006878:	3301      	adds	r3, #1
 800687a:	429a      	cmp	r2, r3
 800687c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006880:	fbb2 f6f3 	udiv	r6, r2, r3
 8006884:	d32e      	bcc.n	80068e4 <quorem+0x96>
 8006886:	f04f 0a00 	mov.w	sl, #0
 800688a:	46c4      	mov	ip, r8
 800688c:	46ae      	mov	lr, r5
 800688e:	46d3      	mov	fp, sl
 8006890:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006894:	b298      	uxth	r0, r3
 8006896:	fb06 a000 	mla	r0, r6, r0, sl
 800689a:	0c02      	lsrs	r2, r0, #16
 800689c:	0c1b      	lsrs	r3, r3, #16
 800689e:	fb06 2303 	mla	r3, r6, r3, r2
 80068a2:	f8de 2000 	ldr.w	r2, [lr]
 80068a6:	b280      	uxth	r0, r0
 80068a8:	b292      	uxth	r2, r2
 80068aa:	1a12      	subs	r2, r2, r0
 80068ac:	445a      	add	r2, fp
 80068ae:	f8de 0000 	ldr.w	r0, [lr]
 80068b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80068bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80068c0:	b292      	uxth	r2, r2
 80068c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80068c6:	45e1      	cmp	r9, ip
 80068c8:	f84e 2b04 	str.w	r2, [lr], #4
 80068cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80068d0:	d2de      	bcs.n	8006890 <quorem+0x42>
 80068d2:	9b00      	ldr	r3, [sp, #0]
 80068d4:	58eb      	ldr	r3, [r5, r3]
 80068d6:	b92b      	cbnz	r3, 80068e4 <quorem+0x96>
 80068d8:	9b01      	ldr	r3, [sp, #4]
 80068da:	3b04      	subs	r3, #4
 80068dc:	429d      	cmp	r5, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	d32f      	bcc.n	8006942 <quorem+0xf4>
 80068e2:	613c      	str	r4, [r7, #16]
 80068e4:	4638      	mov	r0, r7
 80068e6:	f001 f979 	bl	8007bdc <__mcmp>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	db25      	blt.n	800693a <quorem+0xec>
 80068ee:	4629      	mov	r1, r5
 80068f0:	2000      	movs	r0, #0
 80068f2:	f858 2b04 	ldr.w	r2, [r8], #4
 80068f6:	f8d1 c000 	ldr.w	ip, [r1]
 80068fa:	fa1f fe82 	uxth.w	lr, r2
 80068fe:	fa1f f38c 	uxth.w	r3, ip
 8006902:	eba3 030e 	sub.w	r3, r3, lr
 8006906:	4403      	add	r3, r0
 8006908:	0c12      	lsrs	r2, r2, #16
 800690a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800690e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006912:	b29b      	uxth	r3, r3
 8006914:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006918:	45c1      	cmp	r9, r8
 800691a:	f841 3b04 	str.w	r3, [r1], #4
 800691e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006922:	d2e6      	bcs.n	80068f2 <quorem+0xa4>
 8006924:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006928:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800692c:	b922      	cbnz	r2, 8006938 <quorem+0xea>
 800692e:	3b04      	subs	r3, #4
 8006930:	429d      	cmp	r5, r3
 8006932:	461a      	mov	r2, r3
 8006934:	d30b      	bcc.n	800694e <quorem+0x100>
 8006936:	613c      	str	r4, [r7, #16]
 8006938:	3601      	adds	r6, #1
 800693a:	4630      	mov	r0, r6
 800693c:	b003      	add	sp, #12
 800693e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006942:	6812      	ldr	r2, [r2, #0]
 8006944:	3b04      	subs	r3, #4
 8006946:	2a00      	cmp	r2, #0
 8006948:	d1cb      	bne.n	80068e2 <quorem+0x94>
 800694a:	3c01      	subs	r4, #1
 800694c:	e7c6      	b.n	80068dc <quorem+0x8e>
 800694e:	6812      	ldr	r2, [r2, #0]
 8006950:	3b04      	subs	r3, #4
 8006952:	2a00      	cmp	r2, #0
 8006954:	d1ef      	bne.n	8006936 <quorem+0xe8>
 8006956:	3c01      	subs	r4, #1
 8006958:	e7ea      	b.n	8006930 <quorem+0xe2>
 800695a:	2000      	movs	r0, #0
 800695c:	e7ee      	b.n	800693c <quorem+0xee>
	...

08006960 <_dtoa_r>:
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	69c7      	ldr	r7, [r0, #28]
 8006966:	b099      	sub	sp, #100	@ 0x64
 8006968:	ed8d 0b02 	vstr	d0, [sp, #8]
 800696c:	ec55 4b10 	vmov	r4, r5, d0
 8006970:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006972:	9109      	str	r1, [sp, #36]	@ 0x24
 8006974:	4683      	mov	fp, r0
 8006976:	920e      	str	r2, [sp, #56]	@ 0x38
 8006978:	9313      	str	r3, [sp, #76]	@ 0x4c
 800697a:	b97f      	cbnz	r7, 800699c <_dtoa_r+0x3c>
 800697c:	2010      	movs	r0, #16
 800697e:	f000 fdfd 	bl	800757c <malloc>
 8006982:	4602      	mov	r2, r0
 8006984:	f8cb 001c 	str.w	r0, [fp, #28]
 8006988:	b920      	cbnz	r0, 8006994 <_dtoa_r+0x34>
 800698a:	4ba7      	ldr	r3, [pc, #668]	@ (8006c28 <_dtoa_r+0x2c8>)
 800698c:	21ef      	movs	r1, #239	@ 0xef
 800698e:	48a7      	ldr	r0, [pc, #668]	@ (8006c2c <_dtoa_r+0x2cc>)
 8006990:	f001 fc68 	bl	8008264 <__assert_func>
 8006994:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006998:	6007      	str	r7, [r0, #0]
 800699a:	60c7      	str	r7, [r0, #12]
 800699c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80069a0:	6819      	ldr	r1, [r3, #0]
 80069a2:	b159      	cbz	r1, 80069bc <_dtoa_r+0x5c>
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	604a      	str	r2, [r1, #4]
 80069a8:	2301      	movs	r3, #1
 80069aa:	4093      	lsls	r3, r2
 80069ac:	608b      	str	r3, [r1, #8]
 80069ae:	4658      	mov	r0, fp
 80069b0:	f000 feda 	bl	8007768 <_Bfree>
 80069b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]
 80069bc:	1e2b      	subs	r3, r5, #0
 80069be:	bfb9      	ittee	lt
 80069c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80069c4:	9303      	strlt	r3, [sp, #12]
 80069c6:	2300      	movge	r3, #0
 80069c8:	6033      	strge	r3, [r6, #0]
 80069ca:	9f03      	ldr	r7, [sp, #12]
 80069cc:	4b98      	ldr	r3, [pc, #608]	@ (8006c30 <_dtoa_r+0x2d0>)
 80069ce:	bfbc      	itt	lt
 80069d0:	2201      	movlt	r2, #1
 80069d2:	6032      	strlt	r2, [r6, #0]
 80069d4:	43bb      	bics	r3, r7
 80069d6:	d112      	bne.n	80069fe <_dtoa_r+0x9e>
 80069d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80069da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80069de:	6013      	str	r3, [r2, #0]
 80069e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80069e4:	4323      	orrs	r3, r4
 80069e6:	f000 854d 	beq.w	8007484 <_dtoa_r+0xb24>
 80069ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80069ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006c44 <_dtoa_r+0x2e4>
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 854f 	beq.w	8007494 <_dtoa_r+0xb34>
 80069f6:	f10a 0303 	add.w	r3, sl, #3
 80069fa:	f000 bd49 	b.w	8007490 <_dtoa_r+0xb30>
 80069fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a02:	2200      	movs	r2, #0
 8006a04:	ec51 0b17 	vmov	r0, r1, d7
 8006a08:	2300      	movs	r3, #0
 8006a0a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006a0e:	f7fa f85b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a12:	4680      	mov	r8, r0
 8006a14:	b158      	cbz	r0, 8006a2e <_dtoa_r+0xce>
 8006a16:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006a18:	2301      	movs	r3, #1
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a1e:	b113      	cbz	r3, 8006a26 <_dtoa_r+0xc6>
 8006a20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006a22:	4b84      	ldr	r3, [pc, #528]	@ (8006c34 <_dtoa_r+0x2d4>)
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006c48 <_dtoa_r+0x2e8>
 8006a2a:	f000 bd33 	b.w	8007494 <_dtoa_r+0xb34>
 8006a2e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006a32:	aa16      	add	r2, sp, #88	@ 0x58
 8006a34:	a917      	add	r1, sp, #92	@ 0x5c
 8006a36:	4658      	mov	r0, fp
 8006a38:	f001 f980 	bl	8007d3c <__d2b>
 8006a3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006a40:	4681      	mov	r9, r0
 8006a42:	2e00      	cmp	r6, #0
 8006a44:	d077      	beq.n	8006b36 <_dtoa_r+0x1d6>
 8006a46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a48:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006a58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006a5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006a60:	4619      	mov	r1, r3
 8006a62:	2200      	movs	r2, #0
 8006a64:	4b74      	ldr	r3, [pc, #464]	@ (8006c38 <_dtoa_r+0x2d8>)
 8006a66:	f7f9 fc0f 	bl	8000288 <__aeabi_dsub>
 8006a6a:	a369      	add	r3, pc, #420	@ (adr r3, 8006c10 <_dtoa_r+0x2b0>)
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	f7f9 fdc2 	bl	80005f8 <__aeabi_dmul>
 8006a74:	a368      	add	r3, pc, #416	@ (adr r3, 8006c18 <_dtoa_r+0x2b8>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	f7f9 fc07 	bl	800028c <__adddf3>
 8006a7e:	4604      	mov	r4, r0
 8006a80:	4630      	mov	r0, r6
 8006a82:	460d      	mov	r5, r1
 8006a84:	f7f9 fd4e 	bl	8000524 <__aeabi_i2d>
 8006a88:	a365      	add	r3, pc, #404	@ (adr r3, 8006c20 <_dtoa_r+0x2c0>)
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	f7f9 fdb3 	bl	80005f8 <__aeabi_dmul>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4620      	mov	r0, r4
 8006a98:	4629      	mov	r1, r5
 8006a9a:	f7f9 fbf7 	bl	800028c <__adddf3>
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	460d      	mov	r5, r1
 8006aa2:	f7fa f859 	bl	8000b58 <__aeabi_d2iz>
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	4607      	mov	r7, r0
 8006aaa:	2300      	movs	r3, #0
 8006aac:	4620      	mov	r0, r4
 8006aae:	4629      	mov	r1, r5
 8006ab0:	f7fa f814 	bl	8000adc <__aeabi_dcmplt>
 8006ab4:	b140      	cbz	r0, 8006ac8 <_dtoa_r+0x168>
 8006ab6:	4638      	mov	r0, r7
 8006ab8:	f7f9 fd34 	bl	8000524 <__aeabi_i2d>
 8006abc:	4622      	mov	r2, r4
 8006abe:	462b      	mov	r3, r5
 8006ac0:	f7fa f802 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ac4:	b900      	cbnz	r0, 8006ac8 <_dtoa_r+0x168>
 8006ac6:	3f01      	subs	r7, #1
 8006ac8:	2f16      	cmp	r7, #22
 8006aca:	d851      	bhi.n	8006b70 <_dtoa_r+0x210>
 8006acc:	4b5b      	ldr	r3, [pc, #364]	@ (8006c3c <_dtoa_r+0x2dc>)
 8006ace:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ada:	f7f9 ffff 	bl	8000adc <__aeabi_dcmplt>
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d048      	beq.n	8006b74 <_dtoa_r+0x214>
 8006ae2:	3f01      	subs	r7, #1
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	9312      	str	r3, [sp, #72]	@ 0x48
 8006ae8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006aea:	1b9b      	subs	r3, r3, r6
 8006aec:	1e5a      	subs	r2, r3, #1
 8006aee:	bf44      	itt	mi
 8006af0:	f1c3 0801 	rsbmi	r8, r3, #1
 8006af4:	2300      	movmi	r3, #0
 8006af6:	9208      	str	r2, [sp, #32]
 8006af8:	bf54      	ite	pl
 8006afa:	f04f 0800 	movpl.w	r8, #0
 8006afe:	9308      	strmi	r3, [sp, #32]
 8006b00:	2f00      	cmp	r7, #0
 8006b02:	db39      	blt.n	8006b78 <_dtoa_r+0x218>
 8006b04:	9b08      	ldr	r3, [sp, #32]
 8006b06:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006b08:	443b      	add	r3, r7
 8006b0a:	9308      	str	r3, [sp, #32]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b12:	2b09      	cmp	r3, #9
 8006b14:	d864      	bhi.n	8006be0 <_dtoa_r+0x280>
 8006b16:	2b05      	cmp	r3, #5
 8006b18:	bfc4      	itt	gt
 8006b1a:	3b04      	subgt	r3, #4
 8006b1c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b20:	f1a3 0302 	sub.w	r3, r3, #2
 8006b24:	bfcc      	ite	gt
 8006b26:	2400      	movgt	r4, #0
 8006b28:	2401      	movle	r4, #1
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	d863      	bhi.n	8006bf6 <_dtoa_r+0x296>
 8006b2e:	e8df f003 	tbb	[pc, r3]
 8006b32:	372a      	.short	0x372a
 8006b34:	5535      	.short	0x5535
 8006b36:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006b3a:	441e      	add	r6, r3
 8006b3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006b40:	2b20      	cmp	r3, #32
 8006b42:	bfc1      	itttt	gt
 8006b44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006b48:	409f      	lslgt	r7, r3
 8006b4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006b4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006b52:	bfd6      	itet	le
 8006b54:	f1c3 0320 	rsble	r3, r3, #32
 8006b58:	ea47 0003 	orrgt.w	r0, r7, r3
 8006b5c:	fa04 f003 	lslle.w	r0, r4, r3
 8006b60:	f7f9 fcd0 	bl	8000504 <__aeabi_ui2d>
 8006b64:	2201      	movs	r2, #1
 8006b66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006b6a:	3e01      	subs	r6, #1
 8006b6c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006b6e:	e777      	b.n	8006a60 <_dtoa_r+0x100>
 8006b70:	2301      	movs	r3, #1
 8006b72:	e7b8      	b.n	8006ae6 <_dtoa_r+0x186>
 8006b74:	9012      	str	r0, [sp, #72]	@ 0x48
 8006b76:	e7b7      	b.n	8006ae8 <_dtoa_r+0x188>
 8006b78:	427b      	negs	r3, r7
 8006b7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	eba8 0807 	sub.w	r8, r8, r7
 8006b82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b84:	e7c4      	b.n	8006b10 <_dtoa_r+0x1b0>
 8006b86:	2300      	movs	r3, #0
 8006b88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dc35      	bgt.n	8006bfc <_dtoa_r+0x29c>
 8006b90:	2301      	movs	r3, #1
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	9307      	str	r3, [sp, #28]
 8006b96:	461a      	mov	r2, r3
 8006b98:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b9a:	e00b      	b.n	8006bb4 <_dtoa_r+0x254>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e7f3      	b.n	8006b88 <_dtoa_r+0x228>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ba4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ba6:	18fb      	adds	r3, r7, r3
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	3301      	adds	r3, #1
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	9307      	str	r3, [sp, #28]
 8006bb0:	bfb8      	it	lt
 8006bb2:	2301      	movlt	r3, #1
 8006bb4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006bb8:	2100      	movs	r1, #0
 8006bba:	2204      	movs	r2, #4
 8006bbc:	f102 0514 	add.w	r5, r2, #20
 8006bc0:	429d      	cmp	r5, r3
 8006bc2:	d91f      	bls.n	8006c04 <_dtoa_r+0x2a4>
 8006bc4:	6041      	str	r1, [r0, #4]
 8006bc6:	4658      	mov	r0, fp
 8006bc8:	f000 fd8e 	bl	80076e8 <_Balloc>
 8006bcc:	4682      	mov	sl, r0
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d13c      	bne.n	8006c4c <_dtoa_r+0x2ec>
 8006bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8006c40 <_dtoa_r+0x2e0>)
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	f240 11af 	movw	r1, #431	@ 0x1af
 8006bda:	e6d8      	b.n	800698e <_dtoa_r+0x2e>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e7e0      	b.n	8006ba2 <_dtoa_r+0x242>
 8006be0:	2401      	movs	r4, #1
 8006be2:	2300      	movs	r3, #0
 8006be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006be6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006be8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	9307      	str	r3, [sp, #28]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2312      	movs	r3, #18
 8006bf4:	e7d0      	b.n	8006b98 <_dtoa_r+0x238>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bfa:	e7f5      	b.n	8006be8 <_dtoa_r+0x288>
 8006bfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	9307      	str	r3, [sp, #28]
 8006c02:	e7d7      	b.n	8006bb4 <_dtoa_r+0x254>
 8006c04:	3101      	adds	r1, #1
 8006c06:	0052      	lsls	r2, r2, #1
 8006c08:	e7d8      	b.n	8006bbc <_dtoa_r+0x25c>
 8006c0a:	bf00      	nop
 8006c0c:	f3af 8000 	nop.w
 8006c10:	636f4361 	.word	0x636f4361
 8006c14:	3fd287a7 	.word	0x3fd287a7
 8006c18:	8b60c8b3 	.word	0x8b60c8b3
 8006c1c:	3fc68a28 	.word	0x3fc68a28
 8006c20:	509f79fb 	.word	0x509f79fb
 8006c24:	3fd34413 	.word	0x3fd34413
 8006c28:	08008995 	.word	0x08008995
 8006c2c:	080089ac 	.word	0x080089ac
 8006c30:	7ff00000 	.word	0x7ff00000
 8006c34:	08008965 	.word	0x08008965
 8006c38:	3ff80000 	.word	0x3ff80000
 8006c3c:	08008aa8 	.word	0x08008aa8
 8006c40:	08008a04 	.word	0x08008a04
 8006c44:	08008991 	.word	0x08008991
 8006c48:	08008964 	.word	0x08008964
 8006c4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c50:	6018      	str	r0, [r3, #0]
 8006c52:	9b07      	ldr	r3, [sp, #28]
 8006c54:	2b0e      	cmp	r3, #14
 8006c56:	f200 80a4 	bhi.w	8006da2 <_dtoa_r+0x442>
 8006c5a:	2c00      	cmp	r4, #0
 8006c5c:	f000 80a1 	beq.w	8006da2 <_dtoa_r+0x442>
 8006c60:	2f00      	cmp	r7, #0
 8006c62:	dd33      	ble.n	8006ccc <_dtoa_r+0x36c>
 8006c64:	4bad      	ldr	r3, [pc, #692]	@ (8006f1c <_dtoa_r+0x5bc>)
 8006c66:	f007 020f 	and.w	r2, r7, #15
 8006c6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c6e:	ed93 7b00 	vldr	d7, [r3]
 8006c72:	05f8      	lsls	r0, r7, #23
 8006c74:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006c78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006c7c:	d516      	bpl.n	8006cac <_dtoa_r+0x34c>
 8006c7e:	4ba8      	ldr	r3, [pc, #672]	@ (8006f20 <_dtoa_r+0x5c0>)
 8006c80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c88:	f7f9 fde0 	bl	800084c <__aeabi_ddiv>
 8006c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c90:	f004 040f 	and.w	r4, r4, #15
 8006c94:	2603      	movs	r6, #3
 8006c96:	4da2      	ldr	r5, [pc, #648]	@ (8006f20 <_dtoa_r+0x5c0>)
 8006c98:	b954      	cbnz	r4, 8006cb0 <_dtoa_r+0x350>
 8006c9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ca2:	f7f9 fdd3 	bl	800084c <__aeabi_ddiv>
 8006ca6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006caa:	e028      	b.n	8006cfe <_dtoa_r+0x39e>
 8006cac:	2602      	movs	r6, #2
 8006cae:	e7f2      	b.n	8006c96 <_dtoa_r+0x336>
 8006cb0:	07e1      	lsls	r1, r4, #31
 8006cb2:	d508      	bpl.n	8006cc6 <_dtoa_r+0x366>
 8006cb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cbc:	f7f9 fc9c 	bl	80005f8 <__aeabi_dmul>
 8006cc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cc4:	3601      	adds	r6, #1
 8006cc6:	1064      	asrs	r4, r4, #1
 8006cc8:	3508      	adds	r5, #8
 8006cca:	e7e5      	b.n	8006c98 <_dtoa_r+0x338>
 8006ccc:	f000 80d2 	beq.w	8006e74 <_dtoa_r+0x514>
 8006cd0:	427c      	negs	r4, r7
 8006cd2:	4b92      	ldr	r3, [pc, #584]	@ (8006f1c <_dtoa_r+0x5bc>)
 8006cd4:	4d92      	ldr	r5, [pc, #584]	@ (8006f20 <_dtoa_r+0x5c0>)
 8006cd6:	f004 020f 	and.w	r2, r4, #15
 8006cda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ce6:	f7f9 fc87 	bl	80005f8 <__aeabi_dmul>
 8006cea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cee:	1124      	asrs	r4, r4, #4
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	2602      	movs	r6, #2
 8006cf4:	2c00      	cmp	r4, #0
 8006cf6:	f040 80b2 	bne.w	8006e5e <_dtoa_r+0x4fe>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1d3      	bne.n	8006ca6 <_dtoa_r+0x346>
 8006cfe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 80b7 	beq.w	8006e78 <_dtoa_r+0x518>
 8006d0a:	4b86      	ldr	r3, [pc, #536]	@ (8006f24 <_dtoa_r+0x5c4>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	4620      	mov	r0, r4
 8006d10:	4629      	mov	r1, r5
 8006d12:	f7f9 fee3 	bl	8000adc <__aeabi_dcmplt>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	f000 80ae 	beq.w	8006e78 <_dtoa_r+0x518>
 8006d1c:	9b07      	ldr	r3, [sp, #28]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 80aa 	beq.w	8006e78 <_dtoa_r+0x518>
 8006d24:	9b00      	ldr	r3, [sp, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	dd37      	ble.n	8006d9a <_dtoa_r+0x43a>
 8006d2a:	1e7b      	subs	r3, r7, #1
 8006d2c:	9304      	str	r3, [sp, #16]
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4b7d      	ldr	r3, [pc, #500]	@ (8006f28 <_dtoa_r+0x5c8>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	4629      	mov	r1, r5
 8006d36:	f7f9 fc5f 	bl	80005f8 <__aeabi_dmul>
 8006d3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d3e:	9c00      	ldr	r4, [sp, #0]
 8006d40:	3601      	adds	r6, #1
 8006d42:	4630      	mov	r0, r6
 8006d44:	f7f9 fbee 	bl	8000524 <__aeabi_i2d>
 8006d48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d4c:	f7f9 fc54 	bl	80005f8 <__aeabi_dmul>
 8006d50:	4b76      	ldr	r3, [pc, #472]	@ (8006f2c <_dtoa_r+0x5cc>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	f7f9 fa9a 	bl	800028c <__adddf3>
 8006d58:	4605      	mov	r5, r0
 8006d5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006d5e:	2c00      	cmp	r4, #0
 8006d60:	f040 808d 	bne.w	8006e7e <_dtoa_r+0x51e>
 8006d64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d68:	4b71      	ldr	r3, [pc, #452]	@ (8006f30 <_dtoa_r+0x5d0>)
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f7f9 fa8c 	bl	8000288 <__aeabi_dsub>
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d78:	462a      	mov	r2, r5
 8006d7a:	4633      	mov	r3, r6
 8006d7c:	f7f9 fecc 	bl	8000b18 <__aeabi_dcmpgt>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	f040 828b 	bne.w	800729c <_dtoa_r+0x93c>
 8006d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d8a:	462a      	mov	r2, r5
 8006d8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d90:	f7f9 fea4 	bl	8000adc <__aeabi_dcmplt>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	f040 8128 	bne.w	8006fea <_dtoa_r+0x68a>
 8006d9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006d9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006da2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f2c0 815a 	blt.w	800705e <_dtoa_r+0x6fe>
 8006daa:	2f0e      	cmp	r7, #14
 8006dac:	f300 8157 	bgt.w	800705e <_dtoa_r+0x6fe>
 8006db0:	4b5a      	ldr	r3, [pc, #360]	@ (8006f1c <_dtoa_r+0x5bc>)
 8006db2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006db6:	ed93 7b00 	vldr	d7, [r3]
 8006dba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	ed8d 7b00 	vstr	d7, [sp]
 8006dc2:	da03      	bge.n	8006dcc <_dtoa_r+0x46c>
 8006dc4:	9b07      	ldr	r3, [sp, #28]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f340 8101 	ble.w	8006fce <_dtoa_r+0x66e>
 8006dcc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006dd0:	4656      	mov	r6, sl
 8006dd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	4629      	mov	r1, r5
 8006dda:	f7f9 fd37 	bl	800084c <__aeabi_ddiv>
 8006dde:	f7f9 febb 	bl	8000b58 <__aeabi_d2iz>
 8006de2:	4680      	mov	r8, r0
 8006de4:	f7f9 fb9e 	bl	8000524 <__aeabi_i2d>
 8006de8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dec:	f7f9 fc04 	bl	80005f8 <__aeabi_dmul>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4620      	mov	r0, r4
 8006df6:	4629      	mov	r1, r5
 8006df8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006dfc:	f7f9 fa44 	bl	8000288 <__aeabi_dsub>
 8006e00:	f806 4b01 	strb.w	r4, [r6], #1
 8006e04:	9d07      	ldr	r5, [sp, #28]
 8006e06:	eba6 040a 	sub.w	r4, r6, sl
 8006e0a:	42a5      	cmp	r5, r4
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	f040 8117 	bne.w	8007042 <_dtoa_r+0x6e2>
 8006e14:	f7f9 fa3a 	bl	800028c <__adddf3>
 8006e18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	460d      	mov	r5, r1
 8006e20:	f7f9 fe7a 	bl	8000b18 <__aeabi_dcmpgt>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	f040 80f9 	bne.w	800701c <_dtoa_r+0x6bc>
 8006e2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e2e:	4620      	mov	r0, r4
 8006e30:	4629      	mov	r1, r5
 8006e32:	f7f9 fe49 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e36:	b118      	cbz	r0, 8006e40 <_dtoa_r+0x4e0>
 8006e38:	f018 0f01 	tst.w	r8, #1
 8006e3c:	f040 80ee 	bne.w	800701c <_dtoa_r+0x6bc>
 8006e40:	4649      	mov	r1, r9
 8006e42:	4658      	mov	r0, fp
 8006e44:	f000 fc90 	bl	8007768 <_Bfree>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	7033      	strb	r3, [r6, #0]
 8006e4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e4e:	3701      	adds	r7, #1
 8006e50:	601f      	str	r7, [r3, #0]
 8006e52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 831d 	beq.w	8007494 <_dtoa_r+0xb34>
 8006e5a:	601e      	str	r6, [r3, #0]
 8006e5c:	e31a      	b.n	8007494 <_dtoa_r+0xb34>
 8006e5e:	07e2      	lsls	r2, r4, #31
 8006e60:	d505      	bpl.n	8006e6e <_dtoa_r+0x50e>
 8006e62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e66:	f7f9 fbc7 	bl	80005f8 <__aeabi_dmul>
 8006e6a:	3601      	adds	r6, #1
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	1064      	asrs	r4, r4, #1
 8006e70:	3508      	adds	r5, #8
 8006e72:	e73f      	b.n	8006cf4 <_dtoa_r+0x394>
 8006e74:	2602      	movs	r6, #2
 8006e76:	e742      	b.n	8006cfe <_dtoa_r+0x39e>
 8006e78:	9c07      	ldr	r4, [sp, #28]
 8006e7a:	9704      	str	r7, [sp, #16]
 8006e7c:	e761      	b.n	8006d42 <_dtoa_r+0x3e2>
 8006e7e:	4b27      	ldr	r3, [pc, #156]	@ (8006f1c <_dtoa_r+0x5bc>)
 8006e80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006e86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e8a:	4454      	add	r4, sl
 8006e8c:	2900      	cmp	r1, #0
 8006e8e:	d053      	beq.n	8006f38 <_dtoa_r+0x5d8>
 8006e90:	4928      	ldr	r1, [pc, #160]	@ (8006f34 <_dtoa_r+0x5d4>)
 8006e92:	2000      	movs	r0, #0
 8006e94:	f7f9 fcda 	bl	800084c <__aeabi_ddiv>
 8006e98:	4633      	mov	r3, r6
 8006e9a:	462a      	mov	r2, r5
 8006e9c:	f7f9 f9f4 	bl	8000288 <__aeabi_dsub>
 8006ea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ea4:	4656      	mov	r6, sl
 8006ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eaa:	f7f9 fe55 	bl	8000b58 <__aeabi_d2iz>
 8006eae:	4605      	mov	r5, r0
 8006eb0:	f7f9 fb38 	bl	8000524 <__aeabi_i2d>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ebc:	f7f9 f9e4 	bl	8000288 <__aeabi_dsub>
 8006ec0:	3530      	adds	r5, #48	@ 0x30
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006eca:	f806 5b01 	strb.w	r5, [r6], #1
 8006ece:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ed2:	f7f9 fe03 	bl	8000adc <__aeabi_dcmplt>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	d171      	bne.n	8006fbe <_dtoa_r+0x65e>
 8006eda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ede:	4911      	ldr	r1, [pc, #68]	@ (8006f24 <_dtoa_r+0x5c4>)
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	f7f9 f9d1 	bl	8000288 <__aeabi_dsub>
 8006ee6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006eea:	f7f9 fdf7 	bl	8000adc <__aeabi_dcmplt>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	f040 8095 	bne.w	800701e <_dtoa_r+0x6be>
 8006ef4:	42a6      	cmp	r6, r4
 8006ef6:	f43f af50 	beq.w	8006d9a <_dtoa_r+0x43a>
 8006efa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006efe:	4b0a      	ldr	r3, [pc, #40]	@ (8006f28 <_dtoa_r+0x5c8>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	f7f9 fb79 	bl	80005f8 <__aeabi_dmul>
 8006f06:	4b08      	ldr	r3, [pc, #32]	@ (8006f28 <_dtoa_r+0x5c8>)
 8006f08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f12:	f7f9 fb71 	bl	80005f8 <__aeabi_dmul>
 8006f16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f1a:	e7c4      	b.n	8006ea6 <_dtoa_r+0x546>
 8006f1c:	08008aa8 	.word	0x08008aa8
 8006f20:	08008a80 	.word	0x08008a80
 8006f24:	3ff00000 	.word	0x3ff00000
 8006f28:	40240000 	.word	0x40240000
 8006f2c:	401c0000 	.word	0x401c0000
 8006f30:	40140000 	.word	0x40140000
 8006f34:	3fe00000 	.word	0x3fe00000
 8006f38:	4631      	mov	r1, r6
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	f7f9 fb5c 	bl	80005f8 <__aeabi_dmul>
 8006f40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f44:	9415      	str	r4, [sp, #84]	@ 0x54
 8006f46:	4656      	mov	r6, sl
 8006f48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f4c:	f7f9 fe04 	bl	8000b58 <__aeabi_d2iz>
 8006f50:	4605      	mov	r5, r0
 8006f52:	f7f9 fae7 	bl	8000524 <__aeabi_i2d>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f5e:	f7f9 f993 	bl	8000288 <__aeabi_dsub>
 8006f62:	3530      	adds	r5, #48	@ 0x30
 8006f64:	f806 5b01 	strb.w	r5, [r6], #1
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	42a6      	cmp	r6, r4
 8006f6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f72:	f04f 0200 	mov.w	r2, #0
 8006f76:	d124      	bne.n	8006fc2 <_dtoa_r+0x662>
 8006f78:	4bac      	ldr	r3, [pc, #688]	@ (800722c <_dtoa_r+0x8cc>)
 8006f7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f7e:	f7f9 f985 	bl	800028c <__adddf3>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f8a:	f7f9 fdc5 	bl	8000b18 <__aeabi_dcmpgt>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d145      	bne.n	800701e <_dtoa_r+0x6be>
 8006f92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f96:	49a5      	ldr	r1, [pc, #660]	@ (800722c <_dtoa_r+0x8cc>)
 8006f98:	2000      	movs	r0, #0
 8006f9a:	f7f9 f975 	bl	8000288 <__aeabi_dsub>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fa6:	f7f9 fd99 	bl	8000adc <__aeabi_dcmplt>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	f43f aef5 	beq.w	8006d9a <_dtoa_r+0x43a>
 8006fb0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006fb2:	1e73      	subs	r3, r6, #1
 8006fb4:	9315      	str	r3, [sp, #84]	@ 0x54
 8006fb6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006fba:	2b30      	cmp	r3, #48	@ 0x30
 8006fbc:	d0f8      	beq.n	8006fb0 <_dtoa_r+0x650>
 8006fbe:	9f04      	ldr	r7, [sp, #16]
 8006fc0:	e73e      	b.n	8006e40 <_dtoa_r+0x4e0>
 8006fc2:	4b9b      	ldr	r3, [pc, #620]	@ (8007230 <_dtoa_r+0x8d0>)
 8006fc4:	f7f9 fb18 	bl	80005f8 <__aeabi_dmul>
 8006fc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fcc:	e7bc      	b.n	8006f48 <_dtoa_r+0x5e8>
 8006fce:	d10c      	bne.n	8006fea <_dtoa_r+0x68a>
 8006fd0:	4b98      	ldr	r3, [pc, #608]	@ (8007234 <_dtoa_r+0x8d4>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fd8:	f7f9 fb0e 	bl	80005f8 <__aeabi_dmul>
 8006fdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fe0:	f7f9 fd90 	bl	8000b04 <__aeabi_dcmpge>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	f000 8157 	beq.w	8007298 <_dtoa_r+0x938>
 8006fea:	2400      	movs	r4, #0
 8006fec:	4625      	mov	r5, r4
 8006fee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ff0:	43db      	mvns	r3, r3
 8006ff2:	9304      	str	r3, [sp, #16]
 8006ff4:	4656      	mov	r6, sl
 8006ff6:	2700      	movs	r7, #0
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	4658      	mov	r0, fp
 8006ffc:	f000 fbb4 	bl	8007768 <_Bfree>
 8007000:	2d00      	cmp	r5, #0
 8007002:	d0dc      	beq.n	8006fbe <_dtoa_r+0x65e>
 8007004:	b12f      	cbz	r7, 8007012 <_dtoa_r+0x6b2>
 8007006:	42af      	cmp	r7, r5
 8007008:	d003      	beq.n	8007012 <_dtoa_r+0x6b2>
 800700a:	4639      	mov	r1, r7
 800700c:	4658      	mov	r0, fp
 800700e:	f000 fbab 	bl	8007768 <_Bfree>
 8007012:	4629      	mov	r1, r5
 8007014:	4658      	mov	r0, fp
 8007016:	f000 fba7 	bl	8007768 <_Bfree>
 800701a:	e7d0      	b.n	8006fbe <_dtoa_r+0x65e>
 800701c:	9704      	str	r7, [sp, #16]
 800701e:	4633      	mov	r3, r6
 8007020:	461e      	mov	r6, r3
 8007022:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007026:	2a39      	cmp	r2, #57	@ 0x39
 8007028:	d107      	bne.n	800703a <_dtoa_r+0x6da>
 800702a:	459a      	cmp	sl, r3
 800702c:	d1f8      	bne.n	8007020 <_dtoa_r+0x6c0>
 800702e:	9a04      	ldr	r2, [sp, #16]
 8007030:	3201      	adds	r2, #1
 8007032:	9204      	str	r2, [sp, #16]
 8007034:	2230      	movs	r2, #48	@ 0x30
 8007036:	f88a 2000 	strb.w	r2, [sl]
 800703a:	781a      	ldrb	r2, [r3, #0]
 800703c:	3201      	adds	r2, #1
 800703e:	701a      	strb	r2, [r3, #0]
 8007040:	e7bd      	b.n	8006fbe <_dtoa_r+0x65e>
 8007042:	4b7b      	ldr	r3, [pc, #492]	@ (8007230 <_dtoa_r+0x8d0>)
 8007044:	2200      	movs	r2, #0
 8007046:	f7f9 fad7 	bl	80005f8 <__aeabi_dmul>
 800704a:	2200      	movs	r2, #0
 800704c:	2300      	movs	r3, #0
 800704e:	4604      	mov	r4, r0
 8007050:	460d      	mov	r5, r1
 8007052:	f7f9 fd39 	bl	8000ac8 <__aeabi_dcmpeq>
 8007056:	2800      	cmp	r0, #0
 8007058:	f43f aebb 	beq.w	8006dd2 <_dtoa_r+0x472>
 800705c:	e6f0      	b.n	8006e40 <_dtoa_r+0x4e0>
 800705e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007060:	2a00      	cmp	r2, #0
 8007062:	f000 80db 	beq.w	800721c <_dtoa_r+0x8bc>
 8007066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007068:	2a01      	cmp	r2, #1
 800706a:	f300 80bf 	bgt.w	80071ec <_dtoa_r+0x88c>
 800706e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007070:	2a00      	cmp	r2, #0
 8007072:	f000 80b7 	beq.w	80071e4 <_dtoa_r+0x884>
 8007076:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800707a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800707c:	4646      	mov	r6, r8
 800707e:	9a08      	ldr	r2, [sp, #32]
 8007080:	2101      	movs	r1, #1
 8007082:	441a      	add	r2, r3
 8007084:	4658      	mov	r0, fp
 8007086:	4498      	add	r8, r3
 8007088:	9208      	str	r2, [sp, #32]
 800708a:	f000 fc21 	bl	80078d0 <__i2b>
 800708e:	4605      	mov	r5, r0
 8007090:	b15e      	cbz	r6, 80070aa <_dtoa_r+0x74a>
 8007092:	9b08      	ldr	r3, [sp, #32]
 8007094:	2b00      	cmp	r3, #0
 8007096:	dd08      	ble.n	80070aa <_dtoa_r+0x74a>
 8007098:	42b3      	cmp	r3, r6
 800709a:	9a08      	ldr	r2, [sp, #32]
 800709c:	bfa8      	it	ge
 800709e:	4633      	movge	r3, r6
 80070a0:	eba8 0803 	sub.w	r8, r8, r3
 80070a4:	1af6      	subs	r6, r6, r3
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	9308      	str	r3, [sp, #32]
 80070aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070ac:	b1f3      	cbz	r3, 80070ec <_dtoa_r+0x78c>
 80070ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 80b7 	beq.w	8007224 <_dtoa_r+0x8c4>
 80070b6:	b18c      	cbz	r4, 80070dc <_dtoa_r+0x77c>
 80070b8:	4629      	mov	r1, r5
 80070ba:	4622      	mov	r2, r4
 80070bc:	4658      	mov	r0, fp
 80070be:	f000 fcc7 	bl	8007a50 <__pow5mult>
 80070c2:	464a      	mov	r2, r9
 80070c4:	4601      	mov	r1, r0
 80070c6:	4605      	mov	r5, r0
 80070c8:	4658      	mov	r0, fp
 80070ca:	f000 fc17 	bl	80078fc <__multiply>
 80070ce:	4649      	mov	r1, r9
 80070d0:	9004      	str	r0, [sp, #16]
 80070d2:	4658      	mov	r0, fp
 80070d4:	f000 fb48 	bl	8007768 <_Bfree>
 80070d8:	9b04      	ldr	r3, [sp, #16]
 80070da:	4699      	mov	r9, r3
 80070dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070de:	1b1a      	subs	r2, r3, r4
 80070e0:	d004      	beq.n	80070ec <_dtoa_r+0x78c>
 80070e2:	4649      	mov	r1, r9
 80070e4:	4658      	mov	r0, fp
 80070e6:	f000 fcb3 	bl	8007a50 <__pow5mult>
 80070ea:	4681      	mov	r9, r0
 80070ec:	2101      	movs	r1, #1
 80070ee:	4658      	mov	r0, fp
 80070f0:	f000 fbee 	bl	80078d0 <__i2b>
 80070f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070f6:	4604      	mov	r4, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 81cf 	beq.w	800749c <_dtoa_r+0xb3c>
 80070fe:	461a      	mov	r2, r3
 8007100:	4601      	mov	r1, r0
 8007102:	4658      	mov	r0, fp
 8007104:	f000 fca4 	bl	8007a50 <__pow5mult>
 8007108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800710a:	2b01      	cmp	r3, #1
 800710c:	4604      	mov	r4, r0
 800710e:	f300 8095 	bgt.w	800723c <_dtoa_r+0x8dc>
 8007112:	9b02      	ldr	r3, [sp, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	f040 8087 	bne.w	8007228 <_dtoa_r+0x8c8>
 800711a:	9b03      	ldr	r3, [sp, #12]
 800711c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007120:	2b00      	cmp	r3, #0
 8007122:	f040 8089 	bne.w	8007238 <_dtoa_r+0x8d8>
 8007126:	9b03      	ldr	r3, [sp, #12]
 8007128:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800712c:	0d1b      	lsrs	r3, r3, #20
 800712e:	051b      	lsls	r3, r3, #20
 8007130:	b12b      	cbz	r3, 800713e <_dtoa_r+0x7de>
 8007132:	9b08      	ldr	r3, [sp, #32]
 8007134:	3301      	adds	r3, #1
 8007136:	9308      	str	r3, [sp, #32]
 8007138:	f108 0801 	add.w	r8, r8, #1
 800713c:	2301      	movs	r3, #1
 800713e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007140:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 81b0 	beq.w	80074a8 <_dtoa_r+0xb48>
 8007148:	6923      	ldr	r3, [r4, #16]
 800714a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800714e:	6918      	ldr	r0, [r3, #16]
 8007150:	f000 fb72 	bl	8007838 <__hi0bits>
 8007154:	f1c0 0020 	rsb	r0, r0, #32
 8007158:	9b08      	ldr	r3, [sp, #32]
 800715a:	4418      	add	r0, r3
 800715c:	f010 001f 	ands.w	r0, r0, #31
 8007160:	d077      	beq.n	8007252 <_dtoa_r+0x8f2>
 8007162:	f1c0 0320 	rsb	r3, r0, #32
 8007166:	2b04      	cmp	r3, #4
 8007168:	dd6b      	ble.n	8007242 <_dtoa_r+0x8e2>
 800716a:	9b08      	ldr	r3, [sp, #32]
 800716c:	f1c0 001c 	rsb	r0, r0, #28
 8007170:	4403      	add	r3, r0
 8007172:	4480      	add	r8, r0
 8007174:	4406      	add	r6, r0
 8007176:	9308      	str	r3, [sp, #32]
 8007178:	f1b8 0f00 	cmp.w	r8, #0
 800717c:	dd05      	ble.n	800718a <_dtoa_r+0x82a>
 800717e:	4649      	mov	r1, r9
 8007180:	4642      	mov	r2, r8
 8007182:	4658      	mov	r0, fp
 8007184:	f000 fcbe 	bl	8007b04 <__lshift>
 8007188:	4681      	mov	r9, r0
 800718a:	9b08      	ldr	r3, [sp, #32]
 800718c:	2b00      	cmp	r3, #0
 800718e:	dd05      	ble.n	800719c <_dtoa_r+0x83c>
 8007190:	4621      	mov	r1, r4
 8007192:	461a      	mov	r2, r3
 8007194:	4658      	mov	r0, fp
 8007196:	f000 fcb5 	bl	8007b04 <__lshift>
 800719a:	4604      	mov	r4, r0
 800719c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d059      	beq.n	8007256 <_dtoa_r+0x8f6>
 80071a2:	4621      	mov	r1, r4
 80071a4:	4648      	mov	r0, r9
 80071a6:	f000 fd19 	bl	8007bdc <__mcmp>
 80071aa:	2800      	cmp	r0, #0
 80071ac:	da53      	bge.n	8007256 <_dtoa_r+0x8f6>
 80071ae:	1e7b      	subs	r3, r7, #1
 80071b0:	9304      	str	r3, [sp, #16]
 80071b2:	4649      	mov	r1, r9
 80071b4:	2300      	movs	r3, #0
 80071b6:	220a      	movs	r2, #10
 80071b8:	4658      	mov	r0, fp
 80071ba:	f000 faf7 	bl	80077ac <__multadd>
 80071be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071c0:	4681      	mov	r9, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 8172 	beq.w	80074ac <_dtoa_r+0xb4c>
 80071c8:	2300      	movs	r3, #0
 80071ca:	4629      	mov	r1, r5
 80071cc:	220a      	movs	r2, #10
 80071ce:	4658      	mov	r0, fp
 80071d0:	f000 faec 	bl	80077ac <__multadd>
 80071d4:	9b00      	ldr	r3, [sp, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	4605      	mov	r5, r0
 80071da:	dc67      	bgt.n	80072ac <_dtoa_r+0x94c>
 80071dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071de:	2b02      	cmp	r3, #2
 80071e0:	dc41      	bgt.n	8007266 <_dtoa_r+0x906>
 80071e2:	e063      	b.n	80072ac <_dtoa_r+0x94c>
 80071e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80071e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80071ea:	e746      	b.n	800707a <_dtoa_r+0x71a>
 80071ec:	9b07      	ldr	r3, [sp, #28]
 80071ee:	1e5c      	subs	r4, r3, #1
 80071f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071f2:	42a3      	cmp	r3, r4
 80071f4:	bfbf      	itttt	lt
 80071f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80071f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80071fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80071fc:	1ae3      	sublt	r3, r4, r3
 80071fe:	bfb4      	ite	lt
 8007200:	18d2      	addlt	r2, r2, r3
 8007202:	1b1c      	subge	r4, r3, r4
 8007204:	9b07      	ldr	r3, [sp, #28]
 8007206:	bfbc      	itt	lt
 8007208:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800720a:	2400      	movlt	r4, #0
 800720c:	2b00      	cmp	r3, #0
 800720e:	bfb5      	itete	lt
 8007210:	eba8 0603 	sublt.w	r6, r8, r3
 8007214:	9b07      	ldrge	r3, [sp, #28]
 8007216:	2300      	movlt	r3, #0
 8007218:	4646      	movge	r6, r8
 800721a:	e730      	b.n	800707e <_dtoa_r+0x71e>
 800721c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800721e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007220:	4646      	mov	r6, r8
 8007222:	e735      	b.n	8007090 <_dtoa_r+0x730>
 8007224:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007226:	e75c      	b.n	80070e2 <_dtoa_r+0x782>
 8007228:	2300      	movs	r3, #0
 800722a:	e788      	b.n	800713e <_dtoa_r+0x7de>
 800722c:	3fe00000 	.word	0x3fe00000
 8007230:	40240000 	.word	0x40240000
 8007234:	40140000 	.word	0x40140000
 8007238:	9b02      	ldr	r3, [sp, #8]
 800723a:	e780      	b.n	800713e <_dtoa_r+0x7de>
 800723c:	2300      	movs	r3, #0
 800723e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007240:	e782      	b.n	8007148 <_dtoa_r+0x7e8>
 8007242:	d099      	beq.n	8007178 <_dtoa_r+0x818>
 8007244:	9a08      	ldr	r2, [sp, #32]
 8007246:	331c      	adds	r3, #28
 8007248:	441a      	add	r2, r3
 800724a:	4498      	add	r8, r3
 800724c:	441e      	add	r6, r3
 800724e:	9208      	str	r2, [sp, #32]
 8007250:	e792      	b.n	8007178 <_dtoa_r+0x818>
 8007252:	4603      	mov	r3, r0
 8007254:	e7f6      	b.n	8007244 <_dtoa_r+0x8e4>
 8007256:	9b07      	ldr	r3, [sp, #28]
 8007258:	9704      	str	r7, [sp, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	dc20      	bgt.n	80072a0 <_dtoa_r+0x940>
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007262:	2b02      	cmp	r3, #2
 8007264:	dd1e      	ble.n	80072a4 <_dtoa_r+0x944>
 8007266:	9b00      	ldr	r3, [sp, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	f47f aec0 	bne.w	8006fee <_dtoa_r+0x68e>
 800726e:	4621      	mov	r1, r4
 8007270:	2205      	movs	r2, #5
 8007272:	4658      	mov	r0, fp
 8007274:	f000 fa9a 	bl	80077ac <__multadd>
 8007278:	4601      	mov	r1, r0
 800727a:	4604      	mov	r4, r0
 800727c:	4648      	mov	r0, r9
 800727e:	f000 fcad 	bl	8007bdc <__mcmp>
 8007282:	2800      	cmp	r0, #0
 8007284:	f77f aeb3 	ble.w	8006fee <_dtoa_r+0x68e>
 8007288:	4656      	mov	r6, sl
 800728a:	2331      	movs	r3, #49	@ 0x31
 800728c:	f806 3b01 	strb.w	r3, [r6], #1
 8007290:	9b04      	ldr	r3, [sp, #16]
 8007292:	3301      	adds	r3, #1
 8007294:	9304      	str	r3, [sp, #16]
 8007296:	e6ae      	b.n	8006ff6 <_dtoa_r+0x696>
 8007298:	9c07      	ldr	r4, [sp, #28]
 800729a:	9704      	str	r7, [sp, #16]
 800729c:	4625      	mov	r5, r4
 800729e:	e7f3      	b.n	8007288 <_dtoa_r+0x928>
 80072a0:	9b07      	ldr	r3, [sp, #28]
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 8104 	beq.w	80074b4 <_dtoa_r+0xb54>
 80072ac:	2e00      	cmp	r6, #0
 80072ae:	dd05      	ble.n	80072bc <_dtoa_r+0x95c>
 80072b0:	4629      	mov	r1, r5
 80072b2:	4632      	mov	r2, r6
 80072b4:	4658      	mov	r0, fp
 80072b6:	f000 fc25 	bl	8007b04 <__lshift>
 80072ba:	4605      	mov	r5, r0
 80072bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d05a      	beq.n	8007378 <_dtoa_r+0xa18>
 80072c2:	6869      	ldr	r1, [r5, #4]
 80072c4:	4658      	mov	r0, fp
 80072c6:	f000 fa0f 	bl	80076e8 <_Balloc>
 80072ca:	4606      	mov	r6, r0
 80072cc:	b928      	cbnz	r0, 80072da <_dtoa_r+0x97a>
 80072ce:	4b84      	ldr	r3, [pc, #528]	@ (80074e0 <_dtoa_r+0xb80>)
 80072d0:	4602      	mov	r2, r0
 80072d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80072d6:	f7ff bb5a 	b.w	800698e <_dtoa_r+0x2e>
 80072da:	692a      	ldr	r2, [r5, #16]
 80072dc:	3202      	adds	r2, #2
 80072de:	0092      	lsls	r2, r2, #2
 80072e0:	f105 010c 	add.w	r1, r5, #12
 80072e4:	300c      	adds	r0, #12
 80072e6:	f000 ffaf 	bl	8008248 <memcpy>
 80072ea:	2201      	movs	r2, #1
 80072ec:	4631      	mov	r1, r6
 80072ee:	4658      	mov	r0, fp
 80072f0:	f000 fc08 	bl	8007b04 <__lshift>
 80072f4:	f10a 0301 	add.w	r3, sl, #1
 80072f8:	9307      	str	r3, [sp, #28]
 80072fa:	9b00      	ldr	r3, [sp, #0]
 80072fc:	4453      	add	r3, sl
 80072fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007300:	9b02      	ldr	r3, [sp, #8]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	462f      	mov	r7, r5
 8007308:	930a      	str	r3, [sp, #40]	@ 0x28
 800730a:	4605      	mov	r5, r0
 800730c:	9b07      	ldr	r3, [sp, #28]
 800730e:	4621      	mov	r1, r4
 8007310:	3b01      	subs	r3, #1
 8007312:	4648      	mov	r0, r9
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	f7ff fa9a 	bl	800684e <quorem>
 800731a:	4639      	mov	r1, r7
 800731c:	9002      	str	r0, [sp, #8]
 800731e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007322:	4648      	mov	r0, r9
 8007324:	f000 fc5a 	bl	8007bdc <__mcmp>
 8007328:	462a      	mov	r2, r5
 800732a:	9008      	str	r0, [sp, #32]
 800732c:	4621      	mov	r1, r4
 800732e:	4658      	mov	r0, fp
 8007330:	f000 fc70 	bl	8007c14 <__mdiff>
 8007334:	68c2      	ldr	r2, [r0, #12]
 8007336:	4606      	mov	r6, r0
 8007338:	bb02      	cbnz	r2, 800737c <_dtoa_r+0xa1c>
 800733a:	4601      	mov	r1, r0
 800733c:	4648      	mov	r0, r9
 800733e:	f000 fc4d 	bl	8007bdc <__mcmp>
 8007342:	4602      	mov	r2, r0
 8007344:	4631      	mov	r1, r6
 8007346:	4658      	mov	r0, fp
 8007348:	920e      	str	r2, [sp, #56]	@ 0x38
 800734a:	f000 fa0d 	bl	8007768 <_Bfree>
 800734e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007350:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007352:	9e07      	ldr	r6, [sp, #28]
 8007354:	ea43 0102 	orr.w	r1, r3, r2
 8007358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800735a:	4319      	orrs	r1, r3
 800735c:	d110      	bne.n	8007380 <_dtoa_r+0xa20>
 800735e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007362:	d029      	beq.n	80073b8 <_dtoa_r+0xa58>
 8007364:	9b08      	ldr	r3, [sp, #32]
 8007366:	2b00      	cmp	r3, #0
 8007368:	dd02      	ble.n	8007370 <_dtoa_r+0xa10>
 800736a:	9b02      	ldr	r3, [sp, #8]
 800736c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007370:	9b00      	ldr	r3, [sp, #0]
 8007372:	f883 8000 	strb.w	r8, [r3]
 8007376:	e63f      	b.n	8006ff8 <_dtoa_r+0x698>
 8007378:	4628      	mov	r0, r5
 800737a:	e7bb      	b.n	80072f4 <_dtoa_r+0x994>
 800737c:	2201      	movs	r2, #1
 800737e:	e7e1      	b.n	8007344 <_dtoa_r+0x9e4>
 8007380:	9b08      	ldr	r3, [sp, #32]
 8007382:	2b00      	cmp	r3, #0
 8007384:	db04      	blt.n	8007390 <_dtoa_r+0xa30>
 8007386:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007388:	430b      	orrs	r3, r1
 800738a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800738c:	430b      	orrs	r3, r1
 800738e:	d120      	bne.n	80073d2 <_dtoa_r+0xa72>
 8007390:	2a00      	cmp	r2, #0
 8007392:	dded      	ble.n	8007370 <_dtoa_r+0xa10>
 8007394:	4649      	mov	r1, r9
 8007396:	2201      	movs	r2, #1
 8007398:	4658      	mov	r0, fp
 800739a:	f000 fbb3 	bl	8007b04 <__lshift>
 800739e:	4621      	mov	r1, r4
 80073a0:	4681      	mov	r9, r0
 80073a2:	f000 fc1b 	bl	8007bdc <__mcmp>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	dc03      	bgt.n	80073b2 <_dtoa_r+0xa52>
 80073aa:	d1e1      	bne.n	8007370 <_dtoa_r+0xa10>
 80073ac:	f018 0f01 	tst.w	r8, #1
 80073b0:	d0de      	beq.n	8007370 <_dtoa_r+0xa10>
 80073b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80073b6:	d1d8      	bne.n	800736a <_dtoa_r+0xa0a>
 80073b8:	9a00      	ldr	r2, [sp, #0]
 80073ba:	2339      	movs	r3, #57	@ 0x39
 80073bc:	7013      	strb	r3, [r2, #0]
 80073be:	4633      	mov	r3, r6
 80073c0:	461e      	mov	r6, r3
 80073c2:	3b01      	subs	r3, #1
 80073c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80073c8:	2a39      	cmp	r2, #57	@ 0x39
 80073ca:	d052      	beq.n	8007472 <_dtoa_r+0xb12>
 80073cc:	3201      	adds	r2, #1
 80073ce:	701a      	strb	r2, [r3, #0]
 80073d0:	e612      	b.n	8006ff8 <_dtoa_r+0x698>
 80073d2:	2a00      	cmp	r2, #0
 80073d4:	dd07      	ble.n	80073e6 <_dtoa_r+0xa86>
 80073d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80073da:	d0ed      	beq.n	80073b8 <_dtoa_r+0xa58>
 80073dc:	9a00      	ldr	r2, [sp, #0]
 80073de:	f108 0301 	add.w	r3, r8, #1
 80073e2:	7013      	strb	r3, [r2, #0]
 80073e4:	e608      	b.n	8006ff8 <_dtoa_r+0x698>
 80073e6:	9b07      	ldr	r3, [sp, #28]
 80073e8:	9a07      	ldr	r2, [sp, #28]
 80073ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80073ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d028      	beq.n	8007446 <_dtoa_r+0xae6>
 80073f4:	4649      	mov	r1, r9
 80073f6:	2300      	movs	r3, #0
 80073f8:	220a      	movs	r2, #10
 80073fa:	4658      	mov	r0, fp
 80073fc:	f000 f9d6 	bl	80077ac <__multadd>
 8007400:	42af      	cmp	r7, r5
 8007402:	4681      	mov	r9, r0
 8007404:	f04f 0300 	mov.w	r3, #0
 8007408:	f04f 020a 	mov.w	r2, #10
 800740c:	4639      	mov	r1, r7
 800740e:	4658      	mov	r0, fp
 8007410:	d107      	bne.n	8007422 <_dtoa_r+0xac2>
 8007412:	f000 f9cb 	bl	80077ac <__multadd>
 8007416:	4607      	mov	r7, r0
 8007418:	4605      	mov	r5, r0
 800741a:	9b07      	ldr	r3, [sp, #28]
 800741c:	3301      	adds	r3, #1
 800741e:	9307      	str	r3, [sp, #28]
 8007420:	e774      	b.n	800730c <_dtoa_r+0x9ac>
 8007422:	f000 f9c3 	bl	80077ac <__multadd>
 8007426:	4629      	mov	r1, r5
 8007428:	4607      	mov	r7, r0
 800742a:	2300      	movs	r3, #0
 800742c:	220a      	movs	r2, #10
 800742e:	4658      	mov	r0, fp
 8007430:	f000 f9bc 	bl	80077ac <__multadd>
 8007434:	4605      	mov	r5, r0
 8007436:	e7f0      	b.n	800741a <_dtoa_r+0xaba>
 8007438:	9b00      	ldr	r3, [sp, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	bfcc      	ite	gt
 800743e:	461e      	movgt	r6, r3
 8007440:	2601      	movle	r6, #1
 8007442:	4456      	add	r6, sl
 8007444:	2700      	movs	r7, #0
 8007446:	4649      	mov	r1, r9
 8007448:	2201      	movs	r2, #1
 800744a:	4658      	mov	r0, fp
 800744c:	f000 fb5a 	bl	8007b04 <__lshift>
 8007450:	4621      	mov	r1, r4
 8007452:	4681      	mov	r9, r0
 8007454:	f000 fbc2 	bl	8007bdc <__mcmp>
 8007458:	2800      	cmp	r0, #0
 800745a:	dcb0      	bgt.n	80073be <_dtoa_r+0xa5e>
 800745c:	d102      	bne.n	8007464 <_dtoa_r+0xb04>
 800745e:	f018 0f01 	tst.w	r8, #1
 8007462:	d1ac      	bne.n	80073be <_dtoa_r+0xa5e>
 8007464:	4633      	mov	r3, r6
 8007466:	461e      	mov	r6, r3
 8007468:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800746c:	2a30      	cmp	r2, #48	@ 0x30
 800746e:	d0fa      	beq.n	8007466 <_dtoa_r+0xb06>
 8007470:	e5c2      	b.n	8006ff8 <_dtoa_r+0x698>
 8007472:	459a      	cmp	sl, r3
 8007474:	d1a4      	bne.n	80073c0 <_dtoa_r+0xa60>
 8007476:	9b04      	ldr	r3, [sp, #16]
 8007478:	3301      	adds	r3, #1
 800747a:	9304      	str	r3, [sp, #16]
 800747c:	2331      	movs	r3, #49	@ 0x31
 800747e:	f88a 3000 	strb.w	r3, [sl]
 8007482:	e5b9      	b.n	8006ff8 <_dtoa_r+0x698>
 8007484:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007486:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80074e4 <_dtoa_r+0xb84>
 800748a:	b11b      	cbz	r3, 8007494 <_dtoa_r+0xb34>
 800748c:	f10a 0308 	add.w	r3, sl, #8
 8007490:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	4650      	mov	r0, sl
 8007496:	b019      	add	sp, #100	@ 0x64
 8007498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800749c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800749e:	2b01      	cmp	r3, #1
 80074a0:	f77f ae37 	ble.w	8007112 <_dtoa_r+0x7b2>
 80074a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80074a8:	2001      	movs	r0, #1
 80074aa:	e655      	b.n	8007158 <_dtoa_r+0x7f8>
 80074ac:	9b00      	ldr	r3, [sp, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f77f aed6 	ble.w	8007260 <_dtoa_r+0x900>
 80074b4:	4656      	mov	r6, sl
 80074b6:	4621      	mov	r1, r4
 80074b8:	4648      	mov	r0, r9
 80074ba:	f7ff f9c8 	bl	800684e <quorem>
 80074be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80074c2:	f806 8b01 	strb.w	r8, [r6], #1
 80074c6:	9b00      	ldr	r3, [sp, #0]
 80074c8:	eba6 020a 	sub.w	r2, r6, sl
 80074cc:	4293      	cmp	r3, r2
 80074ce:	ddb3      	ble.n	8007438 <_dtoa_r+0xad8>
 80074d0:	4649      	mov	r1, r9
 80074d2:	2300      	movs	r3, #0
 80074d4:	220a      	movs	r2, #10
 80074d6:	4658      	mov	r0, fp
 80074d8:	f000 f968 	bl	80077ac <__multadd>
 80074dc:	4681      	mov	r9, r0
 80074de:	e7ea      	b.n	80074b6 <_dtoa_r+0xb56>
 80074e0:	08008a04 	.word	0x08008a04
 80074e4:	08008988 	.word	0x08008988

080074e8 <_free_r>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	4605      	mov	r5, r0
 80074ec:	2900      	cmp	r1, #0
 80074ee:	d041      	beq.n	8007574 <_free_r+0x8c>
 80074f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074f4:	1f0c      	subs	r4, r1, #4
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bfb8      	it	lt
 80074fa:	18e4      	addlt	r4, r4, r3
 80074fc:	f000 f8e8 	bl	80076d0 <__malloc_lock>
 8007500:	4a1d      	ldr	r2, [pc, #116]	@ (8007578 <_free_r+0x90>)
 8007502:	6813      	ldr	r3, [r2, #0]
 8007504:	b933      	cbnz	r3, 8007514 <_free_r+0x2c>
 8007506:	6063      	str	r3, [r4, #4]
 8007508:	6014      	str	r4, [r2, #0]
 800750a:	4628      	mov	r0, r5
 800750c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007510:	f000 b8e4 	b.w	80076dc <__malloc_unlock>
 8007514:	42a3      	cmp	r3, r4
 8007516:	d908      	bls.n	800752a <_free_r+0x42>
 8007518:	6820      	ldr	r0, [r4, #0]
 800751a:	1821      	adds	r1, r4, r0
 800751c:	428b      	cmp	r3, r1
 800751e:	bf01      	itttt	eq
 8007520:	6819      	ldreq	r1, [r3, #0]
 8007522:	685b      	ldreq	r3, [r3, #4]
 8007524:	1809      	addeq	r1, r1, r0
 8007526:	6021      	streq	r1, [r4, #0]
 8007528:	e7ed      	b.n	8007506 <_free_r+0x1e>
 800752a:	461a      	mov	r2, r3
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	b10b      	cbz	r3, 8007534 <_free_r+0x4c>
 8007530:	42a3      	cmp	r3, r4
 8007532:	d9fa      	bls.n	800752a <_free_r+0x42>
 8007534:	6811      	ldr	r1, [r2, #0]
 8007536:	1850      	adds	r0, r2, r1
 8007538:	42a0      	cmp	r0, r4
 800753a:	d10b      	bne.n	8007554 <_free_r+0x6c>
 800753c:	6820      	ldr	r0, [r4, #0]
 800753e:	4401      	add	r1, r0
 8007540:	1850      	adds	r0, r2, r1
 8007542:	4283      	cmp	r3, r0
 8007544:	6011      	str	r1, [r2, #0]
 8007546:	d1e0      	bne.n	800750a <_free_r+0x22>
 8007548:	6818      	ldr	r0, [r3, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	6053      	str	r3, [r2, #4]
 800754e:	4408      	add	r0, r1
 8007550:	6010      	str	r0, [r2, #0]
 8007552:	e7da      	b.n	800750a <_free_r+0x22>
 8007554:	d902      	bls.n	800755c <_free_r+0x74>
 8007556:	230c      	movs	r3, #12
 8007558:	602b      	str	r3, [r5, #0]
 800755a:	e7d6      	b.n	800750a <_free_r+0x22>
 800755c:	6820      	ldr	r0, [r4, #0]
 800755e:	1821      	adds	r1, r4, r0
 8007560:	428b      	cmp	r3, r1
 8007562:	bf04      	itt	eq
 8007564:	6819      	ldreq	r1, [r3, #0]
 8007566:	685b      	ldreq	r3, [r3, #4]
 8007568:	6063      	str	r3, [r4, #4]
 800756a:	bf04      	itt	eq
 800756c:	1809      	addeq	r1, r1, r0
 800756e:	6021      	streq	r1, [r4, #0]
 8007570:	6054      	str	r4, [r2, #4]
 8007572:	e7ca      	b.n	800750a <_free_r+0x22>
 8007574:	bd38      	pop	{r3, r4, r5, pc}
 8007576:	bf00      	nop
 8007578:	20000560 	.word	0x20000560

0800757c <malloc>:
 800757c:	4b02      	ldr	r3, [pc, #8]	@ (8007588 <malloc+0xc>)
 800757e:	4601      	mov	r1, r0
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	f000 b825 	b.w	80075d0 <_malloc_r>
 8007586:	bf00      	nop
 8007588:	2000001c 	.word	0x2000001c

0800758c <sbrk_aligned>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	4e0f      	ldr	r6, [pc, #60]	@ (80075cc <sbrk_aligned+0x40>)
 8007590:	460c      	mov	r4, r1
 8007592:	6831      	ldr	r1, [r6, #0]
 8007594:	4605      	mov	r5, r0
 8007596:	b911      	cbnz	r1, 800759e <sbrk_aligned+0x12>
 8007598:	f000 fe46 	bl	8008228 <_sbrk_r>
 800759c:	6030      	str	r0, [r6, #0]
 800759e:	4621      	mov	r1, r4
 80075a0:	4628      	mov	r0, r5
 80075a2:	f000 fe41 	bl	8008228 <_sbrk_r>
 80075a6:	1c43      	adds	r3, r0, #1
 80075a8:	d103      	bne.n	80075b2 <sbrk_aligned+0x26>
 80075aa:	f04f 34ff 	mov.w	r4, #4294967295
 80075ae:	4620      	mov	r0, r4
 80075b0:	bd70      	pop	{r4, r5, r6, pc}
 80075b2:	1cc4      	adds	r4, r0, #3
 80075b4:	f024 0403 	bic.w	r4, r4, #3
 80075b8:	42a0      	cmp	r0, r4
 80075ba:	d0f8      	beq.n	80075ae <sbrk_aligned+0x22>
 80075bc:	1a21      	subs	r1, r4, r0
 80075be:	4628      	mov	r0, r5
 80075c0:	f000 fe32 	bl	8008228 <_sbrk_r>
 80075c4:	3001      	adds	r0, #1
 80075c6:	d1f2      	bne.n	80075ae <sbrk_aligned+0x22>
 80075c8:	e7ef      	b.n	80075aa <sbrk_aligned+0x1e>
 80075ca:	bf00      	nop
 80075cc:	2000055c 	.word	0x2000055c

080075d0 <_malloc_r>:
 80075d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075d4:	1ccd      	adds	r5, r1, #3
 80075d6:	f025 0503 	bic.w	r5, r5, #3
 80075da:	3508      	adds	r5, #8
 80075dc:	2d0c      	cmp	r5, #12
 80075de:	bf38      	it	cc
 80075e0:	250c      	movcc	r5, #12
 80075e2:	2d00      	cmp	r5, #0
 80075e4:	4606      	mov	r6, r0
 80075e6:	db01      	blt.n	80075ec <_malloc_r+0x1c>
 80075e8:	42a9      	cmp	r1, r5
 80075ea:	d904      	bls.n	80075f6 <_malloc_r+0x26>
 80075ec:	230c      	movs	r3, #12
 80075ee:	6033      	str	r3, [r6, #0]
 80075f0:	2000      	movs	r0, #0
 80075f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076cc <_malloc_r+0xfc>
 80075fa:	f000 f869 	bl	80076d0 <__malloc_lock>
 80075fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007602:	461c      	mov	r4, r3
 8007604:	bb44      	cbnz	r4, 8007658 <_malloc_r+0x88>
 8007606:	4629      	mov	r1, r5
 8007608:	4630      	mov	r0, r6
 800760a:	f7ff ffbf 	bl	800758c <sbrk_aligned>
 800760e:	1c43      	adds	r3, r0, #1
 8007610:	4604      	mov	r4, r0
 8007612:	d158      	bne.n	80076c6 <_malloc_r+0xf6>
 8007614:	f8d8 4000 	ldr.w	r4, [r8]
 8007618:	4627      	mov	r7, r4
 800761a:	2f00      	cmp	r7, #0
 800761c:	d143      	bne.n	80076a6 <_malloc_r+0xd6>
 800761e:	2c00      	cmp	r4, #0
 8007620:	d04b      	beq.n	80076ba <_malloc_r+0xea>
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	4639      	mov	r1, r7
 8007626:	4630      	mov	r0, r6
 8007628:	eb04 0903 	add.w	r9, r4, r3
 800762c:	f000 fdfc 	bl	8008228 <_sbrk_r>
 8007630:	4581      	cmp	r9, r0
 8007632:	d142      	bne.n	80076ba <_malloc_r+0xea>
 8007634:	6821      	ldr	r1, [r4, #0]
 8007636:	1a6d      	subs	r5, r5, r1
 8007638:	4629      	mov	r1, r5
 800763a:	4630      	mov	r0, r6
 800763c:	f7ff ffa6 	bl	800758c <sbrk_aligned>
 8007640:	3001      	adds	r0, #1
 8007642:	d03a      	beq.n	80076ba <_malloc_r+0xea>
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	442b      	add	r3, r5
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	f8d8 3000 	ldr.w	r3, [r8]
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	bb62      	cbnz	r2, 80076ac <_malloc_r+0xdc>
 8007652:	f8c8 7000 	str.w	r7, [r8]
 8007656:	e00f      	b.n	8007678 <_malloc_r+0xa8>
 8007658:	6822      	ldr	r2, [r4, #0]
 800765a:	1b52      	subs	r2, r2, r5
 800765c:	d420      	bmi.n	80076a0 <_malloc_r+0xd0>
 800765e:	2a0b      	cmp	r2, #11
 8007660:	d917      	bls.n	8007692 <_malloc_r+0xc2>
 8007662:	1961      	adds	r1, r4, r5
 8007664:	42a3      	cmp	r3, r4
 8007666:	6025      	str	r5, [r4, #0]
 8007668:	bf18      	it	ne
 800766a:	6059      	strne	r1, [r3, #4]
 800766c:	6863      	ldr	r3, [r4, #4]
 800766e:	bf08      	it	eq
 8007670:	f8c8 1000 	streq.w	r1, [r8]
 8007674:	5162      	str	r2, [r4, r5]
 8007676:	604b      	str	r3, [r1, #4]
 8007678:	4630      	mov	r0, r6
 800767a:	f000 f82f 	bl	80076dc <__malloc_unlock>
 800767e:	f104 000b 	add.w	r0, r4, #11
 8007682:	1d23      	adds	r3, r4, #4
 8007684:	f020 0007 	bic.w	r0, r0, #7
 8007688:	1ac2      	subs	r2, r0, r3
 800768a:	bf1c      	itt	ne
 800768c:	1a1b      	subne	r3, r3, r0
 800768e:	50a3      	strne	r3, [r4, r2]
 8007690:	e7af      	b.n	80075f2 <_malloc_r+0x22>
 8007692:	6862      	ldr	r2, [r4, #4]
 8007694:	42a3      	cmp	r3, r4
 8007696:	bf0c      	ite	eq
 8007698:	f8c8 2000 	streq.w	r2, [r8]
 800769c:	605a      	strne	r2, [r3, #4]
 800769e:	e7eb      	b.n	8007678 <_malloc_r+0xa8>
 80076a0:	4623      	mov	r3, r4
 80076a2:	6864      	ldr	r4, [r4, #4]
 80076a4:	e7ae      	b.n	8007604 <_malloc_r+0x34>
 80076a6:	463c      	mov	r4, r7
 80076a8:	687f      	ldr	r7, [r7, #4]
 80076aa:	e7b6      	b.n	800761a <_malloc_r+0x4a>
 80076ac:	461a      	mov	r2, r3
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	42a3      	cmp	r3, r4
 80076b2:	d1fb      	bne.n	80076ac <_malloc_r+0xdc>
 80076b4:	2300      	movs	r3, #0
 80076b6:	6053      	str	r3, [r2, #4]
 80076b8:	e7de      	b.n	8007678 <_malloc_r+0xa8>
 80076ba:	230c      	movs	r3, #12
 80076bc:	6033      	str	r3, [r6, #0]
 80076be:	4630      	mov	r0, r6
 80076c0:	f000 f80c 	bl	80076dc <__malloc_unlock>
 80076c4:	e794      	b.n	80075f0 <_malloc_r+0x20>
 80076c6:	6005      	str	r5, [r0, #0]
 80076c8:	e7d6      	b.n	8007678 <_malloc_r+0xa8>
 80076ca:	bf00      	nop
 80076cc:	20000560 	.word	0x20000560

080076d0 <__malloc_lock>:
 80076d0:	4801      	ldr	r0, [pc, #4]	@ (80076d8 <__malloc_lock+0x8>)
 80076d2:	f7ff b8ba 	b.w	800684a <__retarget_lock_acquire_recursive>
 80076d6:	bf00      	nop
 80076d8:	20000558 	.word	0x20000558

080076dc <__malloc_unlock>:
 80076dc:	4801      	ldr	r0, [pc, #4]	@ (80076e4 <__malloc_unlock+0x8>)
 80076de:	f7ff b8b5 	b.w	800684c <__retarget_lock_release_recursive>
 80076e2:	bf00      	nop
 80076e4:	20000558 	.word	0x20000558

080076e8 <_Balloc>:
 80076e8:	b570      	push	{r4, r5, r6, lr}
 80076ea:	69c6      	ldr	r6, [r0, #28]
 80076ec:	4604      	mov	r4, r0
 80076ee:	460d      	mov	r5, r1
 80076f0:	b976      	cbnz	r6, 8007710 <_Balloc+0x28>
 80076f2:	2010      	movs	r0, #16
 80076f4:	f7ff ff42 	bl	800757c <malloc>
 80076f8:	4602      	mov	r2, r0
 80076fa:	61e0      	str	r0, [r4, #28]
 80076fc:	b920      	cbnz	r0, 8007708 <_Balloc+0x20>
 80076fe:	4b18      	ldr	r3, [pc, #96]	@ (8007760 <_Balloc+0x78>)
 8007700:	4818      	ldr	r0, [pc, #96]	@ (8007764 <_Balloc+0x7c>)
 8007702:	216b      	movs	r1, #107	@ 0x6b
 8007704:	f000 fdae 	bl	8008264 <__assert_func>
 8007708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800770c:	6006      	str	r6, [r0, #0]
 800770e:	60c6      	str	r6, [r0, #12]
 8007710:	69e6      	ldr	r6, [r4, #28]
 8007712:	68f3      	ldr	r3, [r6, #12]
 8007714:	b183      	cbz	r3, 8007738 <_Balloc+0x50>
 8007716:	69e3      	ldr	r3, [r4, #28]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800771e:	b9b8      	cbnz	r0, 8007750 <_Balloc+0x68>
 8007720:	2101      	movs	r1, #1
 8007722:	fa01 f605 	lsl.w	r6, r1, r5
 8007726:	1d72      	adds	r2, r6, #5
 8007728:	0092      	lsls	r2, r2, #2
 800772a:	4620      	mov	r0, r4
 800772c:	f000 fdb8 	bl	80082a0 <_calloc_r>
 8007730:	b160      	cbz	r0, 800774c <_Balloc+0x64>
 8007732:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007736:	e00e      	b.n	8007756 <_Balloc+0x6e>
 8007738:	2221      	movs	r2, #33	@ 0x21
 800773a:	2104      	movs	r1, #4
 800773c:	4620      	mov	r0, r4
 800773e:	f000 fdaf 	bl	80082a0 <_calloc_r>
 8007742:	69e3      	ldr	r3, [r4, #28]
 8007744:	60f0      	str	r0, [r6, #12]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e4      	bne.n	8007716 <_Balloc+0x2e>
 800774c:	2000      	movs	r0, #0
 800774e:	bd70      	pop	{r4, r5, r6, pc}
 8007750:	6802      	ldr	r2, [r0, #0]
 8007752:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007756:	2300      	movs	r3, #0
 8007758:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800775c:	e7f7      	b.n	800774e <_Balloc+0x66>
 800775e:	bf00      	nop
 8007760:	08008995 	.word	0x08008995
 8007764:	08008a15 	.word	0x08008a15

08007768 <_Bfree>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	69c6      	ldr	r6, [r0, #28]
 800776c:	4605      	mov	r5, r0
 800776e:	460c      	mov	r4, r1
 8007770:	b976      	cbnz	r6, 8007790 <_Bfree+0x28>
 8007772:	2010      	movs	r0, #16
 8007774:	f7ff ff02 	bl	800757c <malloc>
 8007778:	4602      	mov	r2, r0
 800777a:	61e8      	str	r0, [r5, #28]
 800777c:	b920      	cbnz	r0, 8007788 <_Bfree+0x20>
 800777e:	4b09      	ldr	r3, [pc, #36]	@ (80077a4 <_Bfree+0x3c>)
 8007780:	4809      	ldr	r0, [pc, #36]	@ (80077a8 <_Bfree+0x40>)
 8007782:	218f      	movs	r1, #143	@ 0x8f
 8007784:	f000 fd6e 	bl	8008264 <__assert_func>
 8007788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800778c:	6006      	str	r6, [r0, #0]
 800778e:	60c6      	str	r6, [r0, #12]
 8007790:	b13c      	cbz	r4, 80077a2 <_Bfree+0x3a>
 8007792:	69eb      	ldr	r3, [r5, #28]
 8007794:	6862      	ldr	r2, [r4, #4]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800779c:	6021      	str	r1, [r4, #0]
 800779e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077a2:	bd70      	pop	{r4, r5, r6, pc}
 80077a4:	08008995 	.word	0x08008995
 80077a8:	08008a15 	.word	0x08008a15

080077ac <__multadd>:
 80077ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b0:	690d      	ldr	r5, [r1, #16]
 80077b2:	4607      	mov	r7, r0
 80077b4:	460c      	mov	r4, r1
 80077b6:	461e      	mov	r6, r3
 80077b8:	f101 0c14 	add.w	ip, r1, #20
 80077bc:	2000      	movs	r0, #0
 80077be:	f8dc 3000 	ldr.w	r3, [ip]
 80077c2:	b299      	uxth	r1, r3
 80077c4:	fb02 6101 	mla	r1, r2, r1, r6
 80077c8:	0c1e      	lsrs	r6, r3, #16
 80077ca:	0c0b      	lsrs	r3, r1, #16
 80077cc:	fb02 3306 	mla	r3, r2, r6, r3
 80077d0:	b289      	uxth	r1, r1
 80077d2:	3001      	adds	r0, #1
 80077d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077d8:	4285      	cmp	r5, r0
 80077da:	f84c 1b04 	str.w	r1, [ip], #4
 80077de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077e2:	dcec      	bgt.n	80077be <__multadd+0x12>
 80077e4:	b30e      	cbz	r6, 800782a <__multadd+0x7e>
 80077e6:	68a3      	ldr	r3, [r4, #8]
 80077e8:	42ab      	cmp	r3, r5
 80077ea:	dc19      	bgt.n	8007820 <__multadd+0x74>
 80077ec:	6861      	ldr	r1, [r4, #4]
 80077ee:	4638      	mov	r0, r7
 80077f0:	3101      	adds	r1, #1
 80077f2:	f7ff ff79 	bl	80076e8 <_Balloc>
 80077f6:	4680      	mov	r8, r0
 80077f8:	b928      	cbnz	r0, 8007806 <__multadd+0x5a>
 80077fa:	4602      	mov	r2, r0
 80077fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007830 <__multadd+0x84>)
 80077fe:	480d      	ldr	r0, [pc, #52]	@ (8007834 <__multadd+0x88>)
 8007800:	21ba      	movs	r1, #186	@ 0xba
 8007802:	f000 fd2f 	bl	8008264 <__assert_func>
 8007806:	6922      	ldr	r2, [r4, #16]
 8007808:	3202      	adds	r2, #2
 800780a:	f104 010c 	add.w	r1, r4, #12
 800780e:	0092      	lsls	r2, r2, #2
 8007810:	300c      	adds	r0, #12
 8007812:	f000 fd19 	bl	8008248 <memcpy>
 8007816:	4621      	mov	r1, r4
 8007818:	4638      	mov	r0, r7
 800781a:	f7ff ffa5 	bl	8007768 <_Bfree>
 800781e:	4644      	mov	r4, r8
 8007820:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007824:	3501      	adds	r5, #1
 8007826:	615e      	str	r6, [r3, #20]
 8007828:	6125      	str	r5, [r4, #16]
 800782a:	4620      	mov	r0, r4
 800782c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007830:	08008a04 	.word	0x08008a04
 8007834:	08008a15 	.word	0x08008a15

08007838 <__hi0bits>:
 8007838:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800783c:	4603      	mov	r3, r0
 800783e:	bf36      	itet	cc
 8007840:	0403      	lslcc	r3, r0, #16
 8007842:	2000      	movcs	r0, #0
 8007844:	2010      	movcc	r0, #16
 8007846:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800784a:	bf3c      	itt	cc
 800784c:	021b      	lslcc	r3, r3, #8
 800784e:	3008      	addcc	r0, #8
 8007850:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007854:	bf3c      	itt	cc
 8007856:	011b      	lslcc	r3, r3, #4
 8007858:	3004      	addcc	r0, #4
 800785a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800785e:	bf3c      	itt	cc
 8007860:	009b      	lslcc	r3, r3, #2
 8007862:	3002      	addcc	r0, #2
 8007864:	2b00      	cmp	r3, #0
 8007866:	db05      	blt.n	8007874 <__hi0bits+0x3c>
 8007868:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800786c:	f100 0001 	add.w	r0, r0, #1
 8007870:	bf08      	it	eq
 8007872:	2020      	moveq	r0, #32
 8007874:	4770      	bx	lr

08007876 <__lo0bits>:
 8007876:	6803      	ldr	r3, [r0, #0]
 8007878:	4602      	mov	r2, r0
 800787a:	f013 0007 	ands.w	r0, r3, #7
 800787e:	d00b      	beq.n	8007898 <__lo0bits+0x22>
 8007880:	07d9      	lsls	r1, r3, #31
 8007882:	d421      	bmi.n	80078c8 <__lo0bits+0x52>
 8007884:	0798      	lsls	r0, r3, #30
 8007886:	bf49      	itett	mi
 8007888:	085b      	lsrmi	r3, r3, #1
 800788a:	089b      	lsrpl	r3, r3, #2
 800788c:	2001      	movmi	r0, #1
 800788e:	6013      	strmi	r3, [r2, #0]
 8007890:	bf5c      	itt	pl
 8007892:	6013      	strpl	r3, [r2, #0]
 8007894:	2002      	movpl	r0, #2
 8007896:	4770      	bx	lr
 8007898:	b299      	uxth	r1, r3
 800789a:	b909      	cbnz	r1, 80078a0 <__lo0bits+0x2a>
 800789c:	0c1b      	lsrs	r3, r3, #16
 800789e:	2010      	movs	r0, #16
 80078a0:	b2d9      	uxtb	r1, r3
 80078a2:	b909      	cbnz	r1, 80078a8 <__lo0bits+0x32>
 80078a4:	3008      	adds	r0, #8
 80078a6:	0a1b      	lsrs	r3, r3, #8
 80078a8:	0719      	lsls	r1, r3, #28
 80078aa:	bf04      	itt	eq
 80078ac:	091b      	lsreq	r3, r3, #4
 80078ae:	3004      	addeq	r0, #4
 80078b0:	0799      	lsls	r1, r3, #30
 80078b2:	bf04      	itt	eq
 80078b4:	089b      	lsreq	r3, r3, #2
 80078b6:	3002      	addeq	r0, #2
 80078b8:	07d9      	lsls	r1, r3, #31
 80078ba:	d403      	bmi.n	80078c4 <__lo0bits+0x4e>
 80078bc:	085b      	lsrs	r3, r3, #1
 80078be:	f100 0001 	add.w	r0, r0, #1
 80078c2:	d003      	beq.n	80078cc <__lo0bits+0x56>
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	4770      	bx	lr
 80078c8:	2000      	movs	r0, #0
 80078ca:	4770      	bx	lr
 80078cc:	2020      	movs	r0, #32
 80078ce:	4770      	bx	lr

080078d0 <__i2b>:
 80078d0:	b510      	push	{r4, lr}
 80078d2:	460c      	mov	r4, r1
 80078d4:	2101      	movs	r1, #1
 80078d6:	f7ff ff07 	bl	80076e8 <_Balloc>
 80078da:	4602      	mov	r2, r0
 80078dc:	b928      	cbnz	r0, 80078ea <__i2b+0x1a>
 80078de:	4b05      	ldr	r3, [pc, #20]	@ (80078f4 <__i2b+0x24>)
 80078e0:	4805      	ldr	r0, [pc, #20]	@ (80078f8 <__i2b+0x28>)
 80078e2:	f240 1145 	movw	r1, #325	@ 0x145
 80078e6:	f000 fcbd 	bl	8008264 <__assert_func>
 80078ea:	2301      	movs	r3, #1
 80078ec:	6144      	str	r4, [r0, #20]
 80078ee:	6103      	str	r3, [r0, #16]
 80078f0:	bd10      	pop	{r4, pc}
 80078f2:	bf00      	nop
 80078f4:	08008a04 	.word	0x08008a04
 80078f8:	08008a15 	.word	0x08008a15

080078fc <__multiply>:
 80078fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007900:	4614      	mov	r4, r2
 8007902:	690a      	ldr	r2, [r1, #16]
 8007904:	6923      	ldr	r3, [r4, #16]
 8007906:	429a      	cmp	r2, r3
 8007908:	bfa8      	it	ge
 800790a:	4623      	movge	r3, r4
 800790c:	460f      	mov	r7, r1
 800790e:	bfa4      	itt	ge
 8007910:	460c      	movge	r4, r1
 8007912:	461f      	movge	r7, r3
 8007914:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007918:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800791c:	68a3      	ldr	r3, [r4, #8]
 800791e:	6861      	ldr	r1, [r4, #4]
 8007920:	eb0a 0609 	add.w	r6, sl, r9
 8007924:	42b3      	cmp	r3, r6
 8007926:	b085      	sub	sp, #20
 8007928:	bfb8      	it	lt
 800792a:	3101      	addlt	r1, #1
 800792c:	f7ff fedc 	bl	80076e8 <_Balloc>
 8007930:	b930      	cbnz	r0, 8007940 <__multiply+0x44>
 8007932:	4602      	mov	r2, r0
 8007934:	4b44      	ldr	r3, [pc, #272]	@ (8007a48 <__multiply+0x14c>)
 8007936:	4845      	ldr	r0, [pc, #276]	@ (8007a4c <__multiply+0x150>)
 8007938:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800793c:	f000 fc92 	bl	8008264 <__assert_func>
 8007940:	f100 0514 	add.w	r5, r0, #20
 8007944:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007948:	462b      	mov	r3, r5
 800794a:	2200      	movs	r2, #0
 800794c:	4543      	cmp	r3, r8
 800794e:	d321      	bcc.n	8007994 <__multiply+0x98>
 8007950:	f107 0114 	add.w	r1, r7, #20
 8007954:	f104 0214 	add.w	r2, r4, #20
 8007958:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800795c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007960:	9302      	str	r3, [sp, #8]
 8007962:	1b13      	subs	r3, r2, r4
 8007964:	3b15      	subs	r3, #21
 8007966:	f023 0303 	bic.w	r3, r3, #3
 800796a:	3304      	adds	r3, #4
 800796c:	f104 0715 	add.w	r7, r4, #21
 8007970:	42ba      	cmp	r2, r7
 8007972:	bf38      	it	cc
 8007974:	2304      	movcc	r3, #4
 8007976:	9301      	str	r3, [sp, #4]
 8007978:	9b02      	ldr	r3, [sp, #8]
 800797a:	9103      	str	r1, [sp, #12]
 800797c:	428b      	cmp	r3, r1
 800797e:	d80c      	bhi.n	800799a <__multiply+0x9e>
 8007980:	2e00      	cmp	r6, #0
 8007982:	dd03      	ble.n	800798c <__multiply+0x90>
 8007984:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007988:	2b00      	cmp	r3, #0
 800798a:	d05b      	beq.n	8007a44 <__multiply+0x148>
 800798c:	6106      	str	r6, [r0, #16]
 800798e:	b005      	add	sp, #20
 8007990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007994:	f843 2b04 	str.w	r2, [r3], #4
 8007998:	e7d8      	b.n	800794c <__multiply+0x50>
 800799a:	f8b1 a000 	ldrh.w	sl, [r1]
 800799e:	f1ba 0f00 	cmp.w	sl, #0
 80079a2:	d024      	beq.n	80079ee <__multiply+0xf2>
 80079a4:	f104 0e14 	add.w	lr, r4, #20
 80079a8:	46a9      	mov	r9, r5
 80079aa:	f04f 0c00 	mov.w	ip, #0
 80079ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80079b2:	f8d9 3000 	ldr.w	r3, [r9]
 80079b6:	fa1f fb87 	uxth.w	fp, r7
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	fb0a 330b 	mla	r3, sl, fp, r3
 80079c0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80079c4:	f8d9 7000 	ldr.w	r7, [r9]
 80079c8:	4463      	add	r3, ip
 80079ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80079ce:	fb0a c70b 	mla	r7, sl, fp, ip
 80079d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80079dc:	4572      	cmp	r2, lr
 80079de:	f849 3b04 	str.w	r3, [r9], #4
 80079e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80079e6:	d8e2      	bhi.n	80079ae <__multiply+0xb2>
 80079e8:	9b01      	ldr	r3, [sp, #4]
 80079ea:	f845 c003 	str.w	ip, [r5, r3]
 80079ee:	9b03      	ldr	r3, [sp, #12]
 80079f0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80079f4:	3104      	adds	r1, #4
 80079f6:	f1b9 0f00 	cmp.w	r9, #0
 80079fa:	d021      	beq.n	8007a40 <__multiply+0x144>
 80079fc:	682b      	ldr	r3, [r5, #0]
 80079fe:	f104 0c14 	add.w	ip, r4, #20
 8007a02:	46ae      	mov	lr, r5
 8007a04:	f04f 0a00 	mov.w	sl, #0
 8007a08:	f8bc b000 	ldrh.w	fp, [ip]
 8007a0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007a10:	fb09 770b 	mla	r7, r9, fp, r7
 8007a14:	4457      	add	r7, sl
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007a1c:	f84e 3b04 	str.w	r3, [lr], #4
 8007a20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a28:	f8be 3000 	ldrh.w	r3, [lr]
 8007a2c:	fb09 330a 	mla	r3, r9, sl, r3
 8007a30:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007a34:	4562      	cmp	r2, ip
 8007a36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a3a:	d8e5      	bhi.n	8007a08 <__multiply+0x10c>
 8007a3c:	9f01      	ldr	r7, [sp, #4]
 8007a3e:	51eb      	str	r3, [r5, r7]
 8007a40:	3504      	adds	r5, #4
 8007a42:	e799      	b.n	8007978 <__multiply+0x7c>
 8007a44:	3e01      	subs	r6, #1
 8007a46:	e79b      	b.n	8007980 <__multiply+0x84>
 8007a48:	08008a04 	.word	0x08008a04
 8007a4c:	08008a15 	.word	0x08008a15

08007a50 <__pow5mult>:
 8007a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a54:	4615      	mov	r5, r2
 8007a56:	f012 0203 	ands.w	r2, r2, #3
 8007a5a:	4607      	mov	r7, r0
 8007a5c:	460e      	mov	r6, r1
 8007a5e:	d007      	beq.n	8007a70 <__pow5mult+0x20>
 8007a60:	4c25      	ldr	r4, [pc, #148]	@ (8007af8 <__pow5mult+0xa8>)
 8007a62:	3a01      	subs	r2, #1
 8007a64:	2300      	movs	r3, #0
 8007a66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a6a:	f7ff fe9f 	bl	80077ac <__multadd>
 8007a6e:	4606      	mov	r6, r0
 8007a70:	10ad      	asrs	r5, r5, #2
 8007a72:	d03d      	beq.n	8007af0 <__pow5mult+0xa0>
 8007a74:	69fc      	ldr	r4, [r7, #28]
 8007a76:	b97c      	cbnz	r4, 8007a98 <__pow5mult+0x48>
 8007a78:	2010      	movs	r0, #16
 8007a7a:	f7ff fd7f 	bl	800757c <malloc>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	61f8      	str	r0, [r7, #28]
 8007a82:	b928      	cbnz	r0, 8007a90 <__pow5mult+0x40>
 8007a84:	4b1d      	ldr	r3, [pc, #116]	@ (8007afc <__pow5mult+0xac>)
 8007a86:	481e      	ldr	r0, [pc, #120]	@ (8007b00 <__pow5mult+0xb0>)
 8007a88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007a8c:	f000 fbea 	bl	8008264 <__assert_func>
 8007a90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a94:	6004      	str	r4, [r0, #0]
 8007a96:	60c4      	str	r4, [r0, #12]
 8007a98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007aa0:	b94c      	cbnz	r4, 8007ab6 <__pow5mult+0x66>
 8007aa2:	f240 2171 	movw	r1, #625	@ 0x271
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	f7ff ff12 	bl	80078d0 <__i2b>
 8007aac:	2300      	movs	r3, #0
 8007aae:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	6003      	str	r3, [r0, #0]
 8007ab6:	f04f 0900 	mov.w	r9, #0
 8007aba:	07eb      	lsls	r3, r5, #31
 8007abc:	d50a      	bpl.n	8007ad4 <__pow5mult+0x84>
 8007abe:	4631      	mov	r1, r6
 8007ac0:	4622      	mov	r2, r4
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	f7ff ff1a 	bl	80078fc <__multiply>
 8007ac8:	4631      	mov	r1, r6
 8007aca:	4680      	mov	r8, r0
 8007acc:	4638      	mov	r0, r7
 8007ace:	f7ff fe4b 	bl	8007768 <_Bfree>
 8007ad2:	4646      	mov	r6, r8
 8007ad4:	106d      	asrs	r5, r5, #1
 8007ad6:	d00b      	beq.n	8007af0 <__pow5mult+0xa0>
 8007ad8:	6820      	ldr	r0, [r4, #0]
 8007ada:	b938      	cbnz	r0, 8007aec <__pow5mult+0x9c>
 8007adc:	4622      	mov	r2, r4
 8007ade:	4621      	mov	r1, r4
 8007ae0:	4638      	mov	r0, r7
 8007ae2:	f7ff ff0b 	bl	80078fc <__multiply>
 8007ae6:	6020      	str	r0, [r4, #0]
 8007ae8:	f8c0 9000 	str.w	r9, [r0]
 8007aec:	4604      	mov	r4, r0
 8007aee:	e7e4      	b.n	8007aba <__pow5mult+0x6a>
 8007af0:	4630      	mov	r0, r6
 8007af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007af6:	bf00      	nop
 8007af8:	08008a70 	.word	0x08008a70
 8007afc:	08008995 	.word	0x08008995
 8007b00:	08008a15 	.word	0x08008a15

08007b04 <__lshift>:
 8007b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b08:	460c      	mov	r4, r1
 8007b0a:	6849      	ldr	r1, [r1, #4]
 8007b0c:	6923      	ldr	r3, [r4, #16]
 8007b0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b12:	68a3      	ldr	r3, [r4, #8]
 8007b14:	4607      	mov	r7, r0
 8007b16:	4691      	mov	r9, r2
 8007b18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b1c:	f108 0601 	add.w	r6, r8, #1
 8007b20:	42b3      	cmp	r3, r6
 8007b22:	db0b      	blt.n	8007b3c <__lshift+0x38>
 8007b24:	4638      	mov	r0, r7
 8007b26:	f7ff fddf 	bl	80076e8 <_Balloc>
 8007b2a:	4605      	mov	r5, r0
 8007b2c:	b948      	cbnz	r0, 8007b42 <__lshift+0x3e>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	4b28      	ldr	r3, [pc, #160]	@ (8007bd4 <__lshift+0xd0>)
 8007b32:	4829      	ldr	r0, [pc, #164]	@ (8007bd8 <__lshift+0xd4>)
 8007b34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007b38:	f000 fb94 	bl	8008264 <__assert_func>
 8007b3c:	3101      	adds	r1, #1
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	e7ee      	b.n	8007b20 <__lshift+0x1c>
 8007b42:	2300      	movs	r3, #0
 8007b44:	f100 0114 	add.w	r1, r0, #20
 8007b48:	f100 0210 	add.w	r2, r0, #16
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	4553      	cmp	r3, sl
 8007b50:	db33      	blt.n	8007bba <__lshift+0xb6>
 8007b52:	6920      	ldr	r0, [r4, #16]
 8007b54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b58:	f104 0314 	add.w	r3, r4, #20
 8007b5c:	f019 091f 	ands.w	r9, r9, #31
 8007b60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b68:	d02b      	beq.n	8007bc2 <__lshift+0xbe>
 8007b6a:	f1c9 0e20 	rsb	lr, r9, #32
 8007b6e:	468a      	mov	sl, r1
 8007b70:	2200      	movs	r2, #0
 8007b72:	6818      	ldr	r0, [r3, #0]
 8007b74:	fa00 f009 	lsl.w	r0, r0, r9
 8007b78:	4310      	orrs	r0, r2
 8007b7a:	f84a 0b04 	str.w	r0, [sl], #4
 8007b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b82:	459c      	cmp	ip, r3
 8007b84:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b88:	d8f3      	bhi.n	8007b72 <__lshift+0x6e>
 8007b8a:	ebac 0304 	sub.w	r3, ip, r4
 8007b8e:	3b15      	subs	r3, #21
 8007b90:	f023 0303 	bic.w	r3, r3, #3
 8007b94:	3304      	adds	r3, #4
 8007b96:	f104 0015 	add.w	r0, r4, #21
 8007b9a:	4584      	cmp	ip, r0
 8007b9c:	bf38      	it	cc
 8007b9e:	2304      	movcc	r3, #4
 8007ba0:	50ca      	str	r2, [r1, r3]
 8007ba2:	b10a      	cbz	r2, 8007ba8 <__lshift+0xa4>
 8007ba4:	f108 0602 	add.w	r6, r8, #2
 8007ba8:	3e01      	subs	r6, #1
 8007baa:	4638      	mov	r0, r7
 8007bac:	612e      	str	r6, [r5, #16]
 8007bae:	4621      	mov	r1, r4
 8007bb0:	f7ff fdda 	bl	8007768 <_Bfree>
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bba:	f842 0f04 	str.w	r0, [r2, #4]!
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	e7c5      	b.n	8007b4e <__lshift+0x4a>
 8007bc2:	3904      	subs	r1, #4
 8007bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007bcc:	459c      	cmp	ip, r3
 8007bce:	d8f9      	bhi.n	8007bc4 <__lshift+0xc0>
 8007bd0:	e7ea      	b.n	8007ba8 <__lshift+0xa4>
 8007bd2:	bf00      	nop
 8007bd4:	08008a04 	.word	0x08008a04
 8007bd8:	08008a15 	.word	0x08008a15

08007bdc <__mcmp>:
 8007bdc:	690a      	ldr	r2, [r1, #16]
 8007bde:	4603      	mov	r3, r0
 8007be0:	6900      	ldr	r0, [r0, #16]
 8007be2:	1a80      	subs	r0, r0, r2
 8007be4:	b530      	push	{r4, r5, lr}
 8007be6:	d10e      	bne.n	8007c06 <__mcmp+0x2a>
 8007be8:	3314      	adds	r3, #20
 8007bea:	3114      	adds	r1, #20
 8007bec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007bf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007bf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007bf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007bfc:	4295      	cmp	r5, r2
 8007bfe:	d003      	beq.n	8007c08 <__mcmp+0x2c>
 8007c00:	d205      	bcs.n	8007c0e <__mcmp+0x32>
 8007c02:	f04f 30ff 	mov.w	r0, #4294967295
 8007c06:	bd30      	pop	{r4, r5, pc}
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	d3f3      	bcc.n	8007bf4 <__mcmp+0x18>
 8007c0c:	e7fb      	b.n	8007c06 <__mcmp+0x2a>
 8007c0e:	2001      	movs	r0, #1
 8007c10:	e7f9      	b.n	8007c06 <__mcmp+0x2a>
	...

08007c14 <__mdiff>:
 8007c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c18:	4689      	mov	r9, r1
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	4648      	mov	r0, r9
 8007c20:	4614      	mov	r4, r2
 8007c22:	f7ff ffdb 	bl	8007bdc <__mcmp>
 8007c26:	1e05      	subs	r5, r0, #0
 8007c28:	d112      	bne.n	8007c50 <__mdiff+0x3c>
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	f7ff fd5b 	bl	80076e8 <_Balloc>
 8007c32:	4602      	mov	r2, r0
 8007c34:	b928      	cbnz	r0, 8007c42 <__mdiff+0x2e>
 8007c36:	4b3f      	ldr	r3, [pc, #252]	@ (8007d34 <__mdiff+0x120>)
 8007c38:	f240 2137 	movw	r1, #567	@ 0x237
 8007c3c:	483e      	ldr	r0, [pc, #248]	@ (8007d38 <__mdiff+0x124>)
 8007c3e:	f000 fb11 	bl	8008264 <__assert_func>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c48:	4610      	mov	r0, r2
 8007c4a:	b003      	add	sp, #12
 8007c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c50:	bfbc      	itt	lt
 8007c52:	464b      	movlt	r3, r9
 8007c54:	46a1      	movlt	r9, r4
 8007c56:	4630      	mov	r0, r6
 8007c58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c5c:	bfba      	itte	lt
 8007c5e:	461c      	movlt	r4, r3
 8007c60:	2501      	movlt	r5, #1
 8007c62:	2500      	movge	r5, #0
 8007c64:	f7ff fd40 	bl	80076e8 <_Balloc>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	b918      	cbnz	r0, 8007c74 <__mdiff+0x60>
 8007c6c:	4b31      	ldr	r3, [pc, #196]	@ (8007d34 <__mdiff+0x120>)
 8007c6e:	f240 2145 	movw	r1, #581	@ 0x245
 8007c72:	e7e3      	b.n	8007c3c <__mdiff+0x28>
 8007c74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c78:	6926      	ldr	r6, [r4, #16]
 8007c7a:	60c5      	str	r5, [r0, #12]
 8007c7c:	f109 0310 	add.w	r3, r9, #16
 8007c80:	f109 0514 	add.w	r5, r9, #20
 8007c84:	f104 0e14 	add.w	lr, r4, #20
 8007c88:	f100 0b14 	add.w	fp, r0, #20
 8007c8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c94:	9301      	str	r3, [sp, #4]
 8007c96:	46d9      	mov	r9, fp
 8007c98:	f04f 0c00 	mov.w	ip, #0
 8007c9c:	9b01      	ldr	r3, [sp, #4]
 8007c9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007ca2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007ca6:	9301      	str	r3, [sp, #4]
 8007ca8:	fa1f f38a 	uxth.w	r3, sl
 8007cac:	4619      	mov	r1, r3
 8007cae:	b283      	uxth	r3, r0
 8007cb0:	1acb      	subs	r3, r1, r3
 8007cb2:	0c00      	lsrs	r0, r0, #16
 8007cb4:	4463      	add	r3, ip
 8007cb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007cba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007cc4:	4576      	cmp	r6, lr
 8007cc6:	f849 3b04 	str.w	r3, [r9], #4
 8007cca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007cce:	d8e5      	bhi.n	8007c9c <__mdiff+0x88>
 8007cd0:	1b33      	subs	r3, r6, r4
 8007cd2:	3b15      	subs	r3, #21
 8007cd4:	f023 0303 	bic.w	r3, r3, #3
 8007cd8:	3415      	adds	r4, #21
 8007cda:	3304      	adds	r3, #4
 8007cdc:	42a6      	cmp	r6, r4
 8007cde:	bf38      	it	cc
 8007ce0:	2304      	movcc	r3, #4
 8007ce2:	441d      	add	r5, r3
 8007ce4:	445b      	add	r3, fp
 8007ce6:	461e      	mov	r6, r3
 8007ce8:	462c      	mov	r4, r5
 8007cea:	4544      	cmp	r4, r8
 8007cec:	d30e      	bcc.n	8007d0c <__mdiff+0xf8>
 8007cee:	f108 0103 	add.w	r1, r8, #3
 8007cf2:	1b49      	subs	r1, r1, r5
 8007cf4:	f021 0103 	bic.w	r1, r1, #3
 8007cf8:	3d03      	subs	r5, #3
 8007cfa:	45a8      	cmp	r8, r5
 8007cfc:	bf38      	it	cc
 8007cfe:	2100      	movcc	r1, #0
 8007d00:	440b      	add	r3, r1
 8007d02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d06:	b191      	cbz	r1, 8007d2e <__mdiff+0x11a>
 8007d08:	6117      	str	r7, [r2, #16]
 8007d0a:	e79d      	b.n	8007c48 <__mdiff+0x34>
 8007d0c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007d10:	46e6      	mov	lr, ip
 8007d12:	0c08      	lsrs	r0, r1, #16
 8007d14:	fa1c fc81 	uxtah	ip, ip, r1
 8007d18:	4471      	add	r1, lr
 8007d1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007d1e:	b289      	uxth	r1, r1
 8007d20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007d24:	f846 1b04 	str.w	r1, [r6], #4
 8007d28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d2c:	e7dd      	b.n	8007cea <__mdiff+0xd6>
 8007d2e:	3f01      	subs	r7, #1
 8007d30:	e7e7      	b.n	8007d02 <__mdiff+0xee>
 8007d32:	bf00      	nop
 8007d34:	08008a04 	.word	0x08008a04
 8007d38:	08008a15 	.word	0x08008a15

08007d3c <__d2b>:
 8007d3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d40:	460f      	mov	r7, r1
 8007d42:	2101      	movs	r1, #1
 8007d44:	ec59 8b10 	vmov	r8, r9, d0
 8007d48:	4616      	mov	r6, r2
 8007d4a:	f7ff fccd 	bl	80076e8 <_Balloc>
 8007d4e:	4604      	mov	r4, r0
 8007d50:	b930      	cbnz	r0, 8007d60 <__d2b+0x24>
 8007d52:	4602      	mov	r2, r0
 8007d54:	4b23      	ldr	r3, [pc, #140]	@ (8007de4 <__d2b+0xa8>)
 8007d56:	4824      	ldr	r0, [pc, #144]	@ (8007de8 <__d2b+0xac>)
 8007d58:	f240 310f 	movw	r1, #783	@ 0x30f
 8007d5c:	f000 fa82 	bl	8008264 <__assert_func>
 8007d60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d68:	b10d      	cbz	r5, 8007d6e <__d2b+0x32>
 8007d6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	f1b8 0300 	subs.w	r3, r8, #0
 8007d74:	d023      	beq.n	8007dbe <__d2b+0x82>
 8007d76:	4668      	mov	r0, sp
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	f7ff fd7c 	bl	8007876 <__lo0bits>
 8007d7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d82:	b1d0      	cbz	r0, 8007dba <__d2b+0x7e>
 8007d84:	f1c0 0320 	rsb	r3, r0, #32
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	430b      	orrs	r3, r1
 8007d8e:	40c2      	lsrs	r2, r0
 8007d90:	6163      	str	r3, [r4, #20]
 8007d92:	9201      	str	r2, [sp, #4]
 8007d94:	9b01      	ldr	r3, [sp, #4]
 8007d96:	61a3      	str	r3, [r4, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	bf0c      	ite	eq
 8007d9c:	2201      	moveq	r2, #1
 8007d9e:	2202      	movne	r2, #2
 8007da0:	6122      	str	r2, [r4, #16]
 8007da2:	b1a5      	cbz	r5, 8007dce <__d2b+0x92>
 8007da4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007da8:	4405      	add	r5, r0
 8007daa:	603d      	str	r5, [r7, #0]
 8007dac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007db0:	6030      	str	r0, [r6, #0]
 8007db2:	4620      	mov	r0, r4
 8007db4:	b003      	add	sp, #12
 8007db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007dba:	6161      	str	r1, [r4, #20]
 8007dbc:	e7ea      	b.n	8007d94 <__d2b+0x58>
 8007dbe:	a801      	add	r0, sp, #4
 8007dc0:	f7ff fd59 	bl	8007876 <__lo0bits>
 8007dc4:	9b01      	ldr	r3, [sp, #4]
 8007dc6:	6163      	str	r3, [r4, #20]
 8007dc8:	3020      	adds	r0, #32
 8007dca:	2201      	movs	r2, #1
 8007dcc:	e7e8      	b.n	8007da0 <__d2b+0x64>
 8007dce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007dd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007dd6:	6038      	str	r0, [r7, #0]
 8007dd8:	6918      	ldr	r0, [r3, #16]
 8007dda:	f7ff fd2d 	bl	8007838 <__hi0bits>
 8007dde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007de2:	e7e5      	b.n	8007db0 <__d2b+0x74>
 8007de4:	08008a04 	.word	0x08008a04
 8007de8:	08008a15 	.word	0x08008a15

08007dec <__ssputs_r>:
 8007dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007df0:	688e      	ldr	r6, [r1, #8]
 8007df2:	461f      	mov	r7, r3
 8007df4:	42be      	cmp	r6, r7
 8007df6:	680b      	ldr	r3, [r1, #0]
 8007df8:	4682      	mov	sl, r0
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	4690      	mov	r8, r2
 8007dfe:	d82d      	bhi.n	8007e5c <__ssputs_r+0x70>
 8007e00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007e08:	d026      	beq.n	8007e58 <__ssputs_r+0x6c>
 8007e0a:	6965      	ldr	r5, [r4, #20]
 8007e0c:	6909      	ldr	r1, [r1, #16]
 8007e0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e12:	eba3 0901 	sub.w	r9, r3, r1
 8007e16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e1a:	1c7b      	adds	r3, r7, #1
 8007e1c:	444b      	add	r3, r9
 8007e1e:	106d      	asrs	r5, r5, #1
 8007e20:	429d      	cmp	r5, r3
 8007e22:	bf38      	it	cc
 8007e24:	461d      	movcc	r5, r3
 8007e26:	0553      	lsls	r3, r2, #21
 8007e28:	d527      	bpl.n	8007e7a <__ssputs_r+0x8e>
 8007e2a:	4629      	mov	r1, r5
 8007e2c:	f7ff fbd0 	bl	80075d0 <_malloc_r>
 8007e30:	4606      	mov	r6, r0
 8007e32:	b360      	cbz	r0, 8007e8e <__ssputs_r+0xa2>
 8007e34:	6921      	ldr	r1, [r4, #16]
 8007e36:	464a      	mov	r2, r9
 8007e38:	f000 fa06 	bl	8008248 <memcpy>
 8007e3c:	89a3      	ldrh	r3, [r4, #12]
 8007e3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007e42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e46:	81a3      	strh	r3, [r4, #12]
 8007e48:	6126      	str	r6, [r4, #16]
 8007e4a:	6165      	str	r5, [r4, #20]
 8007e4c:	444e      	add	r6, r9
 8007e4e:	eba5 0509 	sub.w	r5, r5, r9
 8007e52:	6026      	str	r6, [r4, #0]
 8007e54:	60a5      	str	r5, [r4, #8]
 8007e56:	463e      	mov	r6, r7
 8007e58:	42be      	cmp	r6, r7
 8007e5a:	d900      	bls.n	8007e5e <__ssputs_r+0x72>
 8007e5c:	463e      	mov	r6, r7
 8007e5e:	6820      	ldr	r0, [r4, #0]
 8007e60:	4632      	mov	r2, r6
 8007e62:	4641      	mov	r1, r8
 8007e64:	f000 f9c6 	bl	80081f4 <memmove>
 8007e68:	68a3      	ldr	r3, [r4, #8]
 8007e6a:	1b9b      	subs	r3, r3, r6
 8007e6c:	60a3      	str	r3, [r4, #8]
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	4433      	add	r3, r6
 8007e72:	6023      	str	r3, [r4, #0]
 8007e74:	2000      	movs	r0, #0
 8007e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e7a:	462a      	mov	r2, r5
 8007e7c:	f000 fa36 	bl	80082ec <_realloc_r>
 8007e80:	4606      	mov	r6, r0
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d1e0      	bne.n	8007e48 <__ssputs_r+0x5c>
 8007e86:	6921      	ldr	r1, [r4, #16]
 8007e88:	4650      	mov	r0, sl
 8007e8a:	f7ff fb2d 	bl	80074e8 <_free_r>
 8007e8e:	230c      	movs	r3, #12
 8007e90:	f8ca 3000 	str.w	r3, [sl]
 8007e94:	89a3      	ldrh	r3, [r4, #12]
 8007e96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e9a:	81a3      	strh	r3, [r4, #12]
 8007e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea0:	e7e9      	b.n	8007e76 <__ssputs_r+0x8a>
	...

08007ea4 <_svfiprintf_r>:
 8007ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea8:	4698      	mov	r8, r3
 8007eaa:	898b      	ldrh	r3, [r1, #12]
 8007eac:	061b      	lsls	r3, r3, #24
 8007eae:	b09d      	sub	sp, #116	@ 0x74
 8007eb0:	4607      	mov	r7, r0
 8007eb2:	460d      	mov	r5, r1
 8007eb4:	4614      	mov	r4, r2
 8007eb6:	d510      	bpl.n	8007eda <_svfiprintf_r+0x36>
 8007eb8:	690b      	ldr	r3, [r1, #16]
 8007eba:	b973      	cbnz	r3, 8007eda <_svfiprintf_r+0x36>
 8007ebc:	2140      	movs	r1, #64	@ 0x40
 8007ebe:	f7ff fb87 	bl	80075d0 <_malloc_r>
 8007ec2:	6028      	str	r0, [r5, #0]
 8007ec4:	6128      	str	r0, [r5, #16]
 8007ec6:	b930      	cbnz	r0, 8007ed6 <_svfiprintf_r+0x32>
 8007ec8:	230c      	movs	r3, #12
 8007eca:	603b      	str	r3, [r7, #0]
 8007ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed0:	b01d      	add	sp, #116	@ 0x74
 8007ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed6:	2340      	movs	r3, #64	@ 0x40
 8007ed8:	616b      	str	r3, [r5, #20]
 8007eda:	2300      	movs	r3, #0
 8007edc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ede:	2320      	movs	r3, #32
 8007ee0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ee4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ee8:	2330      	movs	r3, #48	@ 0x30
 8007eea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008088 <_svfiprintf_r+0x1e4>
 8007eee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ef2:	f04f 0901 	mov.w	r9, #1
 8007ef6:	4623      	mov	r3, r4
 8007ef8:	469a      	mov	sl, r3
 8007efa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007efe:	b10a      	cbz	r2, 8007f04 <_svfiprintf_r+0x60>
 8007f00:	2a25      	cmp	r2, #37	@ 0x25
 8007f02:	d1f9      	bne.n	8007ef8 <_svfiprintf_r+0x54>
 8007f04:	ebba 0b04 	subs.w	fp, sl, r4
 8007f08:	d00b      	beq.n	8007f22 <_svfiprintf_r+0x7e>
 8007f0a:	465b      	mov	r3, fp
 8007f0c:	4622      	mov	r2, r4
 8007f0e:	4629      	mov	r1, r5
 8007f10:	4638      	mov	r0, r7
 8007f12:	f7ff ff6b 	bl	8007dec <__ssputs_r>
 8007f16:	3001      	adds	r0, #1
 8007f18:	f000 80a7 	beq.w	800806a <_svfiprintf_r+0x1c6>
 8007f1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f1e:	445a      	add	r2, fp
 8007f20:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f22:	f89a 3000 	ldrb.w	r3, [sl]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 809f 	beq.w	800806a <_svfiprintf_r+0x1c6>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f36:	f10a 0a01 	add.w	sl, sl, #1
 8007f3a:	9304      	str	r3, [sp, #16]
 8007f3c:	9307      	str	r3, [sp, #28]
 8007f3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f42:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f44:	4654      	mov	r4, sl
 8007f46:	2205      	movs	r2, #5
 8007f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f4c:	484e      	ldr	r0, [pc, #312]	@ (8008088 <_svfiprintf_r+0x1e4>)
 8007f4e:	f7f8 f93f 	bl	80001d0 <memchr>
 8007f52:	9a04      	ldr	r2, [sp, #16]
 8007f54:	b9d8      	cbnz	r0, 8007f8e <_svfiprintf_r+0xea>
 8007f56:	06d0      	lsls	r0, r2, #27
 8007f58:	bf44      	itt	mi
 8007f5a:	2320      	movmi	r3, #32
 8007f5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f60:	0711      	lsls	r1, r2, #28
 8007f62:	bf44      	itt	mi
 8007f64:	232b      	movmi	r3, #43	@ 0x2b
 8007f66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f70:	d015      	beq.n	8007f9e <_svfiprintf_r+0xfa>
 8007f72:	9a07      	ldr	r2, [sp, #28]
 8007f74:	4654      	mov	r4, sl
 8007f76:	2000      	movs	r0, #0
 8007f78:	f04f 0c0a 	mov.w	ip, #10
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f82:	3b30      	subs	r3, #48	@ 0x30
 8007f84:	2b09      	cmp	r3, #9
 8007f86:	d94b      	bls.n	8008020 <_svfiprintf_r+0x17c>
 8007f88:	b1b0      	cbz	r0, 8007fb8 <_svfiprintf_r+0x114>
 8007f8a:	9207      	str	r2, [sp, #28]
 8007f8c:	e014      	b.n	8007fb8 <_svfiprintf_r+0x114>
 8007f8e:	eba0 0308 	sub.w	r3, r0, r8
 8007f92:	fa09 f303 	lsl.w	r3, r9, r3
 8007f96:	4313      	orrs	r3, r2
 8007f98:	9304      	str	r3, [sp, #16]
 8007f9a:	46a2      	mov	sl, r4
 8007f9c:	e7d2      	b.n	8007f44 <_svfiprintf_r+0xa0>
 8007f9e:	9b03      	ldr	r3, [sp, #12]
 8007fa0:	1d19      	adds	r1, r3, #4
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	9103      	str	r1, [sp, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	bfbb      	ittet	lt
 8007faa:	425b      	neglt	r3, r3
 8007fac:	f042 0202 	orrlt.w	r2, r2, #2
 8007fb0:	9307      	strge	r3, [sp, #28]
 8007fb2:	9307      	strlt	r3, [sp, #28]
 8007fb4:	bfb8      	it	lt
 8007fb6:	9204      	strlt	r2, [sp, #16]
 8007fb8:	7823      	ldrb	r3, [r4, #0]
 8007fba:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fbc:	d10a      	bne.n	8007fd4 <_svfiprintf_r+0x130>
 8007fbe:	7863      	ldrb	r3, [r4, #1]
 8007fc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fc2:	d132      	bne.n	800802a <_svfiprintf_r+0x186>
 8007fc4:	9b03      	ldr	r3, [sp, #12]
 8007fc6:	1d1a      	adds	r2, r3, #4
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	9203      	str	r2, [sp, #12]
 8007fcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fd0:	3402      	adds	r4, #2
 8007fd2:	9305      	str	r3, [sp, #20]
 8007fd4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008098 <_svfiprintf_r+0x1f4>
 8007fd8:	7821      	ldrb	r1, [r4, #0]
 8007fda:	2203      	movs	r2, #3
 8007fdc:	4650      	mov	r0, sl
 8007fde:	f7f8 f8f7 	bl	80001d0 <memchr>
 8007fe2:	b138      	cbz	r0, 8007ff4 <_svfiprintf_r+0x150>
 8007fe4:	9b04      	ldr	r3, [sp, #16]
 8007fe6:	eba0 000a 	sub.w	r0, r0, sl
 8007fea:	2240      	movs	r2, #64	@ 0x40
 8007fec:	4082      	lsls	r2, r0
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	3401      	adds	r4, #1
 8007ff2:	9304      	str	r3, [sp, #16]
 8007ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ff8:	4824      	ldr	r0, [pc, #144]	@ (800808c <_svfiprintf_r+0x1e8>)
 8007ffa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ffe:	2206      	movs	r2, #6
 8008000:	f7f8 f8e6 	bl	80001d0 <memchr>
 8008004:	2800      	cmp	r0, #0
 8008006:	d036      	beq.n	8008076 <_svfiprintf_r+0x1d2>
 8008008:	4b21      	ldr	r3, [pc, #132]	@ (8008090 <_svfiprintf_r+0x1ec>)
 800800a:	bb1b      	cbnz	r3, 8008054 <_svfiprintf_r+0x1b0>
 800800c:	9b03      	ldr	r3, [sp, #12]
 800800e:	3307      	adds	r3, #7
 8008010:	f023 0307 	bic.w	r3, r3, #7
 8008014:	3308      	adds	r3, #8
 8008016:	9303      	str	r3, [sp, #12]
 8008018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800801a:	4433      	add	r3, r6
 800801c:	9309      	str	r3, [sp, #36]	@ 0x24
 800801e:	e76a      	b.n	8007ef6 <_svfiprintf_r+0x52>
 8008020:	fb0c 3202 	mla	r2, ip, r2, r3
 8008024:	460c      	mov	r4, r1
 8008026:	2001      	movs	r0, #1
 8008028:	e7a8      	b.n	8007f7c <_svfiprintf_r+0xd8>
 800802a:	2300      	movs	r3, #0
 800802c:	3401      	adds	r4, #1
 800802e:	9305      	str	r3, [sp, #20]
 8008030:	4619      	mov	r1, r3
 8008032:	f04f 0c0a 	mov.w	ip, #10
 8008036:	4620      	mov	r0, r4
 8008038:	f810 2b01 	ldrb.w	r2, [r0], #1
 800803c:	3a30      	subs	r2, #48	@ 0x30
 800803e:	2a09      	cmp	r2, #9
 8008040:	d903      	bls.n	800804a <_svfiprintf_r+0x1a6>
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0c6      	beq.n	8007fd4 <_svfiprintf_r+0x130>
 8008046:	9105      	str	r1, [sp, #20]
 8008048:	e7c4      	b.n	8007fd4 <_svfiprintf_r+0x130>
 800804a:	fb0c 2101 	mla	r1, ip, r1, r2
 800804e:	4604      	mov	r4, r0
 8008050:	2301      	movs	r3, #1
 8008052:	e7f0      	b.n	8008036 <_svfiprintf_r+0x192>
 8008054:	ab03      	add	r3, sp, #12
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	462a      	mov	r2, r5
 800805a:	4b0e      	ldr	r3, [pc, #56]	@ (8008094 <_svfiprintf_r+0x1f0>)
 800805c:	a904      	add	r1, sp, #16
 800805e:	4638      	mov	r0, r7
 8008060:	f7fd fe84 	bl	8005d6c <_printf_float>
 8008064:	1c42      	adds	r2, r0, #1
 8008066:	4606      	mov	r6, r0
 8008068:	d1d6      	bne.n	8008018 <_svfiprintf_r+0x174>
 800806a:	89ab      	ldrh	r3, [r5, #12]
 800806c:	065b      	lsls	r3, r3, #25
 800806e:	f53f af2d 	bmi.w	8007ecc <_svfiprintf_r+0x28>
 8008072:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008074:	e72c      	b.n	8007ed0 <_svfiprintf_r+0x2c>
 8008076:	ab03      	add	r3, sp, #12
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	462a      	mov	r2, r5
 800807c:	4b05      	ldr	r3, [pc, #20]	@ (8008094 <_svfiprintf_r+0x1f0>)
 800807e:	a904      	add	r1, sp, #16
 8008080:	4638      	mov	r0, r7
 8008082:	f7fe f90b 	bl	800629c <_printf_i>
 8008086:	e7ed      	b.n	8008064 <_svfiprintf_r+0x1c0>
 8008088:	08008b70 	.word	0x08008b70
 800808c:	08008b7a 	.word	0x08008b7a
 8008090:	08005d6d 	.word	0x08005d6d
 8008094:	08007ded 	.word	0x08007ded
 8008098:	08008b76 	.word	0x08008b76

0800809c <__sflush_r>:
 800809c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080a4:	0716      	lsls	r6, r2, #28
 80080a6:	4605      	mov	r5, r0
 80080a8:	460c      	mov	r4, r1
 80080aa:	d454      	bmi.n	8008156 <__sflush_r+0xba>
 80080ac:	684b      	ldr	r3, [r1, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	dc02      	bgt.n	80080b8 <__sflush_r+0x1c>
 80080b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	dd48      	ble.n	800814a <__sflush_r+0xae>
 80080b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080ba:	2e00      	cmp	r6, #0
 80080bc:	d045      	beq.n	800814a <__sflush_r+0xae>
 80080be:	2300      	movs	r3, #0
 80080c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80080c4:	682f      	ldr	r7, [r5, #0]
 80080c6:	6a21      	ldr	r1, [r4, #32]
 80080c8:	602b      	str	r3, [r5, #0]
 80080ca:	d030      	beq.n	800812e <__sflush_r+0x92>
 80080cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80080ce:	89a3      	ldrh	r3, [r4, #12]
 80080d0:	0759      	lsls	r1, r3, #29
 80080d2:	d505      	bpl.n	80080e0 <__sflush_r+0x44>
 80080d4:	6863      	ldr	r3, [r4, #4]
 80080d6:	1ad2      	subs	r2, r2, r3
 80080d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80080da:	b10b      	cbz	r3, 80080e0 <__sflush_r+0x44>
 80080dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080de:	1ad2      	subs	r2, r2, r3
 80080e0:	2300      	movs	r3, #0
 80080e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080e4:	6a21      	ldr	r1, [r4, #32]
 80080e6:	4628      	mov	r0, r5
 80080e8:	47b0      	blx	r6
 80080ea:	1c43      	adds	r3, r0, #1
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	d106      	bne.n	80080fe <__sflush_r+0x62>
 80080f0:	6829      	ldr	r1, [r5, #0]
 80080f2:	291d      	cmp	r1, #29
 80080f4:	d82b      	bhi.n	800814e <__sflush_r+0xb2>
 80080f6:	4a2a      	ldr	r2, [pc, #168]	@ (80081a0 <__sflush_r+0x104>)
 80080f8:	410a      	asrs	r2, r1
 80080fa:	07d6      	lsls	r6, r2, #31
 80080fc:	d427      	bmi.n	800814e <__sflush_r+0xb2>
 80080fe:	2200      	movs	r2, #0
 8008100:	6062      	str	r2, [r4, #4]
 8008102:	04d9      	lsls	r1, r3, #19
 8008104:	6922      	ldr	r2, [r4, #16]
 8008106:	6022      	str	r2, [r4, #0]
 8008108:	d504      	bpl.n	8008114 <__sflush_r+0x78>
 800810a:	1c42      	adds	r2, r0, #1
 800810c:	d101      	bne.n	8008112 <__sflush_r+0x76>
 800810e:	682b      	ldr	r3, [r5, #0]
 8008110:	b903      	cbnz	r3, 8008114 <__sflush_r+0x78>
 8008112:	6560      	str	r0, [r4, #84]	@ 0x54
 8008114:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008116:	602f      	str	r7, [r5, #0]
 8008118:	b1b9      	cbz	r1, 800814a <__sflush_r+0xae>
 800811a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800811e:	4299      	cmp	r1, r3
 8008120:	d002      	beq.n	8008128 <__sflush_r+0x8c>
 8008122:	4628      	mov	r0, r5
 8008124:	f7ff f9e0 	bl	80074e8 <_free_r>
 8008128:	2300      	movs	r3, #0
 800812a:	6363      	str	r3, [r4, #52]	@ 0x34
 800812c:	e00d      	b.n	800814a <__sflush_r+0xae>
 800812e:	2301      	movs	r3, #1
 8008130:	4628      	mov	r0, r5
 8008132:	47b0      	blx	r6
 8008134:	4602      	mov	r2, r0
 8008136:	1c50      	adds	r0, r2, #1
 8008138:	d1c9      	bne.n	80080ce <__sflush_r+0x32>
 800813a:	682b      	ldr	r3, [r5, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d0c6      	beq.n	80080ce <__sflush_r+0x32>
 8008140:	2b1d      	cmp	r3, #29
 8008142:	d001      	beq.n	8008148 <__sflush_r+0xac>
 8008144:	2b16      	cmp	r3, #22
 8008146:	d11e      	bne.n	8008186 <__sflush_r+0xea>
 8008148:	602f      	str	r7, [r5, #0]
 800814a:	2000      	movs	r0, #0
 800814c:	e022      	b.n	8008194 <__sflush_r+0xf8>
 800814e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008152:	b21b      	sxth	r3, r3
 8008154:	e01b      	b.n	800818e <__sflush_r+0xf2>
 8008156:	690f      	ldr	r7, [r1, #16]
 8008158:	2f00      	cmp	r7, #0
 800815a:	d0f6      	beq.n	800814a <__sflush_r+0xae>
 800815c:	0793      	lsls	r3, r2, #30
 800815e:	680e      	ldr	r6, [r1, #0]
 8008160:	bf08      	it	eq
 8008162:	694b      	ldreq	r3, [r1, #20]
 8008164:	600f      	str	r7, [r1, #0]
 8008166:	bf18      	it	ne
 8008168:	2300      	movne	r3, #0
 800816a:	eba6 0807 	sub.w	r8, r6, r7
 800816e:	608b      	str	r3, [r1, #8]
 8008170:	f1b8 0f00 	cmp.w	r8, #0
 8008174:	dde9      	ble.n	800814a <__sflush_r+0xae>
 8008176:	6a21      	ldr	r1, [r4, #32]
 8008178:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800817a:	4643      	mov	r3, r8
 800817c:	463a      	mov	r2, r7
 800817e:	4628      	mov	r0, r5
 8008180:	47b0      	blx	r6
 8008182:	2800      	cmp	r0, #0
 8008184:	dc08      	bgt.n	8008198 <__sflush_r+0xfc>
 8008186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800818a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800818e:	81a3      	strh	r3, [r4, #12]
 8008190:	f04f 30ff 	mov.w	r0, #4294967295
 8008194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008198:	4407      	add	r7, r0
 800819a:	eba8 0800 	sub.w	r8, r8, r0
 800819e:	e7e7      	b.n	8008170 <__sflush_r+0xd4>
 80081a0:	dfbffffe 	.word	0xdfbffffe

080081a4 <_fflush_r>:
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	690b      	ldr	r3, [r1, #16]
 80081a8:	4605      	mov	r5, r0
 80081aa:	460c      	mov	r4, r1
 80081ac:	b913      	cbnz	r3, 80081b4 <_fflush_r+0x10>
 80081ae:	2500      	movs	r5, #0
 80081b0:	4628      	mov	r0, r5
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
 80081b4:	b118      	cbz	r0, 80081be <_fflush_r+0x1a>
 80081b6:	6a03      	ldr	r3, [r0, #32]
 80081b8:	b90b      	cbnz	r3, 80081be <_fflush_r+0x1a>
 80081ba:	f7fe fa1b 	bl	80065f4 <__sinit>
 80081be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0f3      	beq.n	80081ae <_fflush_r+0xa>
 80081c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80081c8:	07d0      	lsls	r0, r2, #31
 80081ca:	d404      	bmi.n	80081d6 <_fflush_r+0x32>
 80081cc:	0599      	lsls	r1, r3, #22
 80081ce:	d402      	bmi.n	80081d6 <_fflush_r+0x32>
 80081d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081d2:	f7fe fb3a 	bl	800684a <__retarget_lock_acquire_recursive>
 80081d6:	4628      	mov	r0, r5
 80081d8:	4621      	mov	r1, r4
 80081da:	f7ff ff5f 	bl	800809c <__sflush_r>
 80081de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081e0:	07da      	lsls	r2, r3, #31
 80081e2:	4605      	mov	r5, r0
 80081e4:	d4e4      	bmi.n	80081b0 <_fflush_r+0xc>
 80081e6:	89a3      	ldrh	r3, [r4, #12]
 80081e8:	059b      	lsls	r3, r3, #22
 80081ea:	d4e1      	bmi.n	80081b0 <_fflush_r+0xc>
 80081ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081ee:	f7fe fb2d 	bl	800684c <__retarget_lock_release_recursive>
 80081f2:	e7dd      	b.n	80081b0 <_fflush_r+0xc>

080081f4 <memmove>:
 80081f4:	4288      	cmp	r0, r1
 80081f6:	b510      	push	{r4, lr}
 80081f8:	eb01 0402 	add.w	r4, r1, r2
 80081fc:	d902      	bls.n	8008204 <memmove+0x10>
 80081fe:	4284      	cmp	r4, r0
 8008200:	4623      	mov	r3, r4
 8008202:	d807      	bhi.n	8008214 <memmove+0x20>
 8008204:	1e43      	subs	r3, r0, #1
 8008206:	42a1      	cmp	r1, r4
 8008208:	d008      	beq.n	800821c <memmove+0x28>
 800820a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800820e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008212:	e7f8      	b.n	8008206 <memmove+0x12>
 8008214:	4402      	add	r2, r0
 8008216:	4601      	mov	r1, r0
 8008218:	428a      	cmp	r2, r1
 800821a:	d100      	bne.n	800821e <memmove+0x2a>
 800821c:	bd10      	pop	{r4, pc}
 800821e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008226:	e7f7      	b.n	8008218 <memmove+0x24>

08008228 <_sbrk_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	4d06      	ldr	r5, [pc, #24]	@ (8008244 <_sbrk_r+0x1c>)
 800822c:	2300      	movs	r3, #0
 800822e:	4604      	mov	r4, r0
 8008230:	4608      	mov	r0, r1
 8008232:	602b      	str	r3, [r5, #0]
 8008234:	f7f9 f9a4 	bl	8001580 <_sbrk>
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	d102      	bne.n	8008242 <_sbrk_r+0x1a>
 800823c:	682b      	ldr	r3, [r5, #0]
 800823e:	b103      	cbz	r3, 8008242 <_sbrk_r+0x1a>
 8008240:	6023      	str	r3, [r4, #0]
 8008242:	bd38      	pop	{r3, r4, r5, pc}
 8008244:	20000554 	.word	0x20000554

08008248 <memcpy>:
 8008248:	440a      	add	r2, r1
 800824a:	4291      	cmp	r1, r2
 800824c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008250:	d100      	bne.n	8008254 <memcpy+0xc>
 8008252:	4770      	bx	lr
 8008254:	b510      	push	{r4, lr}
 8008256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800825a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800825e:	4291      	cmp	r1, r2
 8008260:	d1f9      	bne.n	8008256 <memcpy+0xe>
 8008262:	bd10      	pop	{r4, pc}

08008264 <__assert_func>:
 8008264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008266:	4614      	mov	r4, r2
 8008268:	461a      	mov	r2, r3
 800826a:	4b09      	ldr	r3, [pc, #36]	@ (8008290 <__assert_func+0x2c>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4605      	mov	r5, r0
 8008270:	68d8      	ldr	r0, [r3, #12]
 8008272:	b954      	cbnz	r4, 800828a <__assert_func+0x26>
 8008274:	4b07      	ldr	r3, [pc, #28]	@ (8008294 <__assert_func+0x30>)
 8008276:	461c      	mov	r4, r3
 8008278:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800827c:	9100      	str	r1, [sp, #0]
 800827e:	462b      	mov	r3, r5
 8008280:	4905      	ldr	r1, [pc, #20]	@ (8008298 <__assert_func+0x34>)
 8008282:	f000 f86f 	bl	8008364 <fiprintf>
 8008286:	f000 f87f 	bl	8008388 <abort>
 800828a:	4b04      	ldr	r3, [pc, #16]	@ (800829c <__assert_func+0x38>)
 800828c:	e7f4      	b.n	8008278 <__assert_func+0x14>
 800828e:	bf00      	nop
 8008290:	2000001c 	.word	0x2000001c
 8008294:	08008bc6 	.word	0x08008bc6
 8008298:	08008b98 	.word	0x08008b98
 800829c:	08008b8b 	.word	0x08008b8b

080082a0 <_calloc_r>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	fba1 5402 	umull	r5, r4, r1, r2
 80082a6:	b93c      	cbnz	r4, 80082b8 <_calloc_r+0x18>
 80082a8:	4629      	mov	r1, r5
 80082aa:	f7ff f991 	bl	80075d0 <_malloc_r>
 80082ae:	4606      	mov	r6, r0
 80082b0:	b928      	cbnz	r0, 80082be <_calloc_r+0x1e>
 80082b2:	2600      	movs	r6, #0
 80082b4:	4630      	mov	r0, r6
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
 80082b8:	220c      	movs	r2, #12
 80082ba:	6002      	str	r2, [r0, #0]
 80082bc:	e7f9      	b.n	80082b2 <_calloc_r+0x12>
 80082be:	462a      	mov	r2, r5
 80082c0:	4621      	mov	r1, r4
 80082c2:	f7fe fa44 	bl	800674e <memset>
 80082c6:	e7f5      	b.n	80082b4 <_calloc_r+0x14>

080082c8 <__ascii_mbtowc>:
 80082c8:	b082      	sub	sp, #8
 80082ca:	b901      	cbnz	r1, 80082ce <__ascii_mbtowc+0x6>
 80082cc:	a901      	add	r1, sp, #4
 80082ce:	b142      	cbz	r2, 80082e2 <__ascii_mbtowc+0x1a>
 80082d0:	b14b      	cbz	r3, 80082e6 <__ascii_mbtowc+0x1e>
 80082d2:	7813      	ldrb	r3, [r2, #0]
 80082d4:	600b      	str	r3, [r1, #0]
 80082d6:	7812      	ldrb	r2, [r2, #0]
 80082d8:	1e10      	subs	r0, r2, #0
 80082da:	bf18      	it	ne
 80082dc:	2001      	movne	r0, #1
 80082de:	b002      	add	sp, #8
 80082e0:	4770      	bx	lr
 80082e2:	4610      	mov	r0, r2
 80082e4:	e7fb      	b.n	80082de <__ascii_mbtowc+0x16>
 80082e6:	f06f 0001 	mvn.w	r0, #1
 80082ea:	e7f8      	b.n	80082de <__ascii_mbtowc+0x16>

080082ec <_realloc_r>:
 80082ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f0:	4680      	mov	r8, r0
 80082f2:	4615      	mov	r5, r2
 80082f4:	460c      	mov	r4, r1
 80082f6:	b921      	cbnz	r1, 8008302 <_realloc_r+0x16>
 80082f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082fc:	4611      	mov	r1, r2
 80082fe:	f7ff b967 	b.w	80075d0 <_malloc_r>
 8008302:	b92a      	cbnz	r2, 8008310 <_realloc_r+0x24>
 8008304:	f7ff f8f0 	bl	80074e8 <_free_r>
 8008308:	2400      	movs	r4, #0
 800830a:	4620      	mov	r0, r4
 800830c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008310:	f000 f841 	bl	8008396 <_malloc_usable_size_r>
 8008314:	4285      	cmp	r5, r0
 8008316:	4606      	mov	r6, r0
 8008318:	d802      	bhi.n	8008320 <_realloc_r+0x34>
 800831a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800831e:	d8f4      	bhi.n	800830a <_realloc_r+0x1e>
 8008320:	4629      	mov	r1, r5
 8008322:	4640      	mov	r0, r8
 8008324:	f7ff f954 	bl	80075d0 <_malloc_r>
 8008328:	4607      	mov	r7, r0
 800832a:	2800      	cmp	r0, #0
 800832c:	d0ec      	beq.n	8008308 <_realloc_r+0x1c>
 800832e:	42b5      	cmp	r5, r6
 8008330:	462a      	mov	r2, r5
 8008332:	4621      	mov	r1, r4
 8008334:	bf28      	it	cs
 8008336:	4632      	movcs	r2, r6
 8008338:	f7ff ff86 	bl	8008248 <memcpy>
 800833c:	4621      	mov	r1, r4
 800833e:	4640      	mov	r0, r8
 8008340:	f7ff f8d2 	bl	80074e8 <_free_r>
 8008344:	463c      	mov	r4, r7
 8008346:	e7e0      	b.n	800830a <_realloc_r+0x1e>

08008348 <__ascii_wctomb>:
 8008348:	4603      	mov	r3, r0
 800834a:	4608      	mov	r0, r1
 800834c:	b141      	cbz	r1, 8008360 <__ascii_wctomb+0x18>
 800834e:	2aff      	cmp	r2, #255	@ 0xff
 8008350:	d904      	bls.n	800835c <__ascii_wctomb+0x14>
 8008352:	228a      	movs	r2, #138	@ 0x8a
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	f04f 30ff 	mov.w	r0, #4294967295
 800835a:	4770      	bx	lr
 800835c:	700a      	strb	r2, [r1, #0]
 800835e:	2001      	movs	r0, #1
 8008360:	4770      	bx	lr
	...

08008364 <fiprintf>:
 8008364:	b40e      	push	{r1, r2, r3}
 8008366:	b503      	push	{r0, r1, lr}
 8008368:	4601      	mov	r1, r0
 800836a:	ab03      	add	r3, sp, #12
 800836c:	4805      	ldr	r0, [pc, #20]	@ (8008384 <fiprintf+0x20>)
 800836e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008372:	6800      	ldr	r0, [r0, #0]
 8008374:	9301      	str	r3, [sp, #4]
 8008376:	f000 f83f 	bl	80083f8 <_vfiprintf_r>
 800837a:	b002      	add	sp, #8
 800837c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008380:	b003      	add	sp, #12
 8008382:	4770      	bx	lr
 8008384:	2000001c 	.word	0x2000001c

08008388 <abort>:
 8008388:	b508      	push	{r3, lr}
 800838a:	2006      	movs	r0, #6
 800838c:	f000 fa08 	bl	80087a0 <raise>
 8008390:	2001      	movs	r0, #1
 8008392:	f7f9 f87d 	bl	8001490 <_exit>

08008396 <_malloc_usable_size_r>:
 8008396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800839a:	1f18      	subs	r0, r3, #4
 800839c:	2b00      	cmp	r3, #0
 800839e:	bfbc      	itt	lt
 80083a0:	580b      	ldrlt	r3, [r1, r0]
 80083a2:	18c0      	addlt	r0, r0, r3
 80083a4:	4770      	bx	lr

080083a6 <__sfputc_r>:
 80083a6:	6893      	ldr	r3, [r2, #8]
 80083a8:	3b01      	subs	r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	b410      	push	{r4}
 80083ae:	6093      	str	r3, [r2, #8]
 80083b0:	da08      	bge.n	80083c4 <__sfputc_r+0x1e>
 80083b2:	6994      	ldr	r4, [r2, #24]
 80083b4:	42a3      	cmp	r3, r4
 80083b6:	db01      	blt.n	80083bc <__sfputc_r+0x16>
 80083b8:	290a      	cmp	r1, #10
 80083ba:	d103      	bne.n	80083c4 <__sfputc_r+0x1e>
 80083bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083c0:	f000 b932 	b.w	8008628 <__swbuf_r>
 80083c4:	6813      	ldr	r3, [r2, #0]
 80083c6:	1c58      	adds	r0, r3, #1
 80083c8:	6010      	str	r0, [r2, #0]
 80083ca:	7019      	strb	r1, [r3, #0]
 80083cc:	4608      	mov	r0, r1
 80083ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <__sfputs_r>:
 80083d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d6:	4606      	mov	r6, r0
 80083d8:	460f      	mov	r7, r1
 80083da:	4614      	mov	r4, r2
 80083dc:	18d5      	adds	r5, r2, r3
 80083de:	42ac      	cmp	r4, r5
 80083e0:	d101      	bne.n	80083e6 <__sfputs_r+0x12>
 80083e2:	2000      	movs	r0, #0
 80083e4:	e007      	b.n	80083f6 <__sfputs_r+0x22>
 80083e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ea:	463a      	mov	r2, r7
 80083ec:	4630      	mov	r0, r6
 80083ee:	f7ff ffda 	bl	80083a6 <__sfputc_r>
 80083f2:	1c43      	adds	r3, r0, #1
 80083f4:	d1f3      	bne.n	80083de <__sfputs_r+0xa>
 80083f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080083f8 <_vfiprintf_r>:
 80083f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fc:	460d      	mov	r5, r1
 80083fe:	b09d      	sub	sp, #116	@ 0x74
 8008400:	4614      	mov	r4, r2
 8008402:	4698      	mov	r8, r3
 8008404:	4606      	mov	r6, r0
 8008406:	b118      	cbz	r0, 8008410 <_vfiprintf_r+0x18>
 8008408:	6a03      	ldr	r3, [r0, #32]
 800840a:	b90b      	cbnz	r3, 8008410 <_vfiprintf_r+0x18>
 800840c:	f7fe f8f2 	bl	80065f4 <__sinit>
 8008410:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008412:	07d9      	lsls	r1, r3, #31
 8008414:	d405      	bmi.n	8008422 <_vfiprintf_r+0x2a>
 8008416:	89ab      	ldrh	r3, [r5, #12]
 8008418:	059a      	lsls	r2, r3, #22
 800841a:	d402      	bmi.n	8008422 <_vfiprintf_r+0x2a>
 800841c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800841e:	f7fe fa14 	bl	800684a <__retarget_lock_acquire_recursive>
 8008422:	89ab      	ldrh	r3, [r5, #12]
 8008424:	071b      	lsls	r3, r3, #28
 8008426:	d501      	bpl.n	800842c <_vfiprintf_r+0x34>
 8008428:	692b      	ldr	r3, [r5, #16]
 800842a:	b99b      	cbnz	r3, 8008454 <_vfiprintf_r+0x5c>
 800842c:	4629      	mov	r1, r5
 800842e:	4630      	mov	r0, r6
 8008430:	f000 f938 	bl	80086a4 <__swsetup_r>
 8008434:	b170      	cbz	r0, 8008454 <_vfiprintf_r+0x5c>
 8008436:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008438:	07dc      	lsls	r4, r3, #31
 800843a:	d504      	bpl.n	8008446 <_vfiprintf_r+0x4e>
 800843c:	f04f 30ff 	mov.w	r0, #4294967295
 8008440:	b01d      	add	sp, #116	@ 0x74
 8008442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008446:	89ab      	ldrh	r3, [r5, #12]
 8008448:	0598      	lsls	r0, r3, #22
 800844a:	d4f7      	bmi.n	800843c <_vfiprintf_r+0x44>
 800844c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800844e:	f7fe f9fd 	bl	800684c <__retarget_lock_release_recursive>
 8008452:	e7f3      	b.n	800843c <_vfiprintf_r+0x44>
 8008454:	2300      	movs	r3, #0
 8008456:	9309      	str	r3, [sp, #36]	@ 0x24
 8008458:	2320      	movs	r3, #32
 800845a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800845e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008462:	2330      	movs	r3, #48	@ 0x30
 8008464:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008614 <_vfiprintf_r+0x21c>
 8008468:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800846c:	f04f 0901 	mov.w	r9, #1
 8008470:	4623      	mov	r3, r4
 8008472:	469a      	mov	sl, r3
 8008474:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008478:	b10a      	cbz	r2, 800847e <_vfiprintf_r+0x86>
 800847a:	2a25      	cmp	r2, #37	@ 0x25
 800847c:	d1f9      	bne.n	8008472 <_vfiprintf_r+0x7a>
 800847e:	ebba 0b04 	subs.w	fp, sl, r4
 8008482:	d00b      	beq.n	800849c <_vfiprintf_r+0xa4>
 8008484:	465b      	mov	r3, fp
 8008486:	4622      	mov	r2, r4
 8008488:	4629      	mov	r1, r5
 800848a:	4630      	mov	r0, r6
 800848c:	f7ff ffa2 	bl	80083d4 <__sfputs_r>
 8008490:	3001      	adds	r0, #1
 8008492:	f000 80a7 	beq.w	80085e4 <_vfiprintf_r+0x1ec>
 8008496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008498:	445a      	add	r2, fp
 800849a:	9209      	str	r2, [sp, #36]	@ 0x24
 800849c:	f89a 3000 	ldrb.w	r3, [sl]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 809f 	beq.w	80085e4 <_vfiprintf_r+0x1ec>
 80084a6:	2300      	movs	r3, #0
 80084a8:	f04f 32ff 	mov.w	r2, #4294967295
 80084ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084b0:	f10a 0a01 	add.w	sl, sl, #1
 80084b4:	9304      	str	r3, [sp, #16]
 80084b6:	9307      	str	r3, [sp, #28]
 80084b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80084be:	4654      	mov	r4, sl
 80084c0:	2205      	movs	r2, #5
 80084c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084c6:	4853      	ldr	r0, [pc, #332]	@ (8008614 <_vfiprintf_r+0x21c>)
 80084c8:	f7f7 fe82 	bl	80001d0 <memchr>
 80084cc:	9a04      	ldr	r2, [sp, #16]
 80084ce:	b9d8      	cbnz	r0, 8008508 <_vfiprintf_r+0x110>
 80084d0:	06d1      	lsls	r1, r2, #27
 80084d2:	bf44      	itt	mi
 80084d4:	2320      	movmi	r3, #32
 80084d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084da:	0713      	lsls	r3, r2, #28
 80084dc:	bf44      	itt	mi
 80084de:	232b      	movmi	r3, #43	@ 0x2b
 80084e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084e4:	f89a 3000 	ldrb.w	r3, [sl]
 80084e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80084ea:	d015      	beq.n	8008518 <_vfiprintf_r+0x120>
 80084ec:	9a07      	ldr	r2, [sp, #28]
 80084ee:	4654      	mov	r4, sl
 80084f0:	2000      	movs	r0, #0
 80084f2:	f04f 0c0a 	mov.w	ip, #10
 80084f6:	4621      	mov	r1, r4
 80084f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084fc:	3b30      	subs	r3, #48	@ 0x30
 80084fe:	2b09      	cmp	r3, #9
 8008500:	d94b      	bls.n	800859a <_vfiprintf_r+0x1a2>
 8008502:	b1b0      	cbz	r0, 8008532 <_vfiprintf_r+0x13a>
 8008504:	9207      	str	r2, [sp, #28]
 8008506:	e014      	b.n	8008532 <_vfiprintf_r+0x13a>
 8008508:	eba0 0308 	sub.w	r3, r0, r8
 800850c:	fa09 f303 	lsl.w	r3, r9, r3
 8008510:	4313      	orrs	r3, r2
 8008512:	9304      	str	r3, [sp, #16]
 8008514:	46a2      	mov	sl, r4
 8008516:	e7d2      	b.n	80084be <_vfiprintf_r+0xc6>
 8008518:	9b03      	ldr	r3, [sp, #12]
 800851a:	1d19      	adds	r1, r3, #4
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	9103      	str	r1, [sp, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	bfbb      	ittet	lt
 8008524:	425b      	neglt	r3, r3
 8008526:	f042 0202 	orrlt.w	r2, r2, #2
 800852a:	9307      	strge	r3, [sp, #28]
 800852c:	9307      	strlt	r3, [sp, #28]
 800852e:	bfb8      	it	lt
 8008530:	9204      	strlt	r2, [sp, #16]
 8008532:	7823      	ldrb	r3, [r4, #0]
 8008534:	2b2e      	cmp	r3, #46	@ 0x2e
 8008536:	d10a      	bne.n	800854e <_vfiprintf_r+0x156>
 8008538:	7863      	ldrb	r3, [r4, #1]
 800853a:	2b2a      	cmp	r3, #42	@ 0x2a
 800853c:	d132      	bne.n	80085a4 <_vfiprintf_r+0x1ac>
 800853e:	9b03      	ldr	r3, [sp, #12]
 8008540:	1d1a      	adds	r2, r3, #4
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	9203      	str	r2, [sp, #12]
 8008546:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800854a:	3402      	adds	r4, #2
 800854c:	9305      	str	r3, [sp, #20]
 800854e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008624 <_vfiprintf_r+0x22c>
 8008552:	7821      	ldrb	r1, [r4, #0]
 8008554:	2203      	movs	r2, #3
 8008556:	4650      	mov	r0, sl
 8008558:	f7f7 fe3a 	bl	80001d0 <memchr>
 800855c:	b138      	cbz	r0, 800856e <_vfiprintf_r+0x176>
 800855e:	9b04      	ldr	r3, [sp, #16]
 8008560:	eba0 000a 	sub.w	r0, r0, sl
 8008564:	2240      	movs	r2, #64	@ 0x40
 8008566:	4082      	lsls	r2, r0
 8008568:	4313      	orrs	r3, r2
 800856a:	3401      	adds	r4, #1
 800856c:	9304      	str	r3, [sp, #16]
 800856e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008572:	4829      	ldr	r0, [pc, #164]	@ (8008618 <_vfiprintf_r+0x220>)
 8008574:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008578:	2206      	movs	r2, #6
 800857a:	f7f7 fe29 	bl	80001d0 <memchr>
 800857e:	2800      	cmp	r0, #0
 8008580:	d03f      	beq.n	8008602 <_vfiprintf_r+0x20a>
 8008582:	4b26      	ldr	r3, [pc, #152]	@ (800861c <_vfiprintf_r+0x224>)
 8008584:	bb1b      	cbnz	r3, 80085ce <_vfiprintf_r+0x1d6>
 8008586:	9b03      	ldr	r3, [sp, #12]
 8008588:	3307      	adds	r3, #7
 800858a:	f023 0307 	bic.w	r3, r3, #7
 800858e:	3308      	adds	r3, #8
 8008590:	9303      	str	r3, [sp, #12]
 8008592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008594:	443b      	add	r3, r7
 8008596:	9309      	str	r3, [sp, #36]	@ 0x24
 8008598:	e76a      	b.n	8008470 <_vfiprintf_r+0x78>
 800859a:	fb0c 3202 	mla	r2, ip, r2, r3
 800859e:	460c      	mov	r4, r1
 80085a0:	2001      	movs	r0, #1
 80085a2:	e7a8      	b.n	80084f6 <_vfiprintf_r+0xfe>
 80085a4:	2300      	movs	r3, #0
 80085a6:	3401      	adds	r4, #1
 80085a8:	9305      	str	r3, [sp, #20]
 80085aa:	4619      	mov	r1, r3
 80085ac:	f04f 0c0a 	mov.w	ip, #10
 80085b0:	4620      	mov	r0, r4
 80085b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085b6:	3a30      	subs	r2, #48	@ 0x30
 80085b8:	2a09      	cmp	r2, #9
 80085ba:	d903      	bls.n	80085c4 <_vfiprintf_r+0x1cc>
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d0c6      	beq.n	800854e <_vfiprintf_r+0x156>
 80085c0:	9105      	str	r1, [sp, #20]
 80085c2:	e7c4      	b.n	800854e <_vfiprintf_r+0x156>
 80085c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80085c8:	4604      	mov	r4, r0
 80085ca:	2301      	movs	r3, #1
 80085cc:	e7f0      	b.n	80085b0 <_vfiprintf_r+0x1b8>
 80085ce:	ab03      	add	r3, sp, #12
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	462a      	mov	r2, r5
 80085d4:	4b12      	ldr	r3, [pc, #72]	@ (8008620 <_vfiprintf_r+0x228>)
 80085d6:	a904      	add	r1, sp, #16
 80085d8:	4630      	mov	r0, r6
 80085da:	f7fd fbc7 	bl	8005d6c <_printf_float>
 80085de:	4607      	mov	r7, r0
 80085e0:	1c78      	adds	r0, r7, #1
 80085e2:	d1d6      	bne.n	8008592 <_vfiprintf_r+0x19a>
 80085e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085e6:	07d9      	lsls	r1, r3, #31
 80085e8:	d405      	bmi.n	80085f6 <_vfiprintf_r+0x1fe>
 80085ea:	89ab      	ldrh	r3, [r5, #12]
 80085ec:	059a      	lsls	r2, r3, #22
 80085ee:	d402      	bmi.n	80085f6 <_vfiprintf_r+0x1fe>
 80085f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085f2:	f7fe f92b 	bl	800684c <__retarget_lock_release_recursive>
 80085f6:	89ab      	ldrh	r3, [r5, #12]
 80085f8:	065b      	lsls	r3, r3, #25
 80085fa:	f53f af1f 	bmi.w	800843c <_vfiprintf_r+0x44>
 80085fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008600:	e71e      	b.n	8008440 <_vfiprintf_r+0x48>
 8008602:	ab03      	add	r3, sp, #12
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	462a      	mov	r2, r5
 8008608:	4b05      	ldr	r3, [pc, #20]	@ (8008620 <_vfiprintf_r+0x228>)
 800860a:	a904      	add	r1, sp, #16
 800860c:	4630      	mov	r0, r6
 800860e:	f7fd fe45 	bl	800629c <_printf_i>
 8008612:	e7e4      	b.n	80085de <_vfiprintf_r+0x1e6>
 8008614:	08008b70 	.word	0x08008b70
 8008618:	08008b7a 	.word	0x08008b7a
 800861c:	08005d6d 	.word	0x08005d6d
 8008620:	080083d5 	.word	0x080083d5
 8008624:	08008b76 	.word	0x08008b76

08008628 <__swbuf_r>:
 8008628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862a:	460e      	mov	r6, r1
 800862c:	4614      	mov	r4, r2
 800862e:	4605      	mov	r5, r0
 8008630:	b118      	cbz	r0, 800863a <__swbuf_r+0x12>
 8008632:	6a03      	ldr	r3, [r0, #32]
 8008634:	b90b      	cbnz	r3, 800863a <__swbuf_r+0x12>
 8008636:	f7fd ffdd 	bl	80065f4 <__sinit>
 800863a:	69a3      	ldr	r3, [r4, #24]
 800863c:	60a3      	str	r3, [r4, #8]
 800863e:	89a3      	ldrh	r3, [r4, #12]
 8008640:	071a      	lsls	r2, r3, #28
 8008642:	d501      	bpl.n	8008648 <__swbuf_r+0x20>
 8008644:	6923      	ldr	r3, [r4, #16]
 8008646:	b943      	cbnz	r3, 800865a <__swbuf_r+0x32>
 8008648:	4621      	mov	r1, r4
 800864a:	4628      	mov	r0, r5
 800864c:	f000 f82a 	bl	80086a4 <__swsetup_r>
 8008650:	b118      	cbz	r0, 800865a <__swbuf_r+0x32>
 8008652:	f04f 37ff 	mov.w	r7, #4294967295
 8008656:	4638      	mov	r0, r7
 8008658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800865a:	6823      	ldr	r3, [r4, #0]
 800865c:	6922      	ldr	r2, [r4, #16]
 800865e:	1a98      	subs	r0, r3, r2
 8008660:	6963      	ldr	r3, [r4, #20]
 8008662:	b2f6      	uxtb	r6, r6
 8008664:	4283      	cmp	r3, r0
 8008666:	4637      	mov	r7, r6
 8008668:	dc05      	bgt.n	8008676 <__swbuf_r+0x4e>
 800866a:	4621      	mov	r1, r4
 800866c:	4628      	mov	r0, r5
 800866e:	f7ff fd99 	bl	80081a4 <_fflush_r>
 8008672:	2800      	cmp	r0, #0
 8008674:	d1ed      	bne.n	8008652 <__swbuf_r+0x2a>
 8008676:	68a3      	ldr	r3, [r4, #8]
 8008678:	3b01      	subs	r3, #1
 800867a:	60a3      	str	r3, [r4, #8]
 800867c:	6823      	ldr	r3, [r4, #0]
 800867e:	1c5a      	adds	r2, r3, #1
 8008680:	6022      	str	r2, [r4, #0]
 8008682:	701e      	strb	r6, [r3, #0]
 8008684:	6962      	ldr	r2, [r4, #20]
 8008686:	1c43      	adds	r3, r0, #1
 8008688:	429a      	cmp	r2, r3
 800868a:	d004      	beq.n	8008696 <__swbuf_r+0x6e>
 800868c:	89a3      	ldrh	r3, [r4, #12]
 800868e:	07db      	lsls	r3, r3, #31
 8008690:	d5e1      	bpl.n	8008656 <__swbuf_r+0x2e>
 8008692:	2e0a      	cmp	r6, #10
 8008694:	d1df      	bne.n	8008656 <__swbuf_r+0x2e>
 8008696:	4621      	mov	r1, r4
 8008698:	4628      	mov	r0, r5
 800869a:	f7ff fd83 	bl	80081a4 <_fflush_r>
 800869e:	2800      	cmp	r0, #0
 80086a0:	d0d9      	beq.n	8008656 <__swbuf_r+0x2e>
 80086a2:	e7d6      	b.n	8008652 <__swbuf_r+0x2a>

080086a4 <__swsetup_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	4b29      	ldr	r3, [pc, #164]	@ (800874c <__swsetup_r+0xa8>)
 80086a8:	4605      	mov	r5, r0
 80086aa:	6818      	ldr	r0, [r3, #0]
 80086ac:	460c      	mov	r4, r1
 80086ae:	b118      	cbz	r0, 80086b8 <__swsetup_r+0x14>
 80086b0:	6a03      	ldr	r3, [r0, #32]
 80086b2:	b90b      	cbnz	r3, 80086b8 <__swsetup_r+0x14>
 80086b4:	f7fd ff9e 	bl	80065f4 <__sinit>
 80086b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086bc:	0719      	lsls	r1, r3, #28
 80086be:	d422      	bmi.n	8008706 <__swsetup_r+0x62>
 80086c0:	06da      	lsls	r2, r3, #27
 80086c2:	d407      	bmi.n	80086d4 <__swsetup_r+0x30>
 80086c4:	2209      	movs	r2, #9
 80086c6:	602a      	str	r2, [r5, #0]
 80086c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086cc:	81a3      	strh	r3, [r4, #12]
 80086ce:	f04f 30ff 	mov.w	r0, #4294967295
 80086d2:	e033      	b.n	800873c <__swsetup_r+0x98>
 80086d4:	0758      	lsls	r0, r3, #29
 80086d6:	d512      	bpl.n	80086fe <__swsetup_r+0x5a>
 80086d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086da:	b141      	cbz	r1, 80086ee <__swsetup_r+0x4a>
 80086dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086e0:	4299      	cmp	r1, r3
 80086e2:	d002      	beq.n	80086ea <__swsetup_r+0x46>
 80086e4:	4628      	mov	r0, r5
 80086e6:	f7fe feff 	bl	80074e8 <_free_r>
 80086ea:	2300      	movs	r3, #0
 80086ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80086f4:	81a3      	strh	r3, [r4, #12]
 80086f6:	2300      	movs	r3, #0
 80086f8:	6063      	str	r3, [r4, #4]
 80086fa:	6923      	ldr	r3, [r4, #16]
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	f043 0308 	orr.w	r3, r3, #8
 8008704:	81a3      	strh	r3, [r4, #12]
 8008706:	6923      	ldr	r3, [r4, #16]
 8008708:	b94b      	cbnz	r3, 800871e <__swsetup_r+0x7a>
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008714:	d003      	beq.n	800871e <__swsetup_r+0x7a>
 8008716:	4621      	mov	r1, r4
 8008718:	4628      	mov	r0, r5
 800871a:	f000 f883 	bl	8008824 <__smakebuf_r>
 800871e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008722:	f013 0201 	ands.w	r2, r3, #1
 8008726:	d00a      	beq.n	800873e <__swsetup_r+0x9a>
 8008728:	2200      	movs	r2, #0
 800872a:	60a2      	str	r2, [r4, #8]
 800872c:	6962      	ldr	r2, [r4, #20]
 800872e:	4252      	negs	r2, r2
 8008730:	61a2      	str	r2, [r4, #24]
 8008732:	6922      	ldr	r2, [r4, #16]
 8008734:	b942      	cbnz	r2, 8008748 <__swsetup_r+0xa4>
 8008736:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800873a:	d1c5      	bne.n	80086c8 <__swsetup_r+0x24>
 800873c:	bd38      	pop	{r3, r4, r5, pc}
 800873e:	0799      	lsls	r1, r3, #30
 8008740:	bf58      	it	pl
 8008742:	6962      	ldrpl	r2, [r4, #20]
 8008744:	60a2      	str	r2, [r4, #8]
 8008746:	e7f4      	b.n	8008732 <__swsetup_r+0x8e>
 8008748:	2000      	movs	r0, #0
 800874a:	e7f7      	b.n	800873c <__swsetup_r+0x98>
 800874c:	2000001c 	.word	0x2000001c

08008750 <_raise_r>:
 8008750:	291f      	cmp	r1, #31
 8008752:	b538      	push	{r3, r4, r5, lr}
 8008754:	4605      	mov	r5, r0
 8008756:	460c      	mov	r4, r1
 8008758:	d904      	bls.n	8008764 <_raise_r+0x14>
 800875a:	2316      	movs	r3, #22
 800875c:	6003      	str	r3, [r0, #0]
 800875e:	f04f 30ff 	mov.w	r0, #4294967295
 8008762:	bd38      	pop	{r3, r4, r5, pc}
 8008764:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008766:	b112      	cbz	r2, 800876e <_raise_r+0x1e>
 8008768:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800876c:	b94b      	cbnz	r3, 8008782 <_raise_r+0x32>
 800876e:	4628      	mov	r0, r5
 8008770:	f000 f830 	bl	80087d4 <_getpid_r>
 8008774:	4622      	mov	r2, r4
 8008776:	4601      	mov	r1, r0
 8008778:	4628      	mov	r0, r5
 800877a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800877e:	f000 b817 	b.w	80087b0 <_kill_r>
 8008782:	2b01      	cmp	r3, #1
 8008784:	d00a      	beq.n	800879c <_raise_r+0x4c>
 8008786:	1c59      	adds	r1, r3, #1
 8008788:	d103      	bne.n	8008792 <_raise_r+0x42>
 800878a:	2316      	movs	r3, #22
 800878c:	6003      	str	r3, [r0, #0]
 800878e:	2001      	movs	r0, #1
 8008790:	e7e7      	b.n	8008762 <_raise_r+0x12>
 8008792:	2100      	movs	r1, #0
 8008794:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008798:	4620      	mov	r0, r4
 800879a:	4798      	blx	r3
 800879c:	2000      	movs	r0, #0
 800879e:	e7e0      	b.n	8008762 <_raise_r+0x12>

080087a0 <raise>:
 80087a0:	4b02      	ldr	r3, [pc, #8]	@ (80087ac <raise+0xc>)
 80087a2:	4601      	mov	r1, r0
 80087a4:	6818      	ldr	r0, [r3, #0]
 80087a6:	f7ff bfd3 	b.w	8008750 <_raise_r>
 80087aa:	bf00      	nop
 80087ac:	2000001c 	.word	0x2000001c

080087b0 <_kill_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4d07      	ldr	r5, [pc, #28]	@ (80087d0 <_kill_r+0x20>)
 80087b4:	2300      	movs	r3, #0
 80087b6:	4604      	mov	r4, r0
 80087b8:	4608      	mov	r0, r1
 80087ba:	4611      	mov	r1, r2
 80087bc:	602b      	str	r3, [r5, #0]
 80087be:	f7f8 fe57 	bl	8001470 <_kill>
 80087c2:	1c43      	adds	r3, r0, #1
 80087c4:	d102      	bne.n	80087cc <_kill_r+0x1c>
 80087c6:	682b      	ldr	r3, [r5, #0]
 80087c8:	b103      	cbz	r3, 80087cc <_kill_r+0x1c>
 80087ca:	6023      	str	r3, [r4, #0]
 80087cc:	bd38      	pop	{r3, r4, r5, pc}
 80087ce:	bf00      	nop
 80087d0:	20000554 	.word	0x20000554

080087d4 <_getpid_r>:
 80087d4:	f7f8 be44 	b.w	8001460 <_getpid>

080087d8 <__swhatbuf_r>:
 80087d8:	b570      	push	{r4, r5, r6, lr}
 80087da:	460c      	mov	r4, r1
 80087dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e0:	2900      	cmp	r1, #0
 80087e2:	b096      	sub	sp, #88	@ 0x58
 80087e4:	4615      	mov	r5, r2
 80087e6:	461e      	mov	r6, r3
 80087e8:	da0d      	bge.n	8008806 <__swhatbuf_r+0x2e>
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80087f0:	f04f 0100 	mov.w	r1, #0
 80087f4:	bf14      	ite	ne
 80087f6:	2340      	movne	r3, #64	@ 0x40
 80087f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80087fc:	2000      	movs	r0, #0
 80087fe:	6031      	str	r1, [r6, #0]
 8008800:	602b      	str	r3, [r5, #0]
 8008802:	b016      	add	sp, #88	@ 0x58
 8008804:	bd70      	pop	{r4, r5, r6, pc}
 8008806:	466a      	mov	r2, sp
 8008808:	f000 f848 	bl	800889c <_fstat_r>
 800880c:	2800      	cmp	r0, #0
 800880e:	dbec      	blt.n	80087ea <__swhatbuf_r+0x12>
 8008810:	9901      	ldr	r1, [sp, #4]
 8008812:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008816:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800881a:	4259      	negs	r1, r3
 800881c:	4159      	adcs	r1, r3
 800881e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008822:	e7eb      	b.n	80087fc <__swhatbuf_r+0x24>

08008824 <__smakebuf_r>:
 8008824:	898b      	ldrh	r3, [r1, #12]
 8008826:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008828:	079d      	lsls	r5, r3, #30
 800882a:	4606      	mov	r6, r0
 800882c:	460c      	mov	r4, r1
 800882e:	d507      	bpl.n	8008840 <__smakebuf_r+0x1c>
 8008830:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008834:	6023      	str	r3, [r4, #0]
 8008836:	6123      	str	r3, [r4, #16]
 8008838:	2301      	movs	r3, #1
 800883a:	6163      	str	r3, [r4, #20]
 800883c:	b003      	add	sp, #12
 800883e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008840:	ab01      	add	r3, sp, #4
 8008842:	466a      	mov	r2, sp
 8008844:	f7ff ffc8 	bl	80087d8 <__swhatbuf_r>
 8008848:	9f00      	ldr	r7, [sp, #0]
 800884a:	4605      	mov	r5, r0
 800884c:	4639      	mov	r1, r7
 800884e:	4630      	mov	r0, r6
 8008850:	f7fe febe 	bl	80075d0 <_malloc_r>
 8008854:	b948      	cbnz	r0, 800886a <__smakebuf_r+0x46>
 8008856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800885a:	059a      	lsls	r2, r3, #22
 800885c:	d4ee      	bmi.n	800883c <__smakebuf_r+0x18>
 800885e:	f023 0303 	bic.w	r3, r3, #3
 8008862:	f043 0302 	orr.w	r3, r3, #2
 8008866:	81a3      	strh	r3, [r4, #12]
 8008868:	e7e2      	b.n	8008830 <__smakebuf_r+0xc>
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	6020      	str	r0, [r4, #0]
 800886e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008872:	81a3      	strh	r3, [r4, #12]
 8008874:	9b01      	ldr	r3, [sp, #4]
 8008876:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800887a:	b15b      	cbz	r3, 8008894 <__smakebuf_r+0x70>
 800887c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008880:	4630      	mov	r0, r6
 8008882:	f000 f81d 	bl	80088c0 <_isatty_r>
 8008886:	b128      	cbz	r0, 8008894 <__smakebuf_r+0x70>
 8008888:	89a3      	ldrh	r3, [r4, #12]
 800888a:	f023 0303 	bic.w	r3, r3, #3
 800888e:	f043 0301 	orr.w	r3, r3, #1
 8008892:	81a3      	strh	r3, [r4, #12]
 8008894:	89a3      	ldrh	r3, [r4, #12]
 8008896:	431d      	orrs	r5, r3
 8008898:	81a5      	strh	r5, [r4, #12]
 800889a:	e7cf      	b.n	800883c <__smakebuf_r+0x18>

0800889c <_fstat_r>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	4d07      	ldr	r5, [pc, #28]	@ (80088bc <_fstat_r+0x20>)
 80088a0:	2300      	movs	r3, #0
 80088a2:	4604      	mov	r4, r0
 80088a4:	4608      	mov	r0, r1
 80088a6:	4611      	mov	r1, r2
 80088a8:	602b      	str	r3, [r5, #0]
 80088aa:	f7f8 fe41 	bl	8001530 <_fstat>
 80088ae:	1c43      	adds	r3, r0, #1
 80088b0:	d102      	bne.n	80088b8 <_fstat_r+0x1c>
 80088b2:	682b      	ldr	r3, [r5, #0]
 80088b4:	b103      	cbz	r3, 80088b8 <_fstat_r+0x1c>
 80088b6:	6023      	str	r3, [r4, #0]
 80088b8:	bd38      	pop	{r3, r4, r5, pc}
 80088ba:	bf00      	nop
 80088bc:	20000554 	.word	0x20000554

080088c0 <_isatty_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4d06      	ldr	r5, [pc, #24]	@ (80088dc <_isatty_r+0x1c>)
 80088c4:	2300      	movs	r3, #0
 80088c6:	4604      	mov	r4, r0
 80088c8:	4608      	mov	r0, r1
 80088ca:	602b      	str	r3, [r5, #0]
 80088cc:	f7f8 fe40 	bl	8001550 <_isatty>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d102      	bne.n	80088da <_isatty_r+0x1a>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	b103      	cbz	r3, 80088da <_isatty_r+0x1a>
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	bd38      	pop	{r3, r4, r5, pc}
 80088dc:	20000554 	.word	0x20000554

080088e0 <_init>:
 80088e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e2:	bf00      	nop
 80088e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088e6:	bc08      	pop	{r3}
 80088e8:	469e      	mov	lr, r3
 80088ea:	4770      	bx	lr

080088ec <_fini>:
 80088ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ee:	bf00      	nop
 80088f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088f2:	bc08      	pop	{r3}
 80088f4:	469e      	mov	lr, r3
 80088f6:	4770      	bx	lr
